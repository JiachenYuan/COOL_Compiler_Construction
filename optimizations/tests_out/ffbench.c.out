Running complicated test: ffbench.c
ffbench.c:157:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]
static void fourn(data, nn, ndim, isign)
            ^
1 warning generated.
UnitSCCP running on main
Visiting BB: 
VisitInstr:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 2), align 4
Check LatCell: 0
In Meet:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 2), align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 2), align 4
VisitInstr:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4
Check LatCell: 0
In Meet:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4
VisitInstr:   %1 = call noalias dereferenceable_or_null(1048592) ptr @malloc(i64 noundef 1048592) #8
Check LatCell: 0
In Meet:   %1 = call noalias dereferenceable_or_null(1048592) ptr @malloc(i64 noundef 1048592) #8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %1 = call noalias dereferenceable_or_null(1048592) ptr @malloc(i64 noundef 1048592) #8
VisitInstr:   %2 = icmp eq ptr %1, null
CmpInst:   %2 = icmp eq ptr %1, null
Check LatCell: 0
In Meet:   %2 = icmp eq ptr %1, null, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %2 = icmp eq ptr %1, null
VisitInstr:   br i1 %2, label %3, label %6
BranchInst:   br i1 %2, label %3, label %6
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa662540, 0x5615fa664a90, 0
Adding edge:  -> 
In AddEdge: 0x5615fa662540, 0x5615fa664a90, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %4 = load ptr, ptr @stderr, align 8
Check LatCell: 0
In Meet:   %4 = load ptr, ptr @stderr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %4 = load ptr, ptr @stderr, align 8
VisitInstr:   %5 = call i64 @fwrite(ptr nonnull @.str, i64 27, i64 1, ptr %4) #9
Check LatCell: 0
In Meet:   %5 = call i64 @fwrite(ptr nonnull @.str, i64 27, i64 1, ptr %4) #9, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %5 = call i64 @fwrite(ptr nonnull @.str, i64 27, i64 1, ptr %4) #9
VisitInstr:   call void @exit(i32 noundef 1) #10
Check LatCell: 0
In Meet:   call void @exit(i32 noundef 1) #10, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @exit(i32 noundef 1) #10
VisitInstr:   unreachable
Check LatCell: 0
In Meet:   unreachable, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   unreachable
Visiting BB: 
VisitInstr:   call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(1048592) %1, i8 0, i64 1048592, i1 false)
Check LatCell: 0
In Meet:   call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(1048592) %1, i8 0, i64 1048592, i1 false), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(1048592) %1, i8 0, i64 1048592, i1 false)
VisitInstr:   br label %7
BranchInst:   br label %7
In AddEdge: 0x5615fa6649a0, 0x5615fa665390, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
PHI:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 0
In Meet:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
VisitInstr:   %8 = icmp ult i32 %.01, 256
CmpInst:   %8 = icmp ult i32 %.01, 256
Check LatCell: 0
In Meet:   %8 = icmp ult i32 %.01, 256, Lat1: (1, 0x0), Lat2: (0, 0x5615fa668e80)
Lat2.second: i1 true
Meet:   %8 = icmp ult i32 %.01, 256
VisitInstr:   br i1 %8, label %9, label %27
BranchInst:   br i1 %8, label %9, label %27
In BranchInst: 0, 0x5615fa668e80
In AddEdge: 0x5615fa665320, 0x5615fa665690, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
PHI:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 0
In Meet:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
VisitInstr:   %10 = icmp ult i32 %.02, 256
CmpInst:   %10 = icmp ult i32 %.02, 256
Check LatCell: 0
In Meet:   %10 = icmp ult i32 %.02, 256, Lat1: (1, 0x0), Lat2: (0, 0x5615fa668e80)
Lat2.second: i1 true
Meet:   %10 = icmp ult i32 %.02, 256
VisitInstr:   br i1 %10, label %11, label %25
BranchInst:   br i1 %10, label %11, label %25
In BranchInst: 0, 0x5615fa668e80
In AddEdge: 0x5615fa665770, 0x5615fa665ae0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %12 = and i32 %.01, 15
BinaryOp:   %12 = and i32 %.01, 15
Check LatCell: 0
In Meet:   %12 = and i32 %.01, 15, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %12 = and i32 %.01, 15
VisitInstr:   %13 = icmp eq i32 %12, 8
CmpInst:   %13 = icmp eq i32 %12, 8
Check LatCell: 0
In Meet:   %13 = icmp eq i32 %12, 8, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6650e0)
Lat2.second: i1 false
Meet:   %13 = icmp eq i32 %12, 8
VisitInstr:   %14 = and i32 %.02, 15
BinaryOp:   %14 = and i32 %.02, 15
Check LatCell: 0
In Meet:   %14 = and i32 %.02, 15, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %14 = and i32 %.02, 15
VisitInstr:   %15 = icmp eq i32 %14, 8
CmpInst:   %15 = icmp eq i32 %14, 8
Check LatCell: 0
In Meet:   %15 = icmp eq i32 %14, 8, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6650e0)
Lat2.second: i1 false
Meet:   %15 = icmp eq i32 %14, 8
VisitInstr:   %or.cond = select i1 %13, i1 true, i1 %15
Select:   %or.cond = select i1 %13, i1 true, i1 %15
Select LatCond: 0, 0x5615fa6650e0
Select LatTrue: 0, 0x5615fa668e80
Select LatFals: 0, 0x5615fa6650e0
Check LatCell: 0
In Meet:   %or.cond = select i1 %13, i1 true, i1 %15, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6650e0)
Lat2.second: i1 false
Meet:   %or.cond = select i1 %13, i1 true, i1 %15
VisitInstr:   br i1 %or.cond, label %16, label %23
BranchInst:   br i1 %or.cond, label %16, label %23
In BranchInst: 0, 0x5615fa6650e0
In AddEdge: 0x5615fa6659a0, 0x5615fa665e00, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %24 = add nuw nsw i32 %.02, 1
BinaryOp:   %24 = add nuw nsw i32 %.02, 1
Check LatCell: 0
In Meet:   %24 = add nuw nsw i32 %.02, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %24 = add nuw nsw i32 %.02, 1
Adding SSA:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
VisitInstr:   br label %9, !llvm.loop !6
BranchInst:   br label %9, !llvm.loop !6
In AddEdge: 0x5615fa667540, 0x5615fa6677b0, 0
Adding edge:  -> 
Visiting SSA:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
VisitInstr:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
PHI:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
PHI LatOp: 0, 0x5615fa662c50
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 1
In Meet:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ], Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
Adding SSA:   %14 = and i32 %.02, 15
Adding SSA:   %10 = icmp ult i32 %.02, 256
Adding SSA:   %24 = add nuw nsw i32 %.02, 1
Visiting SSA:   %14 = and i32 %.02, 15
VisitInstr:   %14 = and i32 %.02, 15
BinaryOp:   %14 = and i32 %.02, 15
Check LatCell: 1
In Meet:   %14 = and i32 %.02, 15, Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %14 = and i32 %.02, 15
Adding SSA:   %15 = icmp eq i32 %14, 8
Visiting SSA:   %10 = icmp ult i32 %.02, 256
VisitInstr:   %10 = icmp ult i32 %.02, 256
CmpInst:   %10 = icmp ult i32 %.02, 256
Check LatCell: 1
In Meet:   %10 = icmp ult i32 %.02, 256, Lat1: (0, 0x5615fa668e80), Lat2: (-1, 0x0)
Lat1.second: i1 true
Meet:   %10 = icmp ult i32 %.02, 256
Adding SSA:   br i1 %10, label %11, label %25
Visiting SSA:   %24 = add nuw nsw i32 %.02, 1
VisitInstr:   %24 = add nuw nsw i32 %.02, 1
BinaryOp:   %24 = add nuw nsw i32 %.02, 1
Check LatCell: 1
In Meet:   %24 = add nuw nsw i32 %.02, 1, Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %24 = add nuw nsw i32 %.02, 1
Adding SSA:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
Visiting SSA:   %15 = icmp eq i32 %14, 8
VisitInstr:   %15 = icmp eq i32 %14, 8
CmpInst:   %15 = icmp eq i32 %14, 8
Check LatCell: 1
In Meet:   %15 = icmp eq i32 %14, 8, Lat1: (0, 0x5615fa6650e0), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %15 = icmp eq i32 %14, 8
Adding SSA:   %or.cond = select i1 %13, i1 true, i1 %15
Visiting SSA:   br i1 %10, label %11, label %25
VisitInstr:   br i1 %10, label %11, label %25
BranchInst:   br i1 %10, label %11, label %25
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa665770, 0x5615fa665ae0, 0
In AddEdge: 0x5615fa665770, 0x5615fa665ae0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %26 = add nuw nsw i32 %.01, 1
BinaryOp:   %26 = add nuw nsw i32 %.01, 1
Check LatCell: 0
In Meet:   %26 = add nuw nsw i32 %.01, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %26 = add nuw nsw i32 %.01, 1
Adding SSA:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
VisitInstr:   br label %7, !llvm.loop !8
BranchInst:   br label %7, !llvm.loop !8
In AddEdge: 0x5615fa668310, 0x5615fa668580, 0
Adding edge:  -> 
Visiting SSA:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
VisitInstr:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
Visiting SSA:   %or.cond = select i1 %13, i1 true, i1 %15
VisitInstr:   %or.cond = select i1 %13, i1 true, i1 %15
Select:   %or.cond = select i1 %13, i1 true, i1 %15
Select LatCond: 0, 0x5615fa6650e0
Select LatTrue: 0, 0x5615fa668e80
Select LatFals: -1, 0x0
Check LatCell: 1
In Meet:   %or.cond = select i1 %13, i1 true, i1 %15, Lat1: (0, 0x5615fa6650e0), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %or.cond = select i1 %13, i1 true, i1 %15
Adding SSA:   br i1 %or.cond, label %16, label %23
Visiting SSA:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
VisitInstr:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
PHI:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
PHI LatOp: 0, 0x5615fa662d10
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 1
In Meet:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ], Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
Adding SSA:   %8 = icmp ult i32 %.01, 256
Adding SSA:   %26 = add nuw nsw i32 %.01, 1
Adding SSA:   %12 = and i32 %.01, 15
Visiting SSA:   br i1 %or.cond, label %16, label %23
VisitInstr:   br i1 %or.cond, label %16, label %23
BranchInst:   br i1 %or.cond, label %16, label %23
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa6659a0, 0x5615fa665e00, 0
Adding edge:  -> 
In AddEdge: 0x5615fa6659a0, 0x5615fa665e00, 1
Visiting BB: 
VisitInstr:   %17 = shl nsw i32 %.01, 8
BinaryOp:   %17 = shl nsw i32 %.01, 8
Check LatCell: 0
In Meet:   %17 = shl nsw i32 %.01, 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %17 = shl nsw i32 %.01, 8
VisitInstr:   %18 = add nuw nsw i32 %17, %.02
BinaryOp:   %18 = add nuw nsw i32 %17, %.02
Check LatCell: 0
In Meet:   %18 = add nuw nsw i32 %17, %.02, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %18 = add nuw nsw i32 %17, %.02
VisitInstr:   %19 = shl nuw nsw i32 %18, 1
BinaryOp:   %19 = shl nuw nsw i32 %18, 1
Check LatCell: 0
In Meet:   %19 = shl nuw nsw i32 %18, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %19 = shl nuw nsw i32 %18, 1
VisitInstr:   %20 = or i32 %19, 1
BinaryOp:   %20 = or i32 %19, 1
Check LatCell: 0
In Meet:   %20 = or i32 %19, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %20 = or i32 %19, 1
VisitInstr:   %21 = zext i32 %20 to i64
UnaryOp:   %21 = zext i32 %20 to i64
Check LatCell: 0
In Meet:   %21 = zext i32 %20 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %21 = zext i32 %20 to i64
VisitInstr:   %22 = getelementptr inbounds double, ptr %1, i64 %21
GetElementPtr:   %22 = getelementptr inbounds double, ptr %1, i64 %21
Check LatCell: 0
In Meet:   %22 = getelementptr inbounds double, ptr %1, i64 %21, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %22 = getelementptr inbounds double, ptr %1, i64 %21
VisitInstr:   store double 1.280000e+02, ptr %22, align 8
Check LatCell: 0
In Meet:   store double 1.280000e+02, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 1.280000e+02, ptr %22, align 8
VisitInstr:   br label %23
BranchInst:   br label %23
In AddEdge: 0x5615fa665cc0, 0x5615fa6674f0, 0
Adding edge:  -> 
Visiting SSA:   %8 = icmp ult i32 %.01, 256
VisitInstr:   %8 = icmp ult i32 %.01, 256
CmpInst:   %8 = icmp ult i32 %.01, 256
Check LatCell: 1
In Meet:   %8 = icmp ult i32 %.01, 256, Lat1: (0, 0x5615fa668e80), Lat2: (-1, 0x0)
Lat1.second: i1 true
Meet:   %8 = icmp ult i32 %.01, 256
Adding SSA:   br i1 %8, label %9, label %27
Visiting SSA:   %26 = add nuw nsw i32 %.01, 1
VisitInstr:   %26 = add nuw nsw i32 %.01, 1
BinaryOp:   %26 = add nuw nsw i32 %.01, 1
Check LatCell: 1
In Meet:   %26 = add nuw nsw i32 %.01, 1, Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %26 = add nuw nsw i32 %.01, 1
Adding SSA:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
Visiting SSA:   %12 = and i32 %.01, 15
VisitInstr:   %12 = and i32 %.01, 15
BinaryOp:   %12 = and i32 %.01, 15
Check LatCell: 1
In Meet:   %12 = and i32 %.01, 15, Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %12 = and i32 %.01, 15
Adding SSA:   %13 = icmp eq i32 %12, 8
Visiting SSA:   br i1 %8, label %9, label %27
VisitInstr:   br i1 %8, label %9, label %27
BranchInst:   br i1 %8, label %9, label %27
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa665320, 0x5615fa665690, 0
In AddEdge: 0x5615fa665320, 0x5615fa665690, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
PHI:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 0
In Meet:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
VisitInstr:   %28 = icmp ult i32 %.1, 63
CmpInst:   %28 = icmp ult i32 %.1, 63
Check LatCell: 0
In Meet:   %28 = icmp ult i32 %.1, 63, Lat1: (1, 0x0), Lat2: (0, 0x5615fa668e80)
Lat2.second: i1 true
Meet:   %28 = icmp ult i32 %.1, 63
VisitInstr:   br i1 %28, label %29, label %31
BranchInst:   br i1 %28, label %29, label %31
In BranchInst: 0, 0x5615fa668e80
In AddEdge: 0x5615fa668760, 0x5615fa668ad0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   call void @fourn(ptr noundef nonnull %1, ptr noundef nonnull @main.nsize, i32 noundef 2, i32 noundef 1)
Check LatCell: 0
In Meet:   call void @fourn(ptr noundef nonnull %1, ptr noundef nonnull @main.nsize, i32 noundef 2, i32 noundef 1), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @fourn(ptr noundef nonnull %1, ptr noundef nonnull @main.nsize, i32 noundef 2, i32 noundef 1)
VisitInstr:   call void @fourn(ptr noundef nonnull %1, ptr noundef nonnull @main.nsize, i32 noundef 2, i32 noundef -1)
Check LatCell: 0
In Meet:   call void @fourn(ptr noundef nonnull %1, ptr noundef nonnull @main.nsize, i32 noundef 2, i32 noundef -1), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @fourn(ptr noundef nonnull %1, ptr noundef nonnull @main.nsize, i32 noundef 2, i32 noundef -1)
VisitInstr:   %30 = add nuw nsw i32 %.1, 1
BinaryOp:   %30 = add nuw nsw i32 %.1, 1
Check LatCell: 0
In Meet:   %30 = add nuw nsw i32 %.1, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %30 = add nuw nsw i32 %.1, 1
Adding SSA:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
VisitInstr:   br label %27, !llvm.loop !9
BranchInst:   br label %27, !llvm.loop !9
In AddEdge: 0x5615fa668990, 0x5615fa669270, 0
Adding edge:  -> 
Visiting SSA:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
VisitInstr:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
Visiting SSA:   %13 = icmp eq i32 %12, 8
VisitInstr:   %13 = icmp eq i32 %12, 8
CmpInst:   %13 = icmp eq i32 %12, 8
Check LatCell: 1
In Meet:   %13 = icmp eq i32 %12, 8, Lat1: (0, 0x5615fa6650e0), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %13 = icmp eq i32 %12, 8
Adding SSA:   %or.cond = select i1 %13, i1 true, i1 %15
Visiting SSA:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
VisitInstr:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
PHI:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
PHI LatOp: 0, 0x5615fa662c50
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 1
In Meet:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ], Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
Adding SSA:   %28 = icmp ult i32 %.1, 63
Adding SSA:   %30 = add nuw nsw i32 %.1, 1
Visiting SSA:   %or.cond = select i1 %13, i1 true, i1 %15
VisitInstr:   %or.cond = select i1 %13, i1 true, i1 %15
Visiting SSA:   %28 = icmp ult i32 %.1, 63
VisitInstr:   %28 = icmp ult i32 %.1, 63
CmpInst:   %28 = icmp ult i32 %.1, 63
Check LatCell: 1
In Meet:   %28 = icmp ult i32 %.1, 63, Lat1: (0, 0x5615fa668e80), Lat2: (-1, 0x0)
Lat1.second: i1 true
Meet:   %28 = icmp ult i32 %.1, 63
Adding SSA:   br i1 %28, label %29, label %31
Visiting SSA:   %30 = add nuw nsw i32 %.1, 1
VisitInstr:   %30 = add nuw nsw i32 %.1, 1
BinaryOp:   %30 = add nuw nsw i32 %.1, 1
Check LatCell: 1
In Meet:   %30 = add nuw nsw i32 %.1, 1, Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %30 = add nuw nsw i32 %.1, 1
Adding SSA:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
Visiting SSA:   br i1 %28, label %29, label %31
VisitInstr:   br i1 %28, label %29, label %31
BranchInst:   br i1 %28, label %29, label %31
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa668760, 0x5615fa668ad0, 0
In AddEdge: 0x5615fa668760, 0x5615fa668ad0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.011 = phi double [ %.011., %33 ], [ 1.000000e+10, %27 ]
PHI:   %.011 = phi double [ %.011., %33 ], [ 1.000000e+10, %27 ]
PHI LatOp: 0, 0x5615fa668a30
Check LatCell: 0
In Meet:   %.011 = phi double [ %.011., %33 ], [ 1.000000e+10, %27 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa668a30)
Lat2.second: double 1.000000e+10
Meet:   %.011 = phi double [ %.011., %33 ], [ 1.000000e+10, %27 ]
VisitInstr:   %.010 = phi double [ %39, %33 ], [ -1.000000e+10, %27 ]
PHI:   %.010 = phi double [ %39, %33 ], [ -1.000000e+10, %27 ]
PHI LatOp: 0, 0x5615fa669450
Check LatCell: 0
In Meet:   %.010 = phi double [ %39, %33 ], [ -1.000000e+10, %27 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa669450)
Lat2.second: double -1.000000e+10
Meet:   %.010 = phi double [ %39, %33 ], [ -1.000000e+10, %27 ]
VisitInstr:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ]
PHI:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ]
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 0
In Meet:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ]
VisitInstr:   %32 = icmp ult i32 %.2, 65537
CmpInst:   %32 = icmp ult i32 %.2, 65537
Check LatCell: 0
In Meet:   %32 = icmp ult i32 %.2, 65537, Lat1: (1, 0x0), Lat2: (0, 0x5615fa668e80)
Lat2.second: i1 true
Meet:   %32 = icmp ult i32 %.2, 65537
VisitInstr:   br i1 %32, label %33, label %41
BranchInst:   br i1 %32, label %33, label %41
In BranchInst: 0, 0x5615fa668e80
In AddEdge: 0x5615fa669830, 0x5615fa669c50, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %34 = zext i32 %.2 to i64
UnaryOp:   %34 = zext i32 %.2 to i64
Check LatCell: 0
In Meet:   %34 = zext i32 %.2 to i64, Lat1: (1, 0x0), Lat2: (0, 0x5615fa677c60)
Lat2.second: i32 zext (i32 1 to i32)
Meet:   %34 = zext i32 %.2 to i64
VisitInstr:   %35 = getelementptr inbounds double, ptr %1, i64 %34
GetElementPtr:   %35 = getelementptr inbounds double, ptr %1, i64 %34
Check LatCell: 0
In Meet:   %35 = getelementptr inbounds double, ptr %1, i64 %34, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %35 = getelementptr inbounds double, ptr %1, i64 %34
VisitInstr:   %36 = load double, ptr %35, align 8
Check LatCell: 0
In Meet:   %36 = load double, ptr %35, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %36 = load double, ptr %35, align 8
VisitInstr:   %37 = fcmp ugt double %36, %.011
CmpInst:   %37 = fcmp ugt double %36, %.011
Check LatCell: 0
In Meet:   %37 = fcmp ugt double %36, %.011, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %37 = fcmp ugt double %36, %.011
VisitInstr:   %.011. = select i1 %37, double %.011, double %36
Select:   %.011. = select i1 %37, double %.011, double %36
Select LatCond: -1, 0x0
Select LatTrue: 0, 0x5615fa668a30
Select LatFals: -1, 0x0
Check LatCell: 0
In Meet:   %.011. = select i1 %37, double %.011, double %36, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.011. = select i1 %37, double %.011, double %36
Adding SSA:   %.011 = phi double [ %.011., %33 ], [ 1.000000e+10, %27 ]
VisitInstr:   %38 = fcmp ogt double %36, %.010
CmpInst:   %38 = fcmp ogt double %36, %.010
Check LatCell: 0
In Meet:   %38 = fcmp ogt double %36, %.010, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %38 = fcmp ogt double %36, %.010
VisitInstr:   %39 = select i1 %38, double %36, double %.010
Select:   %39 = select i1 %38, double %36, double %.010
Select LatCond: -1, 0x0
Select LatTrue: -1, 0x0
Select LatFals: 0, 0x5615fa669450
Check LatCell: 0
In Meet:   %39 = select i1 %38, double %36, double %.010, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %39 = select i1 %38, double %36, double %.010
Adding SSA:   %.010 = phi double [ %39, %33 ], [ -1.000000e+10, %27 ]
VisitInstr:   %40 = add nuw nsw i32 %.2, 2
BinaryOp:   %40 = add nuw nsw i32 %.2, 2
Check LatCell: 0
In Meet:   %40 = add nuw nsw i32 %.2, 2, Lat1: (1, 0x0), Lat2: (0, 0x5615fa67f370)
Lat2.second: i32 3
Meet:   %40 = add nuw nsw i32 %.2, 2
Adding SSA:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ]
VisitInstr:   br label %31, !llvm.loop !10
BranchInst:   br label %31, !llvm.loop !10
In AddEdge: 0x5615fa669b10, 0x5615fa66ca10, 0
Adding edge:  -> 
Visiting SSA:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
VisitInstr:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
Visiting SSA:   %.011 = phi double [ %.011., %33 ], [ 1.000000e+10, %27 ]
VisitInstr:   %.011 = phi double [ %.011., %33 ], [ 1.000000e+10, %27 ]
PHI:   %.011 = phi double [ %.011., %33 ], [ 1.000000e+10, %27 ]
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.011 = phi double [ %.011., %33 ], [ 1.000000e+10, %27 ], Lat1: (0, 0x5615fa668a30), Lat2: (-1, 0x0)
Lat1.second: double 1.000000e+10
Meet:   %.011 = phi double [ %.011., %33 ], [ 1.000000e+10, %27 ]
Adding SSA:   %.011. = select i1 %37, double %.011, double %36
Adding SSA:   %37 = fcmp ugt double %36, %.011
Visiting SSA:   %.010 = phi double [ %39, %33 ], [ -1.000000e+10, %27 ]
VisitInstr:   %.010 = phi double [ %39, %33 ], [ -1.000000e+10, %27 ]
PHI:   %.010 = phi double [ %39, %33 ], [ -1.000000e+10, %27 ]
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.010 = phi double [ %39, %33 ], [ -1.000000e+10, %27 ], Lat1: (0, 0x5615fa669450), Lat2: (-1, 0x0)
Lat1.second: double -1.000000e+10
Meet:   %.010 = phi double [ %39, %33 ], [ -1.000000e+10, %27 ]
Adding SSA:   %39 = select i1 %38, double %36, double %.010
Adding SSA:   %38 = fcmp ogt double %36, %.010
Visiting SSA:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ]
VisitInstr:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ]
PHI:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ]
PHI LatOp: 0, 0x5615fa67f370
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 1
In Meet:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ], Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ]
Adding SSA:   %34 = zext i32 %.2 to i64
Adding SSA:   %32 = icmp ult i32 %.2, 65537
Adding SSA:   %40 = add nuw nsw i32 %.2, 2
Visiting SSA:   %.011. = select i1 %37, double %.011, double %36
VisitInstr:   %.011. = select i1 %37, double %.011, double %36
Visiting SSA:   %37 = fcmp ugt double %36, %.011
VisitInstr:   %37 = fcmp ugt double %36, %.011
Visiting SSA:   %39 = select i1 %38, double %36, double %.010
VisitInstr:   %39 = select i1 %38, double %36, double %.010
Visiting SSA:   %38 = fcmp ogt double %36, %.010
VisitInstr:   %38 = fcmp ogt double %36, %.010
Visiting SSA:   %34 = zext i32 %.2 to i64
VisitInstr:   %34 = zext i32 %.2 to i64
UnaryOp:   %34 = zext i32 %.2 to i64
Check LatCell: 1
In Meet:   %34 = zext i32 %.2 to i64, Lat1: (0, 0x5615fa677c60), Lat2: (-1, 0x0)
Lat1.second: i32 zext (i32 1 to i32)
Meet:   %34 = zext i32 %.2 to i64
Adding SSA:   %35 = getelementptr inbounds double, ptr %1, i64 %34
Visiting SSA:   %32 = icmp ult i32 %.2, 65537
VisitInstr:   %32 = icmp ult i32 %.2, 65537
CmpInst:   %32 = icmp ult i32 %.2, 65537
Check LatCell: 1
In Meet:   %32 = icmp ult i32 %.2, 65537, Lat1: (0, 0x5615fa668e80), Lat2: (-1, 0x0)
Lat1.second: i1 true
Meet:   %32 = icmp ult i32 %.2, 65537
Adding SSA:   br i1 %32, label %33, label %41
Visiting SSA:   %40 = add nuw nsw i32 %.2, 2
VisitInstr:   %40 = add nuw nsw i32 %.2, 2
BinaryOp:   %40 = add nuw nsw i32 %.2, 2
Check LatCell: 1
In Meet:   %40 = add nuw nsw i32 %.2, 2, Lat1: (0, 0x5615fa67f370), Lat2: (-1, 0x0)
Lat1.second: i32 3
Meet:   %40 = add nuw nsw i32 %.2, 2
Adding SSA:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ]
Visiting SSA:   %35 = getelementptr inbounds double, ptr %1, i64 %34
VisitInstr:   %35 = getelementptr inbounds double, ptr %1, i64 %34
Visiting SSA:   br i1 %32, label %33, label %41
VisitInstr:   br i1 %32, label %33, label %41
BranchInst:   br i1 %32, label %33, label %41
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa669830, 0x5615fa669c50, 0
In AddEdge: 0x5615fa669830, 0x5615fa669c50, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %42 = fsub double %.010, %.011
BinaryOp:   %42 = fsub double %.010, %.011
Check LatCell: 0
In Meet:   %42 = fsub double %.010, %.011, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %42 = fsub double %.010, %.011
VisitInstr:   %43 = fdiv double 2.550000e+02, %42
BinaryOp:   %43 = fdiv double 2.550000e+02, %42
Check LatCell: 0
In Meet:   %43 = fdiv double 2.550000e+02, %42, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %43 = fdiv double 2.550000e+02, %42
VisitInstr:   br label %44
BranchInst:   br label %44
In AddEdge: 0x5615fa669b60, 0x5615fa66d080, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
PHI:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 0
In Meet:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
VisitInstr:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ]
PHI:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ]
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 0
In Meet:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ]
VisitInstr:   %45 = icmp ult i32 %.3, 256
CmpInst:   %45 = icmp ult i32 %.3, 256
Check LatCell: 0
In Meet:   %45 = icmp ult i32 %.3, 256, Lat1: (1, 0x0), Lat2: (0, 0x5615fa668e80)
Lat2.second: i1 true
Meet:   %45 = icmp ult i32 %.3, 256
VisitInstr:   br i1 %45, label %46, label %73
BranchInst:   br i1 %45, label %46, label %73
In BranchInst: 0, 0x5615fa668e80
In AddEdge: 0x5615fa66cfd0, 0x5615fa66d380, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
PHI:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 0
In Meet:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
Adding SSA:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
VisitInstr:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ]
PHI:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ]
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 0
In Meet:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ]
VisitInstr:   %47 = icmp ult i32 %.13, 256
CmpInst:   %47 = icmp ult i32 %.13, 256
Check LatCell: 0
In Meet:   %47 = icmp ult i32 %.13, 256, Lat1: (1, 0x0), Lat2: (0, 0x5615fa668e80)
Lat2.second: i1 true
Meet:   %47 = icmp ult i32 %.13, 256
VisitInstr:   br i1 %47, label %48, label %71
BranchInst:   br i1 %47, label %48, label %71
In BranchInst: 0, 0x5615fa668e80
In AddEdge: 0x5615fa66d460, 0x5615fa66d7d0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %49 = shl nsw i32 %.3, 8
BinaryOp:   %49 = shl nsw i32 %.3, 8
Check LatCell: 0
In Meet:   %49 = shl nsw i32 %.3, 8, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %49 = shl nsw i32 %.3, 8
VisitInstr:   %50 = add nuw nsw i32 %49, %.13
BinaryOp:   %50 = add nuw nsw i32 %49, %.13
Check LatCell: 0
In Meet:   %50 = add nuw nsw i32 %49, %.13, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %50 = add nuw nsw i32 %49, %.13
VisitInstr:   %51 = shl nuw nsw i32 %50, 1
BinaryOp:   %51 = shl nuw nsw i32 %50, 1
Check LatCell: 0
In Meet:   %51 = shl nuw nsw i32 %50, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %51 = shl nuw nsw i32 %50, 1
VisitInstr:   %52 = or i32 %51, 1
BinaryOp:   %52 = or i32 %51, 1
Check LatCell: 0
In Meet:   %52 = or i32 %51, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %52 = or i32 %51, 1
VisitInstr:   %53 = zext i32 %52 to i64
UnaryOp:   %53 = zext i32 %52 to i64
Check LatCell: 0
In Meet:   %53 = zext i32 %52 to i64, Lat1: (1, 0x0), Lat2: (0, 0x5615fa677c60)
Lat2.second: i32 zext (i32 1 to i32)
Meet:   %53 = zext i32 %52 to i64
VisitInstr:   %54 = getelementptr inbounds double, ptr %1, i64 %53
GetElementPtr:   %54 = getelementptr inbounds double, ptr %1, i64 %53
Check LatCell: 0
In Meet:   %54 = getelementptr inbounds double, ptr %1, i64 %53, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %54 = getelementptr inbounds double, ptr %1, i64 %53
VisitInstr:   %55 = load double, ptr %54, align 8
Check LatCell: 0
In Meet:   %55 = load double, ptr %54, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %55 = load double, ptr %54, align 8
VisitInstr:   %56 = fsub double %55, %.011
BinaryOp:   %56 = fsub double %55, %.011
Check LatCell: 0
In Meet:   %56 = fsub double %55, %.011, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %56 = fsub double %55, %.011
VisitInstr:   %57 = fmul double %56, %43
BinaryOp:   %57 = fmul double %56, %43
Check LatCell: 0
In Meet:   %57 = fmul double %56, %43, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %57 = fmul double %56, %43
VisitInstr:   %58 = fptosi double %57 to i32
UnaryOp:   %58 = fptosi double %57 to i32
Check LatCell: 0
In Meet:   %58 = fptosi double %57 to i32, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %58 = fptosi double %57 to i32
VisitInstr:   %59 = and i32 %.3, 15
BinaryOp:   %59 = and i32 %.3, 15
Check LatCell: 0
In Meet:   %59 = and i32 %.3, 15, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %59 = and i32 %.3, 15
VisitInstr:   %60 = icmp eq i32 %59, 8
CmpInst:   %60 = icmp eq i32 %59, 8
Check LatCell: 0
In Meet:   %60 = icmp eq i32 %59, 8, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6650e0)
Lat2.second: i1 false
Meet:   %60 = icmp eq i32 %59, 8
VisitInstr:   %61 = and i32 %.13, 15
BinaryOp:   %61 = and i32 %.13, 15
Check LatCell: 0
In Meet:   %61 = and i32 %.13, 15, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %61 = and i32 %.13, 15
VisitInstr:   %62 = icmp eq i32 %61, 8
CmpInst:   %62 = icmp eq i32 %61, 8
Check LatCell: 0
In Meet:   %62 = icmp eq i32 %61, 8, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6650e0)
Lat2.second: i1 false
Meet:   %62 = icmp eq i32 %61, 8
VisitInstr:   %63 = select i1 %60, i1 true, i1 %62
Select:   %63 = select i1 %60, i1 true, i1 %62
Select LatCond: 0, 0x5615fa6650e0
Select LatTrue: 0, 0x5615fa668e80
Select LatFals: 0, 0x5615fa6650e0
Check LatCell: 0
In Meet:   %63 = select i1 %60, i1 true, i1 %62, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6650e0)
Lat2.second: i1 false
Meet:   %63 = select i1 %60, i1 true, i1 %62
VisitInstr:   %64 = select i1 %63, i32 255, i32 0
Select:   %64 = select i1 %63, i32 255, i32 0
Select LatCond: 0, 0x5615fa6650e0
Select LatTrue: 0, 0x5615fa676810
Select LatFals: 0, 0x5615fa662d10
Check LatCell: 0
In Meet:   %64 = select i1 %63, i32 255, i32 0, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %64 = select i1 %63, i32 255, i32 0
VisitInstr:   %.not = icmp eq i32 %64, %58
CmpInst:   %.not = icmp eq i32 %64, %58
Check LatCell: 0
In Meet:   %.not = icmp eq i32 %64, %58, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.not = icmp eq i32 %64, %58
VisitInstr:   br i1 %.not, label %69, label %65
BranchInst:   br i1 %.not, label %69, label %65
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa66d690, 0x5615fa676bf0, 0
Adding edge:  -> 
In AddEdge: 0x5615fa66d690, 0x5615fa676bf0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
PHI:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 0
In Meet:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662d10)
Lat2.second: i32 0
Meet:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
Adding SSA:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
VisitInstr:   %70 = add nuw nsw i32 %.13, 1
BinaryOp:   %70 = add nuw nsw i32 %.13, 1
Check LatCell: 0
In Meet:   %70 = add nuw nsw i32 %.13, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %70 = add nuw nsw i32 %.13, 1
Adding SSA:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ]
VisitInstr:   br label %46, !llvm.loop !11
BranchInst:   br label %46, !llvm.loop !11
In AddEdge: 0x5615fa677200, 0x5615fa677470, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %66 = add nsw i32 %.17, 1
BinaryOp:   %66 = add nsw i32 %.17, 1
Check LatCell: 0
In Meet:   %66 = add nsw i32 %.17, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %66 = add nsw i32 %.17, 1
Adding SSA:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
VisitInstr:   %67 = load ptr, ptr @stderr, align 8
Check LatCell: 0
In Meet:   %67 = load ptr, ptr @stderr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %67 = load ptr, ptr @stderr, align 8
VisitInstr:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11
Check LatCell: 0
In Meet:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11
VisitInstr:   br label %69
BranchInst:   br label %69
In AddEdge: 0x5615fa676af0, 0x5615fa6771b0, 0
Adding edge:  -> 
Visiting SSA:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ]
VisitInstr:   %.2 = phi i32 [ %40, %33 ], [ 1, %27 ]
Visiting SSA:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
VisitInstr:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
PHI:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 1
In Meet:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ], Lat1: (0, 0x5615fa662d10), Lat2: (0, 0x5615fa662d10)
Lat1.second: i32 0
Lat2.second: i32 0
Visiting SSA:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
VisitInstr:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
PHI:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
PHI LatOp: 0, 0x5615fa662d10
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 1
In Meet:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ], Lat1: (0, 0x5615fa662d10), Lat2: (0, 0x5615fa662d10)
Lat1.second: i32 0
Lat2.second: i32 0
Visiting SSA:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ]
VisitInstr:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ]
PHI:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ]
PHI LatOp: 0, 0x5615fa662c50
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 1
In Meet:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ], Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ]
Adding SSA:   %47 = icmp ult i32 %.13, 256
Adding SSA:   %61 = and i32 %.13, 15
Adding SSA:   %70 = add nuw nsw i32 %.13, 1
Adding SSA:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11
Adding SSA:   %50 = add nuw nsw i32 %49, %.13
Visiting SSA:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
VisitInstr:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
PHI:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
PHI LatOp: 0, 0x5615fa662c50
PHI LatOp: 0, 0x5615fa662d10
Check LatCell: 1
In Meet:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ], Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
Adding SSA:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
Visiting SSA:   %47 = icmp ult i32 %.13, 256
VisitInstr:   %47 = icmp ult i32 %.13, 256
CmpInst:   %47 = icmp ult i32 %.13, 256
Check LatCell: 1
In Meet:   %47 = icmp ult i32 %.13, 256, Lat1: (0, 0x5615fa668e80), Lat2: (-1, 0x0)
Lat1.second: i1 true
Meet:   %47 = icmp ult i32 %.13, 256
Adding SSA:   br i1 %47, label %48, label %71
Visiting SSA:   %61 = and i32 %.13, 15
VisitInstr:   %61 = and i32 %.13, 15
BinaryOp:   %61 = and i32 %.13, 15
Check LatCell: 1
In Meet:   %61 = and i32 %.13, 15, Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %61 = and i32 %.13, 15
Adding SSA:   %62 = icmp eq i32 %61, 8
Visiting SSA:   %70 = add nuw nsw i32 %.13, 1
VisitInstr:   %70 = add nuw nsw i32 %.13, 1
BinaryOp:   %70 = add nuw nsw i32 %.13, 1
Check LatCell: 1
In Meet:   %70 = add nuw nsw i32 %.13, 1, Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %70 = add nuw nsw i32 %.13, 1
Adding SSA:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ]
Visiting SSA:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11
VisitInstr:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11
Visiting SSA:   %50 = add nuw nsw i32 %49, %.13
VisitInstr:   %50 = add nuw nsw i32 %49, %.13
BinaryOp:   %50 = add nuw nsw i32 %49, %.13
Check LatCell: 1
In Meet:   %50 = add nuw nsw i32 %49, %.13, Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %50 = add nuw nsw i32 %49, %.13
Adding SSA:   %51 = shl nuw nsw i32 %50, 1
Visiting SSA:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
VisitInstr:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
PHI:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ], Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
Adding SSA:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
Adding SSA:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
Adding SSA:   %66 = add nsw i32 %.17, 1
Visiting SSA:   br i1 %47, label %48, label %71
VisitInstr:   br i1 %47, label %48, label %71
BranchInst:   br i1 %47, label %48, label %71
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa66d460, 0x5615fa66d7d0, 0
In AddEdge: 0x5615fa66d460, 0x5615fa66d7d0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %72 = add nuw nsw i32 %.3, 1
BinaryOp:   %72 = add nuw nsw i32 %.3, 1
Check LatCell: 0
In Meet:   %72 = add nuw nsw i32 %.3, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %72 = add nuw nsw i32 %.3, 1
Adding SSA:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ]
VisitInstr:   br label %44, !llvm.loop !12
BranchInst:   br label %44, !llvm.loop !12
In AddEdge: 0x5615fa677580, 0x5615fa6777f0, 0
Adding edge:  -> 
Visiting SSA:   %62 = icmp eq i32 %61, 8
VisitInstr:   %62 = icmp eq i32 %61, 8
CmpInst:   %62 = icmp eq i32 %61, 8
Check LatCell: 1
In Meet:   %62 = icmp eq i32 %61, 8, Lat1: (0, 0x5615fa6650e0), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %62 = icmp eq i32 %61, 8
Adding SSA:   %63 = select i1 %60, i1 true, i1 %62
Visiting SSA:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ]
VisitInstr:   %.13 = phi i32 [ %70, %69 ], [ 0, %44 ]
Visiting SSA:   %51 = shl nuw nsw i32 %50, 1
VisitInstr:   %51 = shl nuw nsw i32 %50, 1
BinaryOp:   %51 = shl nuw nsw i32 %50, 1
Check LatCell: 1
In Meet:   %51 = shl nuw nsw i32 %50, 1, Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %51 = shl nuw nsw i32 %50, 1
Adding SSA:   %52 = or i32 %51, 1
Visiting SSA:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
VisitInstr:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
PHI:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
PHI LatOp: 0, 0x5615fa662d10
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ], Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
Adding SSA:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
Visiting SSA:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
VisitInstr:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
Visiting SSA:   %66 = add nsw i32 %.17, 1
VisitInstr:   %66 = add nsw i32 %.17, 1
BinaryOp:   %66 = add nsw i32 %.17, 1
Check LatCell: 1
In Meet:   %66 = add nsw i32 %.17, 1, Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %66 = add nsw i32 %.17, 1
Adding SSA:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
Visiting SSA:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ]
VisitInstr:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ]
PHI:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ]
PHI LatOp: 0, 0x5615fa662d10
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 1
In Meet:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ], Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ]
Adding SSA:   %49 = shl nsw i32 %.3, 8
Adding SSA:   %45 = icmp ult i32 %.3, 256
Adding SSA:   %72 = add nuw nsw i32 %.3, 1
Adding SSA:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11
Adding SSA:   %59 = and i32 %.3, 15
Visiting SSA:   %63 = select i1 %60, i1 true, i1 %62
VisitInstr:   %63 = select i1 %60, i1 true, i1 %62
Select:   %63 = select i1 %60, i1 true, i1 %62
Select LatCond: 0, 0x5615fa6650e0
Select LatTrue: 0, 0x5615fa668e80
Select LatFals: -1, 0x0
Check LatCell: 1
In Meet:   %63 = select i1 %60, i1 true, i1 %62, Lat1: (0, 0x5615fa6650e0), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %63 = select i1 %60, i1 true, i1 %62
Adding SSA:   %64 = select i1 %63, i32 255, i32 0
Visiting SSA:   %52 = or i32 %51, 1
VisitInstr:   %52 = or i32 %51, 1
BinaryOp:   %52 = or i32 %51, 1
Check LatCell: 1
In Meet:   %52 = or i32 %51, 1, Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %52 = or i32 %51, 1
Adding SSA:   %53 = zext i32 %52 to i64
Visiting SSA:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
VisitInstr:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
Visiting SSA:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
VisitInstr:   %.28 = phi i32 [ %66, %65 ], [ %.17, %48 ]
Visiting SSA:   %49 = shl nsw i32 %.3, 8
VisitInstr:   %49 = shl nsw i32 %.3, 8
BinaryOp:   %49 = shl nsw i32 %.3, 8
Check LatCell: 1
In Meet:   %49 = shl nsw i32 %.3, 8, Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %49 = shl nsw i32 %.3, 8
Adding SSA:   %50 = add nuw nsw i32 %49, %.13
Visiting SSA:   %45 = icmp ult i32 %.3, 256
VisitInstr:   %45 = icmp ult i32 %.3, 256
CmpInst:   %45 = icmp ult i32 %.3, 256
Check LatCell: 1
In Meet:   %45 = icmp ult i32 %.3, 256, Lat1: (0, 0x5615fa668e80), Lat2: (-1, 0x0)
Lat1.second: i1 true
Meet:   %45 = icmp ult i32 %.3, 256
Adding SSA:   br i1 %45, label %46, label %73
Visiting SSA:   %72 = add nuw nsw i32 %.3, 1
VisitInstr:   %72 = add nuw nsw i32 %.3, 1
BinaryOp:   %72 = add nuw nsw i32 %.3, 1
Check LatCell: 1
In Meet:   %72 = add nuw nsw i32 %.3, 1, Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %72 = add nuw nsw i32 %.3, 1
Adding SSA:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ]
Visiting SSA:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11
VisitInstr:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11
Visiting SSA:   %59 = and i32 %.3, 15
VisitInstr:   %59 = and i32 %.3, 15
BinaryOp:   %59 = and i32 %.3, 15
Check LatCell: 1
In Meet:   %59 = and i32 %.3, 15, Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %59 = and i32 %.3, 15
Adding SSA:   %60 = icmp eq i32 %59, 8
Visiting SSA:   %64 = select i1 %63, i32 255, i32 0
VisitInstr:   %64 = select i1 %63, i32 255, i32 0
Select:   %64 = select i1 %63, i32 255, i32 0
Select LatCond: -1, 0x0
Select LatTrue: 0, 0x5615fa676810
Select LatFals: 0, 0x5615fa662d10
Check LatCell: 1
In Meet:   %64 = select i1 %63, i32 255, i32 0, Lat1: (0, 0x5615fa662d10), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %64 = select i1 %63, i32 255, i32 0
Adding SSA:   %.not = icmp eq i32 %64, %58
Adding SSA:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11
Visiting SSA:   %53 = zext i32 %52 to i64
VisitInstr:   %53 = zext i32 %52 to i64
UnaryOp:   %53 = zext i32 %52 to i64
Check LatCell: 1
In Meet:   %53 = zext i32 %52 to i64, Lat1: (0, 0x5615fa677c60), Lat2: (-1, 0x0)
Lat1.second: i32 zext (i32 1 to i32)
Meet:   %53 = zext i32 %52 to i64
Adding SSA:   %54 = getelementptr inbounds double, ptr %1, i64 %53
Visiting SSA:   %50 = add nuw nsw i32 %49, %.13
VisitInstr:   %50 = add nuw nsw i32 %49, %.13
Visiting SSA:   br i1 %45, label %46, label %73
VisitInstr:   br i1 %45, label %46, label %73
BranchInst:   br i1 %45, label %46, label %73
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa66cfd0, 0x5615fa66d380, 0
In AddEdge: 0x5615fa66cfd0, 0x5615fa66d380, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %74 = icmp eq i32 %.06, 0
CmpInst:   %74 = icmp eq i32 %.06, 0
Check LatCell: 0
In Meet:   %74 = icmp eq i32 %.06, 0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %74 = icmp eq i32 %.06, 0
VisitInstr:   br i1 %74, label %75, label %78
BranchInst:   br i1 %74, label %75, label %78
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa66d290, 0x5615fa677b80, 0
Adding edge:  -> 
In AddEdge: 0x5615fa66d290, 0x5615fa677b80, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %76 = load ptr, ptr @stderr, align 8
Check LatCell: 0
In Meet:   %76 = load ptr, ptr @stderr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %76 = load ptr, ptr @stderr, align 8
VisitInstr:   %77 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.2, i32 noundef 63) #11
Check LatCell: 0
In Meet:   %77 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.2, i32 noundef 63) #11, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %77 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef nonnull @.str.2, i32 noundef 63) #11
VisitInstr:   br label %81
BranchInst:   br label %81
In AddEdge: 0x5615fa677a40, 0x5615fa677d70, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %79 = load ptr, ptr @stderr, align 8
Check LatCell: 0
In Meet:   %79 = load ptr, ptr @stderr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %79 = load ptr, ptr @stderr, align 8
VisitInstr:   %80 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %79, ptr noundef nonnull @.str.3, i32 noundef 63, i32 noundef %.06) #11
Check LatCell: 0
In Meet:   %80 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %79, ptr noundef nonnull @.str.3, i32 noundef 63, i32 noundef %.06) #11, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %80 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %79, ptr noundef nonnull @.str.3, i32 noundef 63, i32 noundef %.06) #11
VisitInstr:   br label %81
BranchInst:   br label %81
In AddEdge: 0x5615fa677a90, 0x5615fa678080, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   ret i32 0
Check LatCell: 0
In Meet:   ret i32 0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret i32 0
Visiting BB: 
VisitInstr:   ret i32 0
Visiting SSA:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ]
VisitInstr:   %.3 = phi i32 [ 0, %41 ], [ %72, %71 ]
Visiting SSA:   %60 = icmp eq i32 %59, 8
VisitInstr:   %60 = icmp eq i32 %59, 8
CmpInst:   %60 = icmp eq i32 %59, 8
Check LatCell: 1
In Meet:   %60 = icmp eq i32 %59, 8, Lat1: (0, 0x5615fa6650e0), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %60 = icmp eq i32 %59, 8
Adding SSA:   %63 = select i1 %60, i1 true, i1 %62
Visiting SSA:   %.not = icmp eq i32 %64, %58
VisitInstr:   %.not = icmp eq i32 %64, %58
Visiting SSA:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11
VisitInstr:   %68 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %67, ptr noundef nonnull @.str.1, i32 noundef %.3, i32 noundef %.13, i32 noundef %64, i32 noundef %58) #11
Visiting SSA:   %54 = getelementptr inbounds double, ptr %1, i64 %53
VisitInstr:   %54 = getelementptr inbounds double, ptr %1, i64 %53
Visiting SSA:   %63 = select i1 %60, i1 true, i1 %62
VisitInstr:   %63 = select i1 %60, i1 true, i1 %62
UnitSCCP: 0 instructions removed, 0 basic blocks unreachable, 0 instructions simplified
UnitLICM running on main
******************************************************
UnitLoopAnalysis running on main
[LoopLoopAnalysis] parent loop header is:   %.01 = phi i32 [ 0, %6 ], [ %26, %25 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
[LoopLoopAnalysis] parent loop header is:   %.011 = phi double [ %37, %33 ], [ 1.000000e+10, %27 ]
[LoopLoopAnalysis] parent loop header is:   %.06 = phi i32 [ 0, %41 ], [ %.17, %71 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
[LoopLoopAnalysis] parent loop header is:   %.17 = phi i32 [ %.28, %69 ], [ %.06, %44 ]
[LoopLoopAnalysis] parent loop header is:   %.1 = phi i32 [ %30, %29 ], [ 0, %7 ]
[LoopLoopAnalysis] parent loop header is:   %.02 = phi i32 [ %24, %23 ], [ 0, %7 ]
Instruction to be moved:   %12 = and i32 %.01, 15
Instruction to be moved:   %13 = icmp eq i32 %9, 8
Instruction to be moved:   %17 = mul nsw i32 %.01, 256
Instruction to be moved:   %49 = mul nsw i32 %.3, 256
Instruction to be moved:   %59 = and i32 %.3, 15
Instruction to be moved:   %60 = icmp eq i32 %47, 8
Instruction to be moved:   %67 = load ptr, ptr @stderr, align 8
Instruction to be moved:   %49 = load ptr, ptr @stderr, align 8
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 2
[UnitLICM]: NumComputeHoisted: 6
[UnitLICM]: Total: 8
UnitSCCP running on fourn
Visiting BB: 
VisitInstr:   br label %5
BranchInst:   br label %5
In AddEdge: 0x5615fa6782a0, 0x5615fa6793e0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
PHI:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 0
In Meet:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
VisitInstr:   %.09 = phi i32 [ 1, %4 ], [ %10, %6 ]
PHI:   %.09 = phi i32 [ 1, %4 ], [ %10, %6 ]
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 0
In Meet:   %.09 = phi i32 [ 1, %4 ], [ %10, %6 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %.09 = phi i32 [ 1, %4 ], [ %10, %6 ]
VisitInstr:   %.not = icmp sgt i32 %.011, %2
CmpInst:   %.not = icmp sgt i32 %.011, %2
Check LatCell: 0
In Meet:   %.not = icmp sgt i32 %.011, %2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.not = icmp sgt i32 %.011, %2
VisitInstr:   br i1 %.not, label %12, label %6
BranchInst:   br i1 %.not, label %12, label %6
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa6782f0, 0x5615fa6796e0, 0
Adding edge:  -> 
In AddEdge: 0x5615fa6782f0, 0x5615fa6796e0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.112 = phi i32 [ %116, %115 ], [ %2, %5 ]
PHI:   %.112 = phi i32 [ %116, %115 ], [ %2, %5 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.112 = phi i32 [ %116, %115 ], [ %2, %5 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.112 = phi i32 [ %116, %115 ], [ %2, %5 ]
VisitInstr:   %.010 = phi i32 [ %18, %115 ], [ 1, %5 ]
PHI:   %.010 = phi i32 [ %18, %115 ], [ 1, %5 ]
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 0
In Meet:   %.010 = phi i32 [ %18, %115 ], [ 1, %5 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %.010 = phi i32 [ %18, %115 ], [ 1, %5 ]
VisitInstr:   %13 = icmp sgt i32 %.112, 0
CmpInst:   %13 = icmp sgt i32 %.112, 0
Check LatCell: 0
In Meet:   %13 = icmp sgt i32 %.112, 0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %13 = icmp sgt i32 %.112, 0
VisitInstr:   br i1 %13, label %14, label %117
BranchInst:   br i1 %13, label %14, label %117
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa679ff0, 0x5615fa67a2f0, 0
Adding edge:  -> 
In AddEdge: 0x5615fa679ff0, 0x5615fa67a2f0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %7 = zext i32 %.011 to i64
UnaryOp:   %7 = zext i32 %.011 to i64
Check LatCell: 0
In Meet:   %7 = zext i32 %.011 to i64, Lat1: (1, 0x0), Lat2: (0, 0x5615fa677c60)
Lat2.second: i32 zext (i32 1 to i32)
Meet:   %7 = zext i32 %.011 to i64
VisitInstr:   %8 = getelementptr inbounds i32, ptr %1, i64 %7
GetElementPtr:   %8 = getelementptr inbounds i32, ptr %1, i64 %7
Check LatCell: 0
In Meet:   %8 = getelementptr inbounds i32, ptr %1, i64 %7, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %8 = getelementptr inbounds i32, ptr %1, i64 %7
VisitInstr:   %9 = load i32, ptr %8, align 4
Check LatCell: 0
In Meet:   %9 = load i32, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %9 = load i32, ptr %8, align 4
VisitInstr:   %10 = mul nsw i32 %.09, %9
BinaryOp:   %10 = mul nsw i32 %.09, %9
Check LatCell: 0
In Meet:   %10 = mul nsw i32 %.09, %9, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %10 = mul nsw i32 %.09, %9
Adding SSA:   %.09 = phi i32 [ 1, %4 ], [ %10, %6 ]
VisitInstr:   %11 = add nuw nsw i32 %.011, 1
BinaryOp:   %11 = add nuw nsw i32 %.011, 1
Check LatCell: 0
In Meet:   %11 = add nuw nsw i32 %.011, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6667d0)
Lat2.second: i32 2
Meet:   %11 = add nuw nsw i32 %.011, 1
Adding SSA:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
VisitInstr:   br label %5, !llvm.loop !6
BranchInst:   br label %5, !llvm.loop !6
In AddEdge: 0x5615fa679b20, 0x5615fa679d90, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %15 = sext i32 %.112 to i64
UnaryOp:   %15 = sext i32 %.112 to i64
Check LatCell: 0
In Meet:   %15 = sext i32 %.112 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %15 = sext i32 %.112 to i64
VisitInstr:   %16 = getelementptr inbounds i32, ptr %1, i64 %15
GetElementPtr:   %16 = getelementptr inbounds i32, ptr %1, i64 %15
Check LatCell: 0
In Meet:   %16 = getelementptr inbounds i32, ptr %1, i64 %15, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %16 = getelementptr inbounds i32, ptr %1, i64 %15
VisitInstr:   %17 = load i32, ptr %16, align 4
Check LatCell: 0
In Meet:   %17 = load i32, ptr %16, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %17 = load i32, ptr %16, align 4
VisitInstr:   %18 = mul nsw i32 %17, %.010
BinaryOp:   %18 = mul nsw i32 %17, %.010
Check LatCell: 0
In Meet:   %18 = mul nsw i32 %17, %.010, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %18 = mul nsw i32 %17, %.010
Adding SSA:   %.010 = phi i32 [ %18, %115 ], [ 1, %5 ]
VisitInstr:   %19 = sdiv i32 %.09, %18
BinaryOp:   %19 = sdiv i32 %.09, %18
Check LatCell: 0
In Meet:   %19 = sdiv i32 %.09, %18, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %19 = sdiv i32 %.09, %18
VisitInstr:   %20 = shl i32 %.010, 1
BinaryOp:   %20 = shl i32 %.010, 1
Check LatCell: 0
In Meet:   %20 = shl i32 %.010, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6667d0)
Lat2.second: i32 2
Meet:   %20 = shl i32 %.010, 1
VisitInstr:   %21 = mul nsw i32 %20, %17
BinaryOp:   %21 = mul nsw i32 %20, %17
Check LatCell: 0
In Meet:   %21 = mul nsw i32 %20, %17, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %21 = mul nsw i32 %20, %17
VisitInstr:   %22 = mul nsw i32 %21, %19
BinaryOp:   %22 = mul nsw i32 %21, %19
Check LatCell: 0
In Meet:   %22 = mul nsw i32 %21, %19, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %22 = mul nsw i32 %21, %19
VisitInstr:   br label %23
BranchInst:   br label %23
In AddEdge: 0x5615fa67a1b0, 0x5615fa67b050, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   ret void
Check LatCell: 0
In Meet:   ret void, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret void
Visiting BB: 
VisitInstr:   %.07 = phi i32 [ 1, %14 ], [ %56, %55 ]
PHI:   %.07 = phi i32 [ 1, %14 ], [ %56, %55 ]
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 0
In Meet:   %.07 = phi i32 [ 1, %14 ], [ %56, %55 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %.07 = phi i32 [ 1, %14 ], [ %56, %55 ]
VisitInstr:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ]
PHI:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ]
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 0
In Meet:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ]
VisitInstr:   %.not15 = icmp sgt i32 %.03, %21
CmpInst:   %.not15 = icmp sgt i32 %.03, %21
Check LatCell: 0
In Meet:   %.not15 = icmp sgt i32 %.03, %21, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.not15 = icmp sgt i32 %.03, %21
VisitInstr:   br i1 %.not15, label %58, label %24
BranchInst:   br i1 %.not15, label %58, label %24
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa67afe0, 0x5615fa67b350, 0
Adding edge:  -> 
In AddEdge: 0x5615fa67afe0, 0x5615fa67b350, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
PHI:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
PHI LatOp: 0, 0x5615fa6667d0
Check LatCell: 0
In Meet:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa6667d0)
Lat2.second: i32 2
Meet:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
VisitInstr:   %59 = icmp slt i32 %.014, %21
CmpInst:   %59 = icmp slt i32 %.014, %21
Check LatCell: 0
In Meet:   %59 = icmp slt i32 %.014, %21, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %59 = icmp slt i32 %.014, %21
VisitInstr:   br i1 %59, label %60, label %115
BranchInst:   br i1 %59, label %60, label %115
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa67ffa0, 0x5615fa680310, 0
Adding edge:  -> 
In AddEdge: 0x5615fa67ffa0, 0x5615fa680310, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %25 = icmp slt i32 %.03, %.07
CmpInst:   %25 = icmp slt i32 %.03, %.07
Check LatCell: 0
In Meet:   %25 = icmp slt i32 %.03, %.07, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6650e0)
Lat2.second: i1 false
Meet:   %25 = icmp slt i32 %.03, %.07
VisitInstr:   br i1 %25, label %26, label %50
BranchInst:   br i1 %25, label %26, label %50
In BranchInst: 0, 0x5615fa6650e0
In AddEdge: 0x5615fa67b210, 0x5615fa67b650, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %61 = shl i32 %.014, 1
BinaryOp:   %61 = shl i32 %.014, 1
Check LatCell: 0
In Meet:   %61 = shl i32 %.014, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6837d0)
Lat2.second: i32 4
Meet:   %61 = shl i32 %.014, 1
Adding SSA:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
VisitInstr:   %62 = sitofp i32 %3 to double
UnaryOp:   %62 = sitofp i32 %3 to double
Check LatCell: 0
In Meet:   %62 = sitofp i32 %3 to double, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %62 = sitofp i32 %3 to double
VisitInstr:   %63 = fmul double %62, 0x401921FB54442D1C
BinaryOp:   %63 = fmul double %62, 0x401921FB54442D1C
Check LatCell: 0
In Meet:   %63 = fmul double %62, 0x401921FB54442D1C, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %63 = fmul double %62, 0x401921FB54442D1C
VisitInstr:   %64 = sdiv i32 %61, %20
BinaryOp:   %64 = sdiv i32 %61, %20
Check LatCell: 0
In Meet:   %64 = sdiv i32 %61, %20, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6667d0)
Lat2.second: i32 2
Meet:   %64 = sdiv i32 %61, %20
VisitInstr:   %65 = sitofp i32 %64 to double
UnaryOp:   %65 = sitofp i32 %64 to double
Check LatCell: 0
In Meet:   %65 = sitofp i32 %64 to double, Lat1: (1, 0x0), Lat2: (0, 0x5615fa684c50)
Lat2.second: i32 sitofp (i32 2 to i32)
Meet:   %65 = sitofp i32 %64 to double
VisitInstr:   %66 = fdiv double %63, %65
BinaryOp:   %66 = fdiv double %63, %65
Check LatCell: 0
In Meet:   %66 = fdiv double %63, %65, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %66 = fdiv double %63, %65
VisitInstr:   %67 = fmul double %66, 5.000000e-01
BinaryOp:   %67 = fmul double %66, 5.000000e-01
Check LatCell: 0
In Meet:   %67 = fmul double %66, 5.000000e-01, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %67 = fmul double %66, 5.000000e-01
VisitInstr:   %68 = call double @sin(double noundef %67) #8
Check LatCell: 0
In Meet:   %68 = call double @sin(double noundef %67) #8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %68 = call double @sin(double noundef %67) #8
VisitInstr:   %69 = fmul double %68, -2.000000e+00
BinaryOp:   %69 = fmul double %68, -2.000000e+00
Check LatCell: 0
In Meet:   %69 = fmul double %68, -2.000000e+00, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %69 = fmul double %68, -2.000000e+00
VisitInstr:   %70 = fmul double %69, %68
BinaryOp:   %70 = fmul double %69, %68
Check LatCell: 0
In Meet:   %70 = fmul double %69, %68, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %70 = fmul double %69, %68
VisitInstr:   %71 = call double @sin(double noundef %66) #8
Check LatCell: 0
In Meet:   %71 = call double @sin(double noundef %66) #8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %71 = call double @sin(double noundef %66) #8
VisitInstr:   br label %72
BranchInst:   br label %72
In AddEdge: 0x5615fa6801d0, 0x5615fa681420, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %116 = add nsw i32 %.112, -1
BinaryOp:   %116 = add nsw i32 %.112, -1
Check LatCell: 0
In Meet:   %116 = add nsw i32 %.112, -1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %116 = add nsw i32 %.112, -1
Adding SSA:   %.112 = phi i32 [ %116, %115 ], [ %2, %5 ]
VisitInstr:   br label %12, !llvm.loop !16
BranchInst:   br label %12, !llvm.loop !16
In AddEdge: 0x5615fa686ef0, 0x5615fa687160, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %51
BranchInst:   br label %51
In AddEdge: 0x5615fa67b560, 0x5615fa67ede0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
PHI:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 0
In Meet:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
VisitInstr:   %.01 = phi double [ 0.000000e+00, %60 ], [ %110, %107 ]
PHI:   %.01 = phi double [ 0.000000e+00, %60 ], [ %110, %107 ]
PHI LatOp: 0, 0x5615fa669640
Check LatCell: 0
In Meet:   %.01 = phi double [ 0.000000e+00, %60 ], [ %110, %107 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa669640)
Lat2.second: double 0.000000e+00
Meet:   %.01 = phi double [ 0.000000e+00, %60 ], [ %110, %107 ]
VisitInstr:   %.0 = phi double [ 1.000000e+00, %60 ], [ %114, %107 ]
PHI:   %.0 = phi double [ 1.000000e+00, %60 ], [ %114, %107 ]
PHI LatOp: 0, 0x5615fa681180
Check LatCell: 0
In Meet:   %.0 = phi double [ 1.000000e+00, %60 ], [ %114, %107 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa681180)
Lat2.second: double 1.000000e+00
Meet:   %.0 = phi double [ 1.000000e+00, %60 ], [ %114, %107 ]
VisitInstr:   %.not16 = icmp sgt i32 %.16, %.014
CmpInst:   %.not16 = icmp sgt i32 %.16, %.014
Check LatCell: 0
In Meet:   %.not16 = icmp sgt i32 %.16, %.014, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6650e0)
Lat2.second: i1 false
Meet:   %.not16 = icmp sgt i32 %.16, %.014
VisitInstr:   br i1 %.not16, label %58, label %73, !llvm.loop !12
BranchInst:   br i1 %.not16, label %58, label %73, !llvm.loop !12
In BranchInst: 0, 0x5615fa6650e0
In AddEdge: 0x5615fa681370, 0x5615fa681720, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.013.in = phi i32 [ %21, %50 ], [ %.013, %53 ]
PHI:   %.013.in = phi i32 [ %21, %50 ], [ %.013, %53 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.013.in = phi i32 [ %21, %50 ], [ %.013, %53 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.013.in = phi i32 [ %21, %50 ], [ %.013, %53 ]
VisitInstr:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ]
PHI:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ]
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 0
In Meet:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ]
VisitInstr:   %.013 = ashr i32 %.013.in, 1
BinaryOp:   %.013 = ashr i32 %.013.in, 1
Check LatCell: 0
In Meet:   %.013 = ashr i32 %.013.in, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.013 = ashr i32 %.013.in, 1
VisitInstr:   %.not19 = icmp slt i32 %.013, %20
CmpInst:   %.not19 = icmp slt i32 %.013, %20
Check LatCell: 0
In Meet:   %.not19 = icmp slt i32 %.013, %20, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.not19 = icmp slt i32 %.013, %20
VisitInstr:   %52 = icmp sgt i32 %.18, %.013
CmpInst:   %52 = icmp sgt i32 %.18, %.013
Check LatCell: 0
In Meet:   %52 = icmp sgt i32 %.18, %.013, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %52 = icmp sgt i32 %.18, %.013
VisitInstr:   %spec.select = select i1 %.not19, i1 false, i1 %52
Select:   %spec.select = select i1 %.not19, i1 false, i1 %52
Select LatCond: -1, 0x0
Select LatTrue: 0, 0x5615fa6650e0
Select LatFals: -1, 0x0
Check LatCell: 0
In Meet:   %spec.select = select i1 %.not19, i1 false, i1 %52, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %spec.select = select i1 %.not19, i1 false, i1 %52
VisitInstr:   br i1 %spec.select, label %53, label %55
BranchInst:   br i1 %spec.select, label %53, label %55
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa67ed70, 0x5615fa67f420, 0
Adding edge:  -> 
In AddEdge: 0x5615fa67ed70, 0x5615fa67f420, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
PHI:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 0
In Meet:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
VisitInstr:   %74 = add nsw i32 %.16, %20
BinaryOp:   %74 = add nsw i32 %.16, %20
Check LatCell: 0
In Meet:   %74 = add nsw i32 %.16, %20, Lat1: (1, 0x0), Lat2: (0, 0x5615fa67f370)
Lat2.second: i32 3
Meet:   %74 = add nsw i32 %.16, %20
Adding SSA:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
VisitInstr:   %75 = add nsw i32 %74, -2
BinaryOp:   %75 = add nsw i32 %74, -2
Check LatCell: 0
In Meet:   %75 = add nsw i32 %74, -2, Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %75 = add nsw i32 %74, -2
VisitInstr:   %.not17 = icmp sgt i32 %.1, %75
CmpInst:   %.not17 = icmp sgt i32 %.1, %75
Check LatCell: 0
In Meet:   %.not17 = icmp sgt i32 %.1, %75, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6650e0)
Lat2.second: i1 false
Meet:   %.not17 = icmp sgt i32 %.1, %75
VisitInstr:   br i1 %.not17, label %107, label %76
BranchInst:   br i1 %.not17, label %107, label %76
In BranchInst: 0, 0x5615fa6650e0
In AddEdge: 0x5615fa681870, 0x5615fa681d70, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %54 = sub nsw i32 %.18, %.013
BinaryOp:   %54 = sub nsw i32 %.18, %.013
Check LatCell: 0
In Meet:   %54 = sub nsw i32 %.18, %.013, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %54 = sub nsw i32 %.18, %.013
Adding SSA:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ]
VisitInstr:   br label %51, !llvm.loop !10
BranchInst:   br label %51, !llvm.loop !10
In AddEdge: 0x5615fa67f320, 0x5615fa67f820, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %56 = add nsw i32 %.18, %.013
BinaryOp:   %56 = add nsw i32 %.18, %.013
Check LatCell: 0
In Meet:   %56 = add nsw i32 %.18, %.013, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %56 = add nsw i32 %.18, %.013
Adding SSA:   %.07 = phi i32 [ 1, %14 ], [ %56, %55 ]
VisitInstr:   %57 = add nsw i32 %.03, %20
BinaryOp:   %57 = add nsw i32 %.03, %20
Check LatCell: 0
In Meet:   %57 = add nsw i32 %.03, %20, Lat1: (1, 0x0), Lat2: (0, 0x5615fa67f370)
Lat2.second: i32 3
Meet:   %57 = add nsw i32 %.03, %20
Adding SSA:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ]
VisitInstr:   br label %23, !llvm.loop !11
BranchInst:   br label %23, !llvm.loop !11
In AddEdge: 0x5615fa67faf0, 0x5615fa67fdd0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
PHI:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 0
In Meet:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ], Lat1: (1, 0x0), Lat2: (0, 0x5615fa662c50)
Lat2.second: i32 1
Meet:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
VisitInstr:   %.not18 = icmp sgt i32 %.14, %22
CmpInst:   %.not18 = icmp sgt i32 %.14, %22
Check LatCell: 0
In Meet:   %.not18 = icmp sgt i32 %.14, %22, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.not18 = icmp sgt i32 %.14, %22
VisitInstr:   br i1 %.not18, label %105, label %77
BranchInst:   br i1 %.not18, label %105, label %77
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa681ec0, 0x5615fa682230, 0
Adding edge:  -> 
In AddEdge: 0x5615fa681ec0, 0x5615fa682230, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %106 = add nsw i32 %.1, 2
BinaryOp:   %106 = add nsw i32 %.1, 2
Check LatCell: 0
In Meet:   %106 = add nsw i32 %.1, 2, Lat1: (1, 0x0), Lat2: (0, 0x5615fa67f370)
Lat2.second: i32 3
Meet:   %106 = add nsw i32 %.1, 2
Adding SSA:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
VisitInstr:   br label %73, !llvm.loop !14
BranchInst:   br label %73, !llvm.loop !14
In AddEdge: 0x5615fa685770, 0x5615fa6859e0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %78 = add nsw i32 %.14, %.014
BinaryOp:   %78 = add nsw i32 %.14, %.014
Check LatCell: 0
In Meet:   %78 = add nsw i32 %.14, %.014, Lat1: (1, 0x0), Lat2: (0, 0x5615fa67f370)
Lat2.second: i32 3
Meet:   %78 = add nsw i32 %.14, %.014
VisitInstr:   %79 = sext i32 %78 to i64
UnaryOp:   %79 = sext i32 %78 to i64
Check LatCell: 0
In Meet:   %79 = sext i32 %78 to i64, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6870f0)
Lat2.second: i32 sext (i32 3 to i32)
Meet:   %79 = sext i32 %78 to i64
VisitInstr:   %80 = getelementptr inbounds double, ptr %0, i64 %79
GetElementPtr:   %80 = getelementptr inbounds double, ptr %0, i64 %79
Check LatCell: 0
In Meet:   %80 = getelementptr inbounds double, ptr %0, i64 %79, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %80 = getelementptr inbounds double, ptr %0, i64 %79
VisitInstr:   %81 = load double, ptr %80, align 8
Check LatCell: 0
In Meet:   %81 = load double, ptr %80, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %81 = load double, ptr %80, align 8
VisitInstr:   %82 = add nsw i32 %78, 1
BinaryOp:   %82 = add nsw i32 %78, 1
Check LatCell: 0
In Meet:   %82 = add nsw i32 %78, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6837d0)
Lat2.second: i32 4
Meet:   %82 = add nsw i32 %78, 1
VisitInstr:   %83 = sext i32 %82 to i64
UnaryOp:   %83 = sext i32 %82 to i64
Check LatCell: 0
In Meet:   %83 = sext i32 %82 to i64, Lat1: (1, 0x0), Lat2: (0, 0x5615fa67fd40)
Lat2.second: i32 sext (i32 4 to i32)
Meet:   %83 = sext i32 %82 to i64
VisitInstr:   %84 = getelementptr inbounds double, ptr %0, i64 %83
GetElementPtr:   %84 = getelementptr inbounds double, ptr %0, i64 %83
Check LatCell: 0
In Meet:   %84 = getelementptr inbounds double, ptr %0, i64 %83, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %84 = getelementptr inbounds double, ptr %0, i64 %83
VisitInstr:   %85 = load double, ptr %84, align 8
Check LatCell: 0
In Meet:   %85 = load double, ptr %84, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %85 = load double, ptr %84, align 8
VisitInstr:   %86 = fneg double %.01
UnaryOp:   %86 = fneg double %.01
Check LatCell: 0
In Meet:   %86 = fneg double %.01, Lat1: (1, 0x0), Lat2: (0, 0x5615fa685d40)
Lat2.second: double -0.000000e+00
Meet:   %86 = fneg double %.01
VisitInstr:   %87 = fmul double %85, %86
BinaryOp:   %87 = fmul double %85, %86
Check LatCell: 0
In Meet:   %87 = fmul double %85, %86, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %87 = fmul double %85, %86
VisitInstr:   %88 = call double @llvm.fmuladd.f64(double %.0, double %81, double %87)
Check LatCell: 0
In Meet:   %88 = call double @llvm.fmuladd.f64(double %.0, double %81, double %87), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %88 = call double @llvm.fmuladd.f64(double %.0, double %81, double %87)
VisitInstr:   %89 = fmul double %.01, %81
BinaryOp:   %89 = fmul double %.01, %81
Check LatCell: 0
In Meet:   %89 = fmul double %.01, %81, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %89 = fmul double %.01, %81
VisitInstr:   %90 = call double @llvm.fmuladd.f64(double %.0, double %85, double %89)
Check LatCell: 0
In Meet:   %90 = call double @llvm.fmuladd.f64(double %.0, double %85, double %89), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %90 = call double @llvm.fmuladd.f64(double %.0, double %85, double %89)
VisitInstr:   %91 = sext i32 %.14 to i64
UnaryOp:   %91 = sext i32 %.14 to i64
Check LatCell: 0
In Meet:   %91 = sext i32 %.14 to i64, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6825d0)
Lat2.second: i32 sext (i32 1 to i32)
Meet:   %91 = sext i32 %.14 to i64
VisitInstr:   %92 = getelementptr inbounds double, ptr %0, i64 %91
GetElementPtr:   %92 = getelementptr inbounds double, ptr %0, i64 %91
Check LatCell: 0
In Meet:   %92 = getelementptr inbounds double, ptr %0, i64 %91, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %92 = getelementptr inbounds double, ptr %0, i64 %91
VisitInstr:   %93 = load double, ptr %92, align 8
Check LatCell: 0
In Meet:   %93 = load double, ptr %92, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %93 = load double, ptr %92, align 8
VisitInstr:   %94 = fsub double %93, %88
BinaryOp:   %94 = fsub double %93, %88
Check LatCell: 0
In Meet:   %94 = fsub double %93, %88, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %94 = fsub double %93, %88
VisitInstr:   store double %94, ptr %80, align 8
Check LatCell: 0
In Meet:   store double %94, ptr %80, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %94, ptr %80, align 8
VisitInstr:   %95 = add nsw i32 %.14, 1
BinaryOp:   %95 = add nsw i32 %.14, 1
Check LatCell: 0
In Meet:   %95 = add nsw i32 %.14, 1, Lat1: (1, 0x0), Lat2: (0, 0x5615fa6667d0)
Lat2.second: i32 2
Meet:   %95 = add nsw i32 %.14, 1
VisitInstr:   %96 = sext i32 %95 to i64
UnaryOp:   %96 = sext i32 %95 to i64
Check LatCell: 0
In Meet:   %96 = sext i32 %95 to i64, Lat1: (1, 0x0), Lat2: (0, 0x5615fa665030)
Lat2.second: i32 sext (i32 2 to i32)
Meet:   %96 = sext i32 %95 to i64
VisitInstr:   %97 = getelementptr inbounds double, ptr %0, i64 %96
GetElementPtr:   %97 = getelementptr inbounds double, ptr %0, i64 %96
Check LatCell: 0
In Meet:   %97 = getelementptr inbounds double, ptr %0, i64 %96, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %97 = getelementptr inbounds double, ptr %0, i64 %96
VisitInstr:   %98 = load double, ptr %97, align 8
Check LatCell: 0
In Meet:   %98 = load double, ptr %97, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %98 = load double, ptr %97, align 8
VisitInstr:   %99 = fsub double %98, %90
BinaryOp:   %99 = fsub double %98, %90
Check LatCell: 0
In Meet:   %99 = fsub double %98, %90, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %99 = fsub double %98, %90
VisitInstr:   store double %99, ptr %84, align 8
Check LatCell: 0
In Meet:   store double %99, ptr %84, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %99, ptr %84, align 8
VisitInstr:   %100 = load double, ptr %92, align 8
Check LatCell: 0
In Meet:   %100 = load double, ptr %92, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %100 = load double, ptr %92, align 8
VisitInstr:   %101 = fadd double %100, %88
BinaryOp:   %101 = fadd double %100, %88
Check LatCell: 0
In Meet:   %101 = fadd double %100, %88, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %101 = fadd double %100, %88
VisitInstr:   store double %101, ptr %92, align 8
Check LatCell: 0
In Meet:   store double %101, ptr %92, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %101, ptr %92, align 8
VisitInstr:   %102 = load double, ptr %97, align 8
Check LatCell: 0
In Meet:   %102 = load double, ptr %97, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %102 = load double, ptr %97, align 8
VisitInstr:   %103 = fadd double %102, %90
BinaryOp:   %103 = fadd double %102, %90
Check LatCell: 0
In Meet:   %103 = fadd double %102, %90, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %103 = fadd double %102, %90
VisitInstr:   store double %103, ptr %97, align 8
Check LatCell: 0
In Meet:   store double %103, ptr %97, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %103, ptr %97, align 8
VisitInstr:   %104 = add nsw i32 %.14, %61
BinaryOp:   %104 = add nsw i32 %.14, %61
Check LatCell: 0
In Meet:   %104 = add nsw i32 %.14, %61, Lat1: (1, 0x0), Lat2: (0, 0x5615fa67bbb0)
Lat2.second: i32 5
Meet:   %104 = add nsw i32 %.14, %61
Adding SSA:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
VisitInstr:   br label %76, !llvm.loop !13
BranchInst:   br label %76, !llvm.loop !13
In AddEdge: 0x5615fa6820f0, 0x5615fa685620, 0
Adding edge:  -> 
Visiting SSA:   %.09 = phi i32 [ 1, %4 ], [ %10, %6 ]
VisitInstr:   %.09 = phi i32 [ 1, %4 ], [ %10, %6 ]
PHI:   %.09 = phi i32 [ 1, %4 ], [ %10, %6 ]
PHI LatOp: 0, 0x5615fa662c50
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.09 = phi i32 [ 1, %4 ], [ %10, %6 ], Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.09 = phi i32 [ 1, %4 ], [ %10, %6 ]
Adding SSA:   %19 = sdiv i32 %.09, %18
Adding SSA:   %10 = mul nsw i32 %.09, %9
Visiting SSA:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
VisitInstr:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
PHI:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
PHI LatOp: 0, 0x5615fa662c50
PHI LatOp: 0, 0x5615fa6667d0
Check LatCell: 1
In Meet:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ], Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
Adding SSA:   %7 = zext i32 %.011 to i64
Adding SSA:   %11 = add nuw nsw i32 %.011, 1
Adding SSA:   %.not = icmp sgt i32 %.011, %2
Visiting SSA:   %.010 = phi i32 [ %18, %115 ], [ 1, %5 ]
VisitInstr:   %.010 = phi i32 [ %18, %115 ], [ 1, %5 ]
PHI:   %.010 = phi i32 [ %18, %115 ], [ 1, %5 ]
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.010 = phi i32 [ %18, %115 ], [ 1, %5 ], Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.010 = phi i32 [ %18, %115 ], [ 1, %5 ]
Adding SSA:   %20 = shl i32 %.010, 1
Adding SSA:   %18 = mul nsw i32 %17, %.010
Visiting SSA:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
VisitInstr:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
PHI:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
PHI LatOp: 0, 0x5615fa6667d0
Check LatCell: 1
In Meet:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ], Lat1: (0, 0x5615fa6667d0), Lat2: (0, 0x5615fa6667d0)
Lat1.second: i32 2
Lat2.second: i32 2
Visiting SSA:   %.112 = phi i32 [ %116, %115 ], [ %2, %5 ]
VisitInstr:   %.112 = phi i32 [ %116, %115 ], [ %2, %5 ]
Visiting SSA:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
VisitInstr:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
PHI:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 1
In Meet:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ], Lat1: (0, 0x5615fa662c50), Lat2: (0, 0x5615fa662c50)
Lat1.second: i32 1
Lat2.second: i32 1
Visiting SSA:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ]
VisitInstr:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ]
PHI:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ]
PHI LatOp: 0, 0x5615fa662c50
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ], Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ]
Adding SSA:   %56 = add nsw i32 %.18, %.013
Adding SSA:   %54 = sub nsw i32 %.18, %.013
Adding SSA:   %52 = icmp sgt i32 %.18, %.013
Visiting SSA:   %.07 = phi i32 [ 1, %14 ], [ %56, %55 ]
VisitInstr:   %.07 = phi i32 [ 1, %14 ], [ %56, %55 ]
PHI:   %.07 = phi i32 [ 1, %14 ], [ %56, %55 ]
PHI LatOp: 0, 0x5615fa662c50
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.07 = phi i32 [ 1, %14 ], [ %56, %55 ], Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.07 = phi i32 [ 1, %14 ], [ %56, %55 ]
Adding SSA:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ]
Adding SSA:   %25 = icmp slt i32 %.03, %.07
Visiting SSA:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ]
VisitInstr:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ]
PHI:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ]
PHI LatOp: 0, 0x5615fa662c50
PHI LatOp: 0, 0x5615fa67f370
Check LatCell: 1
In Meet:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ], Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ]
Adding SSA:   %57 = add nsw i32 %.03, %20
Adding SSA:   %.not15 = icmp sgt i32 %.03, %21
Visiting SSA:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
VisitInstr:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
PHI:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
PHI LatOp: 0, 0x5615fa67f370
PHI LatOp: 0, 0x5615fa662c50
Check LatCell: 1
In Meet:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ], Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
Adding SSA:   %106 = add nsw i32 %.1, 2
Adding SSA:   %.not17 = icmp sgt i32 %.1, %75
Visiting SSA:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
VisitInstr:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
PHI:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
PHI LatOp: 0, 0x5615fa67bbb0
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ], Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
Adding SSA:   %104 = add nsw i32 %.14, %61
Adding SSA:   %95 = add nsw i32 %.14, 1
Adding SSA:   %91 = sext i32 %.14 to i64
Adding SSA:   %78 = add nsw i32 %.14, %.014
Adding SSA:   %.not18 = icmp sgt i32 %.14, %22
Visiting SSA:   %19 = sdiv i32 %.09, %18
VisitInstr:   %19 = sdiv i32 %.09, %18
Visiting SSA:   %10 = mul nsw i32 %.09, %9
VisitInstr:   %10 = mul nsw i32 %.09, %9
Visiting SSA:   %7 = zext i32 %.011 to i64
VisitInstr:   %7 = zext i32 %.011 to i64
UnaryOp:   %7 = zext i32 %.011 to i64
Check LatCell: 1
In Meet:   %7 = zext i32 %.011 to i64, Lat1: (0, 0x5615fa677c60), Lat2: (-1, 0x0)
Lat1.second: i32 zext (i32 1 to i32)
Meet:   %7 = zext i32 %.011 to i64
Adding SSA:   %8 = getelementptr inbounds i32, ptr %1, i64 %7
Visiting SSA:   %11 = add nuw nsw i32 %.011, 1
VisitInstr:   %11 = add nuw nsw i32 %.011, 1
BinaryOp:   %11 = add nuw nsw i32 %.011, 1
Check LatCell: 1
In Meet:   %11 = add nuw nsw i32 %.011, 1, Lat1: (0, 0x5615fa6667d0), Lat2: (-1, 0x0)
Lat1.second: i32 2
Meet:   %11 = add nuw nsw i32 %.011, 1
Adding SSA:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
Visiting SSA:   %.not = icmp sgt i32 %.011, %2
VisitInstr:   %.not = icmp sgt i32 %.011, %2
Visiting SSA:   %20 = shl i32 %.010, 1
VisitInstr:   %20 = shl i32 %.010, 1
BinaryOp:   %20 = shl i32 %.010, 1
Check LatCell: 1
In Meet:   %20 = shl i32 %.010, 1, Lat1: (0, 0x5615fa6667d0), Lat2: (-1, 0x0)
Lat1.second: i32 2
Meet:   %20 = shl i32 %.010, 1
Adding SSA:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
Adding SSA:   %21 = mul nsw i32 %20, %17
Adding SSA:   %.not19 = icmp slt i32 %.013, %20
Adding SSA:   %64 = sdiv i32 %61, %20
Adding SSA:   %74 = add nsw i32 %.16, %20
Visiting SSA:   %18 = mul nsw i32 %17, %.010
VisitInstr:   %18 = mul nsw i32 %17, %.010
Visiting SSA:   %56 = add nsw i32 %.18, %.013
VisitInstr:   %56 = add nsw i32 %.18, %.013
Visiting SSA:   %54 = sub nsw i32 %.18, %.013
VisitInstr:   %54 = sub nsw i32 %.18, %.013
Visiting SSA:   %52 = icmp sgt i32 %.18, %.013
VisitInstr:   %52 = icmp sgt i32 %.18, %.013
Visiting SSA:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ]
VisitInstr:   %.18 = phi i32 [ %.07, %50 ], [ %54, %53 ]
Visiting SSA:   %25 = icmp slt i32 %.03, %.07
VisitInstr:   %25 = icmp slt i32 %.03, %.07
CmpInst:   %25 = icmp slt i32 %.03, %.07
Check LatCell: 1
In Meet:   %25 = icmp slt i32 %.03, %.07, Lat1: (0, 0x5615fa6650e0), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %25 = icmp slt i32 %.03, %.07
Adding SSA:   br i1 %25, label %26, label %50
Visiting SSA:   %57 = add nsw i32 %.03, %20
VisitInstr:   %57 = add nsw i32 %.03, %20
BinaryOp:   %57 = add nsw i32 %.03, %20
Check LatCell: 1
In Meet:   %57 = add nsw i32 %.03, %20, Lat1: (0, 0x5615fa67f370), Lat2: (-1, 0x0)
Lat1.second: i32 3
Meet:   %57 = add nsw i32 %.03, %20
Adding SSA:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ]
Visiting SSA:   %.not15 = icmp sgt i32 %.03, %21
VisitInstr:   %.not15 = icmp sgt i32 %.03, %21
Visiting SSA:   %106 = add nsw i32 %.1, 2
VisitInstr:   %106 = add nsw i32 %.1, 2
BinaryOp:   %106 = add nsw i32 %.1, 2
Check LatCell: 1
In Meet:   %106 = add nsw i32 %.1, 2, Lat1: (0, 0x5615fa67f370), Lat2: (-1, 0x0)
Lat1.second: i32 3
Meet:   %106 = add nsw i32 %.1, 2
Adding SSA:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
Visiting SSA:   %.not17 = icmp sgt i32 %.1, %75
VisitInstr:   %.not17 = icmp sgt i32 %.1, %75
CmpInst:   %.not17 = icmp sgt i32 %.1, %75
Check LatCell: 1
In Meet:   %.not17 = icmp sgt i32 %.1, %75, Lat1: (0, 0x5615fa6650e0), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %.not17 = icmp sgt i32 %.1, %75
Adding SSA:   br i1 %.not17, label %107, label %76
Visiting SSA:   %104 = add nsw i32 %.14, %61
VisitInstr:   %104 = add nsw i32 %.14, %61
BinaryOp:   %104 = add nsw i32 %.14, %61
Check LatCell: 1
In Meet:   %104 = add nsw i32 %.14, %61, Lat1: (0, 0x5615fa67bbb0), Lat2: (-1, 0x0)
Lat1.second: i32 5
Meet:   %104 = add nsw i32 %.14, %61
Adding SSA:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
Visiting SSA:   %95 = add nsw i32 %.14, 1
VisitInstr:   %95 = add nsw i32 %.14, 1
BinaryOp:   %95 = add nsw i32 %.14, 1
Check LatCell: 1
In Meet:   %95 = add nsw i32 %.14, 1, Lat1: (0, 0x5615fa6667d0), Lat2: (-1, 0x0)
Lat1.second: i32 2
Meet:   %95 = add nsw i32 %.14, 1
Adding SSA:   %96 = sext i32 %95 to i64
Visiting SSA:   %91 = sext i32 %.14 to i64
VisitInstr:   %91 = sext i32 %.14 to i64
UnaryOp:   %91 = sext i32 %.14 to i64
Check LatCell: 1
In Meet:   %91 = sext i32 %.14 to i64, Lat1: (0, 0x5615fa6825d0), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 1 to i32)
Meet:   %91 = sext i32 %.14 to i64
Adding SSA:   %92 = getelementptr inbounds double, ptr %0, i64 %91
Visiting SSA:   %78 = add nsw i32 %.14, %.014
VisitInstr:   %78 = add nsw i32 %.14, %.014
BinaryOp:   %78 = add nsw i32 %.14, %.014
Check LatCell: 1
In Meet:   %78 = add nsw i32 %.14, %.014, Lat1: (0, 0x5615fa67f370), Lat2: (-1, 0x0)
Lat1.second: i32 3
Meet:   %78 = add nsw i32 %.14, %.014
Adding SSA:   %79 = sext i32 %78 to i64
Adding SSA:   %82 = add nsw i32 %78, 1
Visiting SSA:   %.not18 = icmp sgt i32 %.14, %22
VisitInstr:   %.not18 = icmp sgt i32 %.14, %22
Visiting SSA:   %8 = getelementptr inbounds i32, ptr %1, i64 %7
VisitInstr:   %8 = getelementptr inbounds i32, ptr %1, i64 %7
Visiting SSA:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
VisitInstr:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
Visiting SSA:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
VisitInstr:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
PHI:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ], Lat1: (0, 0x5615fa6667d0), Lat2: (-1, 0x0)
Lat1.second: i32 2
Meet:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
Adding SSA:   %78 = add nsw i32 %.14, %.014
Adding SSA:   %.not16 = icmp sgt i32 %.16, %.014
Adding SSA:   %61 = shl i32 %.014, 1
Adding SSA:   %59 = icmp slt i32 %.014, %21
Visiting SSA:   %21 = mul nsw i32 %20, %17
VisitInstr:   %21 = mul nsw i32 %20, %17
Visiting SSA:   %.not19 = icmp slt i32 %.013, %20
VisitInstr:   %.not19 = icmp slt i32 %.013, %20
Visiting SSA:   %64 = sdiv i32 %61, %20
VisitInstr:   %64 = sdiv i32 %61, %20
BinaryOp:   %64 = sdiv i32 %61, %20
Check LatCell: 1
In Meet:   %64 = sdiv i32 %61, %20, Lat1: (0, 0x5615fa6667d0), Lat2: (-1, 0x0)
Lat1.second: i32 2
Meet:   %64 = sdiv i32 %61, %20
Adding SSA:   %65 = sitofp i32 %64 to double
Visiting SSA:   %74 = add nsw i32 %.16, %20
VisitInstr:   %74 = add nsw i32 %.16, %20
BinaryOp:   %74 = add nsw i32 %.16, %20
Check LatCell: 1
In Meet:   %74 = add nsw i32 %.16, %20, Lat1: (0, 0x5615fa67f370), Lat2: (-1, 0x0)
Lat1.second: i32 3
Meet:   %74 = add nsw i32 %.16, %20
Adding SSA:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
Adding SSA:   %75 = add nsw i32 %74, -2
Visiting SSA:   br i1 %25, label %26, label %50
VisitInstr:   br i1 %25, label %26, label %50
BranchInst:   br i1 %25, label %26, label %50
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa67b210, 0x5615fa67b650, 0
Adding edge:  -> 
In AddEdge: 0x5615fa67b210, 0x5615fa67b650, 1
Visiting BB: 
VisitInstr:   %.02 = phi i32 [ %49, %48 ], [ %.03, %24 ]
PHI:   %.02 = phi i32 [ %49, %48 ], [ %.03, %24 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.02 = phi i32 [ %49, %48 ], [ %.03, %24 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.02 = phi i32 [ %49, %48 ], [ %.03, %24 ]
VisitInstr:   %27 = add nsw i32 %.03, %20
BinaryOp:   %27 = add nsw i32 %.03, %20
Check LatCell: 0
In Meet:   %27 = add nsw i32 %.03, %20, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %27 = add nsw i32 %.03, %20
VisitInstr:   %28 = add nsw i32 %27, -2
BinaryOp:   %28 = add nsw i32 %27, -2
Check LatCell: 0
In Meet:   %28 = add nsw i32 %27, -2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %28 = add nsw i32 %27, -2
VisitInstr:   %.not20 = icmp sgt i32 %.02, %28
CmpInst:   %.not20 = icmp sgt i32 %.02, %28
Check LatCell: 0
In Meet:   %.not20 = icmp sgt i32 %.02, %28, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.not20 = icmp sgt i32 %.02, %28
VisitInstr:   br i1 %.not20, label %50, label %29
BranchInst:   br i1 %.not20, label %50, label %29
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa67b7a0, 0x5615fa67bca0, 0
Adding edge:  -> 
In AddEdge: 0x5615fa67b7a0, 0x5615fa67bca0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.05 = phi i32 [ %47, %30 ], [ %.02, %26 ]
PHI:   %.05 = phi i32 [ %47, %30 ], [ %.02, %26 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.05 = phi i32 [ %47, %30 ], [ %.02, %26 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.05 = phi i32 [ %47, %30 ], [ %.02, %26 ]
VisitInstr:   %.not21 = icmp sgt i32 %.05, %22
CmpInst:   %.not21 = icmp sgt i32 %.05, %22
Check LatCell: 0
In Meet:   %.not21 = icmp sgt i32 %.05, %22, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.not21 = icmp sgt i32 %.05, %22
VisitInstr:   br i1 %.not21, label %48, label %30
BranchInst:   br i1 %.not21, label %48, label %30
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa67bdf0, 0x5615fa67c160, 0
Adding edge:  -> 
In AddEdge: 0x5615fa67bdf0, 0x5615fa67c160, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %49 = add nsw i32 %.02, 2
BinaryOp:   %49 = add nsw i32 %.02, 2
Check LatCell: 0
In Meet:   %49 = add nsw i32 %.02, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %49 = add nsw i32 %.02, 2
Adding SSA:   %.02 = phi i32 [ %49, %48 ], [ %.03, %24 ]
VisitInstr:   br label %26, !llvm.loop !9
BranchInst:   br label %26, !llvm.loop !9
In AddEdge: 0x5615fa67e830, 0x5615fa67eaa0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %31 = add nsw i32 %.07, %.05
BinaryOp:   %31 = add nsw i32 %.07, %.05
Check LatCell: 0
In Meet:   %31 = add nsw i32 %.07, %.05, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %31 = add nsw i32 %.07, %.05
VisitInstr:   %32 = sub nsw i32 %31, %.03
BinaryOp:   %32 = sub nsw i32 %31, %.03
Check LatCell: 0
In Meet:   %32 = sub nsw i32 %31, %.03, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %32 = sub nsw i32 %31, %.03
VisitInstr:   %33 = sext i32 %.05 to i64
UnaryOp:   %33 = sext i32 %.05 to i64
Check LatCell: 0
In Meet:   %33 = sext i32 %.05 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %33 = sext i32 %.05 to i64
VisitInstr:   %34 = getelementptr inbounds double, ptr %0, i64 %33
GetElementPtr:   %34 = getelementptr inbounds double, ptr %0, i64 %33
Check LatCell: 0
In Meet:   %34 = getelementptr inbounds double, ptr %0, i64 %33, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %34 = getelementptr inbounds double, ptr %0, i64 %33
VisitInstr:   %35 = load double, ptr %34, align 8
Check LatCell: 0
In Meet:   %35 = load double, ptr %34, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %35 = load double, ptr %34, align 8
VisitInstr:   %36 = sext i32 %32 to i64
UnaryOp:   %36 = sext i32 %32 to i64
Check LatCell: 0
In Meet:   %36 = sext i32 %32 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %36 = sext i32 %32 to i64
VisitInstr:   %37 = getelementptr inbounds double, ptr %0, i64 %36
GetElementPtr:   %37 = getelementptr inbounds double, ptr %0, i64 %36
Check LatCell: 0
In Meet:   %37 = getelementptr inbounds double, ptr %0, i64 %36, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %37 = getelementptr inbounds double, ptr %0, i64 %36
VisitInstr:   %38 = load double, ptr %37, align 8
Check LatCell: 0
In Meet:   %38 = load double, ptr %37, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %38 = load double, ptr %37, align 8
VisitInstr:   store double %38, ptr %34, align 8
Check LatCell: 0
In Meet:   store double %38, ptr %34, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %38, ptr %34, align 8
VisitInstr:   store double %35, ptr %37, align 8
Check LatCell: 0
In Meet:   store double %35, ptr %37, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %35, ptr %37, align 8
VisitInstr:   %39 = add nsw i32 %.05, 1
BinaryOp:   %39 = add nsw i32 %.05, 1
Check LatCell: 0
In Meet:   %39 = add nsw i32 %.05, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %39 = add nsw i32 %.05, 1
VisitInstr:   %40 = sext i32 %39 to i64
UnaryOp:   %40 = sext i32 %39 to i64
Check LatCell: 0
In Meet:   %40 = sext i32 %39 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %40 = sext i32 %39 to i64
VisitInstr:   %41 = getelementptr inbounds double, ptr %0, i64 %40
GetElementPtr:   %41 = getelementptr inbounds double, ptr %0, i64 %40
Check LatCell: 0
In Meet:   %41 = getelementptr inbounds double, ptr %0, i64 %40, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %41 = getelementptr inbounds double, ptr %0, i64 %40
VisitInstr:   %42 = load double, ptr %41, align 8
Check LatCell: 0
In Meet:   %42 = load double, ptr %41, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %42 = load double, ptr %41, align 8
VisitInstr:   %43 = add nsw i32 %32, 1
BinaryOp:   %43 = add nsw i32 %32, 1
Check LatCell: 0
In Meet:   %43 = add nsw i32 %32, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %43 = add nsw i32 %32, 1
VisitInstr:   %44 = sext i32 %43 to i64
UnaryOp:   %44 = sext i32 %43 to i64
Check LatCell: 0
In Meet:   %44 = sext i32 %43 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %44 = sext i32 %43 to i64
VisitInstr:   %45 = getelementptr inbounds double, ptr %0, i64 %44
GetElementPtr:   %45 = getelementptr inbounds double, ptr %0, i64 %44
Check LatCell: 0
In Meet:   %45 = getelementptr inbounds double, ptr %0, i64 %44, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %45 = getelementptr inbounds double, ptr %0, i64 %44
VisitInstr:   %46 = load double, ptr %45, align 8
Check LatCell: 0
In Meet:   %46 = load double, ptr %45, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %46 = load double, ptr %45, align 8
VisitInstr:   store double %46, ptr %41, align 8
Check LatCell: 0
In Meet:   store double %46, ptr %41, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %46, ptr %41, align 8
VisitInstr:   store double %42, ptr %45, align 8
Check LatCell: 0
In Meet:   store double %42, ptr %45, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %42, ptr %45, align 8
VisitInstr:   %47 = add nsw i32 %.05, %21
BinaryOp:   %47 = add nsw i32 %.05, %21
Check LatCell: 0
In Meet:   %47 = add nsw i32 %.05, %21, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %47 = add nsw i32 %.05, %21
Adding SSA:   %.05 = phi i32 [ %47, %30 ], [ %.02, %26 ]
VisitInstr:   br label %29, !llvm.loop !8
BranchInst:   br label %29, !llvm.loop !8
In AddEdge: 0x5615fa67c020, 0x5615fa67e760, 0
Adding edge:  -> 
Visiting SSA:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ]
VisitInstr:   %.03 = phi i32 [ 1, %14 ], [ %57, %55 ]
Visiting SSA:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
VisitInstr:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
Visiting SSA:   br i1 %.not17, label %107, label %76
VisitInstr:   br i1 %.not17, label %107, label %76
BranchInst:   br i1 %.not17, label %107, label %76
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa681870, 0x5615fa681d70, 0
Adding edge:  -> 
In AddEdge: 0x5615fa681870, 0x5615fa681d70, 1
Visiting BB: 
VisitInstr:   %108 = fmul double %.0, %71
BinaryOp:   %108 = fmul double %.0, %71
Check LatCell: 0
In Meet:   %108 = fmul double %.0, %71, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %108 = fmul double %.0, %71
VisitInstr:   %109 = call double @llvm.fmuladd.f64(double %.01, double %70, double %108)
Check LatCell: 0
In Meet:   %109 = call double @llvm.fmuladd.f64(double %.01, double %70, double %108), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %109 = call double @llvm.fmuladd.f64(double %.01, double %70, double %108)
VisitInstr:   %110 = fadd double %109, %.01
BinaryOp:   %110 = fadd double %109, %.01
Check LatCell: 0
In Meet:   %110 = fadd double %109, %.01, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %110 = fadd double %109, %.01
Adding SSA:   %.01 = phi double [ 0.000000e+00, %60 ], [ %110, %107 ]
VisitInstr:   %111 = fneg double %.01
UnaryOp:   %111 = fneg double %.01
Check LatCell: 0
In Meet:   %111 = fneg double %.01, Lat1: (1, 0x0), Lat2: (0, 0x5615fa685d40)
Lat2.second: double -0.000000e+00
Meet:   %111 = fneg double %.01
VisitInstr:   %112 = fmul double %71, %111
BinaryOp:   %112 = fmul double %71, %111
Check LatCell: 0
In Meet:   %112 = fmul double %71, %111, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %112 = fmul double %71, %111
VisitInstr:   %113 = call double @llvm.fmuladd.f64(double %.0, double %70, double %112)
Check LatCell: 0
In Meet:   %113 = call double @llvm.fmuladd.f64(double %.0, double %70, double %112), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %113 = call double @llvm.fmuladd.f64(double %.0, double %70, double %112)
VisitInstr:   %114 = fadd double %113, %.0
BinaryOp:   %114 = fadd double %113, %.0
Check LatCell: 0
In Meet:   %114 = fadd double %113, %.0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %114 = fadd double %113, %.0
Adding SSA:   %.0 = phi double [ 1.000000e+00, %60 ], [ %114, %107 ]
VisitInstr:   br label %72, !llvm.loop !15
BranchInst:   br label %72, !llvm.loop !15
In AddEdge: 0x5615fa686650, 0x5615fa686930, 0
Adding edge:  -> 
Visiting SSA:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
VisitInstr:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
Visiting SSA:   %96 = sext i32 %95 to i64
VisitInstr:   %96 = sext i32 %95 to i64
UnaryOp:   %96 = sext i32 %95 to i64
Check LatCell: 1
In Meet:   %96 = sext i32 %95 to i64, Lat1: (0, 0x5615fa665030), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 2 to i32)
Meet:   %96 = sext i32 %95 to i64
Adding SSA:   %97 = getelementptr inbounds double, ptr %0, i64 %96
Visiting SSA:   %92 = getelementptr inbounds double, ptr %0, i64 %91
VisitInstr:   %92 = getelementptr inbounds double, ptr %0, i64 %91
Visiting SSA:   %79 = sext i32 %78 to i64
VisitInstr:   %79 = sext i32 %78 to i64
UnaryOp:   %79 = sext i32 %78 to i64
Check LatCell: 1
In Meet:   %79 = sext i32 %78 to i64, Lat1: (0, 0x5615fa6870f0), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 3 to i32)
Meet:   %79 = sext i32 %78 to i64
Adding SSA:   %80 = getelementptr inbounds double, ptr %0, i64 %79
Visiting SSA:   %82 = add nsw i32 %78, 1
VisitInstr:   %82 = add nsw i32 %78, 1
BinaryOp:   %82 = add nsw i32 %78, 1
Check LatCell: 1
In Meet:   %82 = add nsw i32 %78, 1, Lat1: (0, 0x5615fa6837d0), Lat2: (-1, 0x0)
Lat1.second: i32 4
Meet:   %82 = add nsw i32 %78, 1
Adding SSA:   %83 = sext i32 %82 to i64
Visiting SSA:   %78 = add nsw i32 %.14, %.014
VisitInstr:   %78 = add nsw i32 %.14, %.014
Visiting SSA:   %.not16 = icmp sgt i32 %.16, %.014
VisitInstr:   %.not16 = icmp sgt i32 %.16, %.014
CmpInst:   %.not16 = icmp sgt i32 %.16, %.014
Check LatCell: 1
In Meet:   %.not16 = icmp sgt i32 %.16, %.014, Lat1: (0, 0x5615fa6650e0), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %.not16 = icmp sgt i32 %.16, %.014
Adding SSA:   br i1 %.not16, label %58, label %73, !llvm.loop !12
Visiting SSA:   %61 = shl i32 %.014, 1
VisitInstr:   %61 = shl i32 %.014, 1
BinaryOp:   %61 = shl i32 %.014, 1
Check LatCell: 1
In Meet:   %61 = shl i32 %.014, 1, Lat1: (0, 0x5615fa6837d0), Lat2: (-1, 0x0)
Lat1.second: i32 4
Meet:   %61 = shl i32 %.014, 1
Adding SSA:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
Adding SSA:   %64 = sdiv i32 %61, %20
Adding SSA:   %104 = add nsw i32 %.14, %61
Visiting SSA:   %59 = icmp slt i32 %.014, %21
VisitInstr:   %59 = icmp slt i32 %.014, %21
Visiting SSA:   %65 = sitofp i32 %64 to double
VisitInstr:   %65 = sitofp i32 %64 to double
UnaryOp:   %65 = sitofp i32 %64 to double
Check LatCell: 1
In Meet:   %65 = sitofp i32 %64 to double, Lat1: (0, 0x5615fa684c50), Lat2: (-1, 0x0)
Lat1.second: i32 sitofp (i32 2 to i32)
Meet:   %65 = sitofp i32 %64 to double
Adding SSA:   %66 = fdiv double %63, %65
Visiting SSA:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
VisitInstr:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
PHI:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
PHI LatOp: 0, 0x5615fa662c50
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ], Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
Adding SSA:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
Adding SSA:   %74 = add nsw i32 %.16, %20
Adding SSA:   %.not16 = icmp sgt i32 %.16, %.014
Visiting SSA:   %75 = add nsw i32 %74, -2
VisitInstr:   %75 = add nsw i32 %74, -2
BinaryOp:   %75 = add nsw i32 %74, -2
Check LatCell: 1
In Meet:   %75 = add nsw i32 %74, -2, Lat1: (0, 0x5615fa662c50), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %75 = add nsw i32 %74, -2
Adding SSA:   %.not17 = icmp sgt i32 %.1, %75
Visiting SSA:   %.02 = phi i32 [ %49, %48 ], [ %.03, %24 ]
VisitInstr:   %.02 = phi i32 [ %49, %48 ], [ %.03, %24 ]
Visiting SSA:   %.05 = phi i32 [ %47, %30 ], [ %.02, %26 ]
VisitInstr:   %.05 = phi i32 [ %47, %30 ], [ %.02, %26 ]
Visiting SSA:   %.01 = phi double [ 0.000000e+00, %60 ], [ %110, %107 ]
VisitInstr:   %.01 = phi double [ 0.000000e+00, %60 ], [ %110, %107 ]
PHI:   %.01 = phi double [ 0.000000e+00, %60 ], [ %110, %107 ]
PHI LatOp: 0, 0x5615fa669640
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.01 = phi double [ 0.000000e+00, %60 ], [ %110, %107 ], Lat1: (0, 0x5615fa669640), Lat2: (-1, 0x0)
Lat1.second: double 0.000000e+00
Meet:   %.01 = phi double [ 0.000000e+00, %60 ], [ %110, %107 ]
Adding SSA:   %86 = fneg double %.01
Adding SSA:   %111 = fneg double %.01
Adding SSA:   %110 = fadd double %109, %.01
Adding SSA:   %109 = call double @llvm.fmuladd.f64(double %.01, double %70, double %108)
Adding SSA:   %89 = fmul double %.01, %81
Visiting SSA:   %.0 = phi double [ 1.000000e+00, %60 ], [ %114, %107 ]
VisitInstr:   %.0 = phi double [ 1.000000e+00, %60 ], [ %114, %107 ]
PHI:   %.0 = phi double [ 1.000000e+00, %60 ], [ %114, %107 ]
PHI LatOp: 0, 0x5615fa681180
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.0 = phi double [ 1.000000e+00, %60 ], [ %114, %107 ], Lat1: (0, 0x5615fa681180), Lat2: (-1, 0x0)
Lat1.second: double 1.000000e+00
Meet:   %.0 = phi double [ 1.000000e+00, %60 ], [ %114, %107 ]
Adding SSA:   %108 = fmul double %.0, %71
Adding SSA:   %114 = fadd double %113, %.0
Adding SSA:   %113 = call double @llvm.fmuladd.f64(double %.0, double %70, double %112)
Adding SSA:   %90 = call double @llvm.fmuladd.f64(double %.0, double %85, double %89)
Adding SSA:   %88 = call double @llvm.fmuladd.f64(double %.0, double %81, double %87)
Visiting SSA:   %97 = getelementptr inbounds double, ptr %0, i64 %96
VisitInstr:   %97 = getelementptr inbounds double, ptr %0, i64 %96
Visiting SSA:   %80 = getelementptr inbounds double, ptr %0, i64 %79
VisitInstr:   %80 = getelementptr inbounds double, ptr %0, i64 %79
Visiting SSA:   %83 = sext i32 %82 to i64
VisitInstr:   %83 = sext i32 %82 to i64
UnaryOp:   %83 = sext i32 %82 to i64
Check LatCell: 1
In Meet:   %83 = sext i32 %82 to i64, Lat1: (0, 0x5615fa67fd40), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 4 to i32)
Meet:   %83 = sext i32 %82 to i64
Adding SSA:   %84 = getelementptr inbounds double, ptr %0, i64 %83
Visiting SSA:   br i1 %.not16, label %58, label %73, !llvm.loop !12
VisitInstr:   br i1 %.not16, label %58, label %73, !llvm.loop !12
BranchInst:   br i1 %.not16, label %58, label %73, !llvm.loop !12
In BranchInst: -1, 0x0
In AddEdge: 0x5615fa681370, 0x5615fa681720, 0
Adding edge:  -> 
In AddEdge: 0x5615fa681370, 0x5615fa681720, 1
Visiting SSA:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
VisitInstr:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
Visiting SSA:   %64 = sdiv i32 %61, %20
VisitInstr:   %64 = sdiv i32 %61, %20
Visiting SSA:   %104 = add nsw i32 %.14, %61
VisitInstr:   %104 = add nsw i32 %.14, %61
Visiting SSA:   %66 = fdiv double %63, %65
VisitInstr:   %66 = fdiv double %63, %65
Visiting SSA:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
VisitInstr:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
Visiting SSA:   %74 = add nsw i32 %.16, %20
VisitInstr:   %74 = add nsw i32 %.16, %20
Visiting SSA:   %.not16 = icmp sgt i32 %.16, %.014
VisitInstr:   %.not16 = icmp sgt i32 %.16, %.014
Visiting SSA:   %.not17 = icmp sgt i32 %.1, %75
VisitInstr:   %.not17 = icmp sgt i32 %.1, %75
Visiting SSA:   %86 = fneg double %.01
VisitInstr:   %86 = fneg double %.01
UnaryOp:   %86 = fneg double %.01
Check LatCell: 1
In Meet:   %86 = fneg double %.01, Lat1: (0, 0x5615fa685d40), Lat2: (-1, 0x0)
Lat1.second: double -0.000000e+00
Meet:   %86 = fneg double %.01
Adding SSA:   %87 = fmul double %85, %86
Visiting SSA:   %111 = fneg double %.01
VisitInstr:   %111 = fneg double %.01
UnaryOp:   %111 = fneg double %.01
Check LatCell: 1
In Meet:   %111 = fneg double %.01, Lat1: (0, 0x5615fa685d40), Lat2: (-1, 0x0)
Lat1.second: double -0.000000e+00
Meet:   %111 = fneg double %.01
Adding SSA:   %112 = fmul double %71, %111
Visiting SSA:   %110 = fadd double %109, %.01
VisitInstr:   %110 = fadd double %109, %.01
Visiting SSA:   %109 = call double @llvm.fmuladd.f64(double %.01, double %70, double %108)
VisitInstr:   %109 = call double @llvm.fmuladd.f64(double %.01, double %70, double %108)
Visiting SSA:   %89 = fmul double %.01, %81
VisitInstr:   %89 = fmul double %.01, %81
Visiting SSA:   %108 = fmul double %.0, %71
VisitInstr:   %108 = fmul double %.0, %71
Visiting SSA:   %114 = fadd double %113, %.0
VisitInstr:   %114 = fadd double %113, %.0
Visiting SSA:   %113 = call double @llvm.fmuladd.f64(double %.0, double %70, double %112)
VisitInstr:   %113 = call double @llvm.fmuladd.f64(double %.0, double %70, double %112)
Visiting SSA:   %90 = call double @llvm.fmuladd.f64(double %.0, double %85, double %89)
VisitInstr:   %90 = call double @llvm.fmuladd.f64(double %.0, double %85, double %89)
Visiting SSA:   %88 = call double @llvm.fmuladd.f64(double %.0, double %81, double %87)
VisitInstr:   %88 = call double @llvm.fmuladd.f64(double %.0, double %81, double %87)
Visiting SSA:   %84 = getelementptr inbounds double, ptr %0, i64 %83
VisitInstr:   %84 = getelementptr inbounds double, ptr %0, i64 %83
Visiting SSA:   %87 = fmul double %85, %86
VisitInstr:   %87 = fmul double %85, %86
Visiting SSA:   %112 = fmul double %71, %111
VisitInstr:   %112 = fmul double %71, %111
UnitSCCP: 0 instructions removed, 0 basic blocks unreachable, 0 instructions simplified
UnitLICM running on fourn
******************************************************
UnitLoopAnalysis running on fourn
[LoopLoopAnalysis] parent loop header is:   %.112 = phi i32 [ %116, %115 ], [ %2, %5 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.07 = phi i32 [ 1, %14 ], [ %56, %55 ]
[LoopLoopAnalysis] parent loop header is:   %.07 = phi i32 [ 1, %14 ], [ %56, %55 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.013.in = phi i32 [ %21, %50 ], [ %.013, %53 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.02 = phi i32 [ %49, %48 ], [ %.03, %24 ]
[LoopLoopAnalysis] parent loop header is:   %.013.in = phi i32 [ %21, %50 ], [ %.013, %53 ]
[LoopLoopAnalysis] parent loop header is:   %.05 = phi i32 [ %47, %30 ], [ %.02, %26 ]
[LoopLoopAnalysis] parent loop header is:   %.014 = phi i32 [ %20, %23 ], [ %61, %72 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
[LoopLoopAnalysis] parent loop header is:   %.02 = phi i32 [ %49, %48 ], [ %.03, %24 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.05 = phi i32 [ %47, %30 ], [ %.02, %26 ]
[LoopLoopAnalysis] parent loop header is:   %.16 = phi i32 [ 1, %60 ], [ %74, %107 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
[LoopLoopAnalysis] parent loop header is:   %.011 = phi i32 [ 1, %4 ], [ %11, %6 ]
[LoopLoopAnalysis] parent loop header is:   %.1 = phi i32 [ %106, %105 ], [ %.16, %72 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
[LoopLoopAnalysis] parent loop header is:   %.14 = phi i32 [ %104, %77 ], [ %.1, %73 ]
Instruction to be moved:   %86 = fneg double %.01
Instruction to be moved:   %74 = add nsw i32 %.16, %20
Instruction to be moved:   %75 = add nsw i32 %73, -2
Instruction to be moved:   %76 = fneg double %.01
Instruction to be moved:   %62 = sitofp i32 %3 to double
Instruction to be moved:   %63 = fmul double %24, 0x401921FB54442D1C
Instruction to be moved:   %.03.neg = sub i32 0, %.03
Instruction to be moved:   %33 = add i32 %.03.neg, %.07
Instruction to be moved:   %29 = add nsw i32 %.03, %20
Instruction to be moved:   %30 = add nsw i32 %28, -2
Instruction to be moved:   %.03.neg = sub i32 0, %.03
Instruction to be moved:   %31 = add i32 %.03.neg, %.07
Instruction to be moved:   %24 = sitofp i32 %3 to double
Instruction to be moved:   %25 = fmul double %23, 0x401921FB54442D1C
Instruction to be moved:   %23 = sitofp i32 %3 to double
Instruction to be moved:   %24 = fmul double %6, 0x401921FB54442D1C
Instruction to be moved:   %6 = sitofp i32 %3 to double
Instruction to be moved:   %7 = fmul double %5, 0x401921FB54442D1C
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 2
[UnitLICM]: NumComputeHoisted: 20
[UnitLICM]: Total: 26
----------------------------------------
Running sccp only: ffbench.c
ffbench.c:157:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]
static void fourn(data, nn, ndim, isign)
            ^
1 warning generated.
UnitSCCP running on main
Visiting BB: 
VisitInstr:   %1 = mul nsw i32 256, 256
BinaryOp:   %1 = mul nsw i32 256, 256
Check LatCell: 0
In Meet:   %1 = mul nsw i32 256, 256, Lat1: (1, 0x0), Lat2: (0, 0x560c2d8d8210)
Lat2.second: i32 65536
Meet:   %1 = mul nsw i32 256, 256
VisitInstr:   %2 = sext i32 %1 to i64
UnaryOp:   %2 = sext i32 %1 to i64
Check LatCell: 0
In Meet:   %2 = sext i32 %1 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d817150)
Lat2.second: i32 sext (i32 65536 to i32)
Meet:   %2 = sext i32 %1 to i64
VisitInstr:   %3 = add nsw i64 %2, 1
BinaryOp:   %3 = add nsw i64 %2, 1
Check LatCell: 0
In Meet:   %3 = add nsw i64 %2, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88baa0)
Lat2.second: i32 add (i32 sext (i32 65536 to i32), i64 1)
Meet:   %3 = add nsw i64 %2, 1
VisitInstr:   %4 = mul nsw i64 %3, 2
BinaryOp:   %4 = mul nsw i64 %3, 2
Check LatCell: 0
In Meet:   %4 = mul nsw i64 %3, 2, Lat1: (1, 0x0), Lat2: (0, 0x560c2d889da0)
Lat2.second: i32 mul (i32 add (i32 sext (i32 65536 to i32), i64 1), i64 2)
Meet:   %4 = mul nsw i64 %3, 2
VisitInstr:   %5 = mul i64 %4, 8
BinaryOp:   %5 = mul i64 %4, 8
Check LatCell: 0
In Meet:   %5 = mul i64 %4, 8, Lat1: (1, 0x0), Lat2: (0, 0x560c2d89be40)
Lat2.second: i32 mul (i32 add (i32 sext (i32 65536 to i32), i64 1), i64 16)
Meet:   %5 = mul i64 %4, 8
VisitInstr:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 2), align 4
Check LatCell: 0
In Meet:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 2), align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 2), align 4
VisitInstr:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4
Check LatCell: 0
In Meet:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 256, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4
VisitInstr:   %6 = call noalias ptr @malloc(i64 noundef %5) #7
Check LatCell: 0
In Meet:   %6 = call noalias ptr @malloc(i64 noundef %5) #7, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %6 = call noalias ptr @malloc(i64 noundef %5) #7
VisitInstr:   %7 = icmp eq ptr %6, null
CmpInst:   %7 = icmp eq ptr %6, null
Check LatCell: 0
In Meet:   %7 = icmp eq ptr %6, null, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %7 = icmp eq ptr %6, null
VisitInstr:   br i1 %7, label %8, label %11
BranchInst:   br i1 %7, label %8, label %11
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d888370, 0x560c2d88a8c0, 0
Adding edge:  -> 
In AddEdge: 0x560c2d888370, 0x560c2d88a8c0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %9 = load ptr, ptr @stderr, align 8
Check LatCell: 0
In Meet:   %9 = load ptr, ptr @stderr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %9 = load ptr, ptr @stderr, align 8
VisitInstr:   %10 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %9, ptr noundef @.str)
Check LatCell: 0
In Meet:   %10 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %9, ptr noundef @.str), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %10 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %9, ptr noundef @.str)
VisitInstr:   call void @exit(i32 noundef 1) #8
Check LatCell: 0
In Meet:   call void @exit(i32 noundef 1) #8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @exit(i32 noundef 1) #8
VisitInstr:   unreachable
Check LatCell: 0
In Meet:   unreachable, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   unreachable
Visiting BB: 
VisitInstr:   call void @llvm.memset.p0.i64(ptr align 8 %6, i8 0, i64 %5, i1 false)
Check LatCell: 0
In Meet:   call void @llvm.memset.p0.i64(ptr align 8 %6, i8 0, i64 %5, i1 false), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @llvm.memset.p0.i64(ptr align 8 %6, i8 0, i64 %5, i1 false)
VisitInstr:   br label %12
BranchInst:   br label %12
In AddEdge: 0x560c2d88a7d0, 0x560c2d88b2c0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
PHI:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
PHI LatOp: 0, 0x560c2d888b40
Check LatCell: 0
In Meet:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888b40)
Lat2.second: i32 0
Meet:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
VisitInstr:   %13 = icmp slt i32 %.01, 256
CmpInst:   %13 = icmp slt i32 %.01, 256
Check LatCell: 0
In Meet:   %13 = icmp slt i32 %.01, 256, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88edb0)
Lat2.second: i1 true
Meet:   %13 = icmp slt i32 %.01, 256
VisitInstr:   br i1 %13, label %14, label %36
BranchInst:   br i1 %13, label %14, label %36
In BranchInst: 0, 0x560c2d88edb0
In AddEdge: 0x560c2d88b250, 0x560c2d88b5c0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %15
BranchInst:   br label %15
In AddEdge: 0x560c2d88b480, 0x560c2d88b710, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
PHI:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
PHI LatOp: 0, 0x560c2d888b40
Check LatCell: 0
In Meet:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888b40)
Lat2.second: i32 0
Meet:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
VisitInstr:   %16 = icmp slt i32 %.02, 256
CmpInst:   %16 = icmp slt i32 %.02, 256
Check LatCell: 0
In Meet:   %16 = icmp slt i32 %.02, 256, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88edb0)
Lat2.second: i1 true
Meet:   %16 = icmp slt i32 %.02, 256
VisitInstr:   br i1 %16, label %17, label %33
BranchInst:   br i1 %16, label %17, label %33
In BranchInst: 0, 0x560c2d88edb0
In AddEdge: 0x560c2d88b6a0, 0x560c2d88ba10, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %18 = and i32 %.01, 15
BinaryOp:   %18 = and i32 %.01, 15
Check LatCell: 0
In Meet:   %18 = and i32 %.01, 15, Lat1: (1, 0x0), Lat2: (0, 0x560c2d888b40)
Lat2.second: i32 0
Meet:   %18 = and i32 %.01, 15
VisitInstr:   %19 = icmp eq i32 %18, 8
CmpInst:   %19 = icmp eq i32 %18, 8
Check LatCell: 0
In Meet:   %19 = icmp eq i32 %18, 8, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88af10)
Lat2.second: i1 false
Meet:   %19 = icmp eq i32 %18, 8
VisitInstr:   br i1 %19, label %23, label %20
BranchInst:   br i1 %19, label %23, label %20
In BranchInst: 0, 0x560c2d88af10
In AddEdge: 0x560c2d88b8d0, 0x560c2d88bd30, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %21 = and i32 %.02, 15
BinaryOp:   %21 = and i32 %.02, 15
Check LatCell: 0
In Meet:   %21 = and i32 %.02, 15, Lat1: (1, 0x0), Lat2: (0, 0x560c2d888b40)
Lat2.second: i32 0
Meet:   %21 = and i32 %.02, 15
VisitInstr:   %22 = icmp eq i32 %21, 8
CmpInst:   %22 = icmp eq i32 %21, 8
Check LatCell: 0
In Meet:   %22 = icmp eq i32 %21, 8, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88af10)
Lat2.second: i1 false
Meet:   %22 = icmp eq i32 %21, 8
VisitInstr:   br i1 %22, label %23, label %30
BranchInst:   br i1 %22, label %23, label %30
In BranchInst: 0, 0x560c2d88af10
In AddEdge: 0x560c2d88bc40, 0x560c2d88bfc0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %31
BranchInst:   br label %31
In AddEdge: 0x560c2d88bf10, 0x560c2d88d4e0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %32 = add nsw i32 %.02, 1
BinaryOp:   %32 = add nsw i32 %.02, 1
Check LatCell: 0
In Meet:   %32 = add nsw i32 %.02, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %32 = add nsw i32 %.02, 1
Adding SSA:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
VisitInstr:   br label %15, !llvm.loop !6
BranchInst:   br label %15, !llvm.loop !6
In AddEdge: 0x560c2d88d470, 0x560c2d88d6e0, 0
Adding edge:  -> 
Visiting SSA:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
VisitInstr:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
PHI:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
PHI LatOp: 0, 0x560c2d888b40
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 1
In Meet:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ], Lat1: (0, 0x560c2d888b40), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
Adding SSA:   %21 = and i32 %.02, 15
Adding SSA:   %32 = add nsw i32 %.02, 1
Adding SSA:   %16 = icmp slt i32 %.02, 256
Visiting SSA:   %21 = and i32 %.02, 15
VisitInstr:   %21 = and i32 %.02, 15
BinaryOp:   %21 = and i32 %.02, 15
Check LatCell: 1
In Meet:   %21 = and i32 %.02, 15, Lat1: (0, 0x560c2d888b40), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %21 = and i32 %.02, 15
Adding SSA:   %22 = icmp eq i32 %21, 8
Visiting SSA:   %32 = add nsw i32 %.02, 1
VisitInstr:   %32 = add nsw i32 %.02, 1
BinaryOp:   %32 = add nsw i32 %.02, 1
Check LatCell: 1
In Meet:   %32 = add nsw i32 %.02, 1, Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %32 = add nsw i32 %.02, 1
Adding SSA:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
Visiting SSA:   %16 = icmp slt i32 %.02, 256
VisitInstr:   %16 = icmp slt i32 %.02, 256
CmpInst:   %16 = icmp slt i32 %.02, 256
Check LatCell: 1
In Meet:   %16 = icmp slt i32 %.02, 256, Lat1: (0, 0x560c2d88edb0), Lat2: (-1, 0x0)
Lat1.second: i1 true
Meet:   %16 = icmp slt i32 %.02, 256
Adding SSA:   br i1 %16, label %17, label %33
Visiting SSA:   %22 = icmp eq i32 %21, 8
VisitInstr:   %22 = icmp eq i32 %21, 8
CmpInst:   %22 = icmp eq i32 %21, 8
Check LatCell: 1
In Meet:   %22 = icmp eq i32 %21, 8, Lat1: (0, 0x560c2d88af10), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %22 = icmp eq i32 %21, 8
Adding SSA:   br i1 %22, label %23, label %30
Visiting SSA:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
VisitInstr:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
Visiting SSA:   br i1 %16, label %17, label %33
VisitInstr:   br i1 %16, label %17, label %33
BranchInst:   br i1 %16, label %17, label %33
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d88b6a0, 0x560c2d88ba10, 0
In AddEdge: 0x560c2d88b6a0, 0x560c2d88ba10, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %34
BranchInst:   br label %34
In AddEdge: 0x560c2d88b920, 0x560c2d88e2b0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %35 = add nsw i32 %.01, 1
BinaryOp:   %35 = add nsw i32 %.01, 1
Check LatCell: 0
In Meet:   %35 = add nsw i32 %.01, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %35 = add nsw i32 %.01, 1
Adding SSA:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
VisitInstr:   br label %12, !llvm.loop !8
BranchInst:   br label %12, !llvm.loop !8
In AddEdge: 0x560c2d88e240, 0x560c2d88e4b0, 0
Adding edge:  -> 
Visiting SSA:   br i1 %22, label %23, label %30
VisitInstr:   br i1 %22, label %23, label %30
BranchInst:   br i1 %22, label %23, label %30
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d88bc40, 0x560c2d88bfc0, 0
Adding edge:  -> 
In AddEdge: 0x560c2d88bc40, 0x560c2d88bfc0, 1
Visiting BB: 
VisitInstr:   %24 = mul nsw i32 256, %.01
BinaryOp:   %24 = mul nsw i32 256, %.01
Check LatCell: 0
In Meet:   %24 = mul nsw i32 256, %.01, Lat1: (1, 0x0), Lat2: (0, 0x560c2d888b40)
Lat2.second: i32 0
Meet:   %24 = mul nsw i32 256, %.01
VisitInstr:   %25 = add nsw i32 %24, %.02
BinaryOp:   %25 = add nsw i32 %24, %.02
Check LatCell: 0
In Meet:   %25 = add nsw i32 %24, %.02, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %25 = add nsw i32 %24, %.02
VisitInstr:   %26 = mul nsw i32 %25, 2
BinaryOp:   %26 = mul nsw i32 %25, 2
Check LatCell: 0
In Meet:   %26 = mul nsw i32 %25, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %26 = mul nsw i32 %25, 2
VisitInstr:   %27 = add nsw i32 1, %26
BinaryOp:   %27 = add nsw i32 1, %26
Check LatCell: 0
In Meet:   %27 = add nsw i32 1, %26, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %27 = add nsw i32 1, %26
VisitInstr:   %28 = sext i32 %27 to i64
UnaryOp:   %28 = sext i32 %27 to i64
Check LatCell: 0
In Meet:   %28 = sext i32 %27 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %28 = sext i32 %27 to i64
VisitInstr:   %29 = getelementptr inbounds double, ptr %6, i64 %28
GetElementPtr:   %29 = getelementptr inbounds double, ptr %6, i64 %28
Check LatCell: 0
In Meet:   %29 = getelementptr inbounds double, ptr %6, i64 %28, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %29 = getelementptr inbounds double, ptr %6, i64 %28
VisitInstr:   store double 1.280000e+02, ptr %29, align 8
Check LatCell: 0
In Meet:   store double 1.280000e+02, ptr %29, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 1.280000e+02, ptr %29, align 8
VisitInstr:   br label %30
BranchInst:   br label %30
In AddEdge: 0x560c2d88bbf0, 0x560c2d88d420, 0
Adding edge:  -> 
Visiting SSA:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
VisitInstr:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
PHI:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
PHI LatOp: 0, 0x560c2d888b40
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 1
In Meet:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ], Lat1: (0, 0x560c2d888b40), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
Adding SSA:   %35 = add nsw i32 %.01, 1
Adding SSA:   %24 = mul nsw i32 256, %.01
Adding SSA:   %18 = and i32 %.01, 15
Adding SSA:   %13 = icmp slt i32 %.01, 256
Visiting SSA:   %35 = add nsw i32 %.01, 1
VisitInstr:   %35 = add nsw i32 %.01, 1
BinaryOp:   %35 = add nsw i32 %.01, 1
Check LatCell: 1
In Meet:   %35 = add nsw i32 %.01, 1, Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %35 = add nsw i32 %.01, 1
Adding SSA:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
Visiting SSA:   %24 = mul nsw i32 256, %.01
VisitInstr:   %24 = mul nsw i32 256, %.01
BinaryOp:   %24 = mul nsw i32 256, %.01
Check LatCell: 1
In Meet:   %24 = mul nsw i32 256, %.01, Lat1: (0, 0x560c2d888b40), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %24 = mul nsw i32 256, %.01
Adding SSA:   %25 = add nsw i32 %24, %.02
Visiting SSA:   %18 = and i32 %.01, 15
VisitInstr:   %18 = and i32 %.01, 15
BinaryOp:   %18 = and i32 %.01, 15
Check LatCell: 1
In Meet:   %18 = and i32 %.01, 15, Lat1: (0, 0x560c2d888b40), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %18 = and i32 %.01, 15
Adding SSA:   %19 = icmp eq i32 %18, 8
Visiting SSA:   %13 = icmp slt i32 %.01, 256
VisitInstr:   %13 = icmp slt i32 %.01, 256
CmpInst:   %13 = icmp slt i32 %.01, 256
Check LatCell: 1
In Meet:   %13 = icmp slt i32 %.01, 256, Lat1: (0, 0x560c2d88edb0), Lat2: (-1, 0x0)
Lat1.second: i1 true
Meet:   %13 = icmp slt i32 %.01, 256
Adding SSA:   br i1 %13, label %14, label %36
Visiting SSA:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
VisitInstr:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
Visiting SSA:   %25 = add nsw i32 %24, %.02
VisitInstr:   %25 = add nsw i32 %24, %.02
Visiting SSA:   %19 = icmp eq i32 %18, 8
VisitInstr:   %19 = icmp eq i32 %18, 8
CmpInst:   %19 = icmp eq i32 %18, 8
Check LatCell: 1
In Meet:   %19 = icmp eq i32 %18, 8, Lat1: (0, 0x560c2d88af10), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %19 = icmp eq i32 %18, 8
Adding SSA:   br i1 %19, label %23, label %20
Visiting SSA:   br i1 %13, label %14, label %36
VisitInstr:   br i1 %13, label %14, label %36
BranchInst:   br i1 %13, label %14, label %36
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d88b250, 0x560c2d88b5c0, 0
In AddEdge: 0x560c2d88b250, 0x560c2d88b5c0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %37
BranchInst:   br label %37
In AddEdge: 0x560c2d88b4d0, 0x560c2d88e700, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
PHI:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
PHI LatOp: 0, 0x560c2d888b40
Check LatCell: 0
In Meet:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888b40)
Lat2.second: i32 0
Meet:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
VisitInstr:   %38 = icmp slt i32 %.1, 63
CmpInst:   %38 = icmp slt i32 %.1, 63
Check LatCell: 0
In Meet:   %38 = icmp slt i32 %.1, 63, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88edb0)
Lat2.second: i1 true
Meet:   %38 = icmp slt i32 %.1, 63
VisitInstr:   br i1 %38, label %39, label %42
BranchInst:   br i1 %38, label %39, label %42
In BranchInst: 0, 0x560c2d88edb0
In AddEdge: 0x560c2d88e690, 0x560c2d88ea00, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef 1)
Check LatCell: 0
In Meet:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef 1), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef 1)
VisitInstr:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef -1)
Check LatCell: 0
In Meet:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef -1), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @fourn(ptr noundef %6, ptr noundef @main.nsize, i32 noundef 2, i32 noundef -1)
VisitInstr:   br label %40
BranchInst:   br label %40
In AddEdge: 0x560c2d88e8c0, 0x560c2d88efa0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %41 = add nsw i32 %.1, 1
BinaryOp:   %41 = add nsw i32 %.1, 1
Check LatCell: 0
In Meet:   %41 = add nsw i32 %.1, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %41 = add nsw i32 %.1, 1
Adding SSA:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
VisitInstr:   br label %37, !llvm.loop !9
BranchInst:   br label %37, !llvm.loop !9
In AddEdge: 0x560c2d88ef30, 0x560c2d88f1a0, 0
Adding edge:  -> 
Visiting SSA:   br i1 %19, label %23, label %20
VisitInstr:   br i1 %19, label %23, label %20
BranchInst:   br i1 %19, label %23, label %20
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d88b8d0, 0x560c2d88bd30, 0
Adding edge:  -> 
In AddEdge: 0x560c2d88b8d0, 0x560c2d88bd30, 1
Visiting SSA:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
VisitInstr:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
PHI:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
PHI LatOp: 0, 0x560c2d888b40
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 1
In Meet:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ], Lat1: (0, 0x560c2d888b40), Lat2: (-1, 0x0)
Lat1.second: i32 0
Meet:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
Adding SSA:   %41 = add nsw i32 %.1, 1
Adding SSA:   %38 = icmp slt i32 %.1, 63
Visiting SSA:   %41 = add nsw i32 %.1, 1
VisitInstr:   %41 = add nsw i32 %.1, 1
BinaryOp:   %41 = add nsw i32 %.1, 1
Check LatCell: 1
In Meet:   %41 = add nsw i32 %.1, 1, Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %41 = add nsw i32 %.1, 1
Adding SSA:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
Visiting SSA:   %38 = icmp slt i32 %.1, 63
VisitInstr:   %38 = icmp slt i32 %.1, 63
CmpInst:   %38 = icmp slt i32 %.1, 63
Check LatCell: 1
In Meet:   %38 = icmp slt i32 %.1, 63, Lat1: (0, 0x560c2d88edb0), Lat2: (-1, 0x0)
Lat1.second: i1 true
Meet:   %38 = icmp slt i32 %.1, 63
Adding SSA:   br i1 %38, label %39, label %42
Visiting SSA:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
VisitInstr:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
Visiting SSA:   br i1 %38, label %39, label %42
VisitInstr:   br i1 %38, label %39, label %42
BranchInst:   br i1 %38, label %39, label %42
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d88e690, 0x560c2d88ea00, 0
In AddEdge: 0x560c2d88e690, 0x560c2d88ea00, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %43
BranchInst:   br label %43
In AddEdge: 0x560c2d88e910, 0x560c2d88f810, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.011 = phi double [ 1.000000e+10, %42 ], [ %60, %76 ]
PHI:   %.011 = phi double [ 1.000000e+10, %42 ], [ %60, %76 ]
PHI LatOp: 0, 0x560c2d88e960
Check LatCell: 0
In Meet:   %.011 = phi double [ 1.000000e+10, %42 ], [ %60, %76 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d88e960)
Lat2.second: double 1.000000e+10
Meet:   %.011 = phi double [ 1.000000e+10, %42 ], [ %60, %76 ]
VisitInstr:   %.010 = phi double [ -1.000000e+10, %42 ], [ %65, %76 ]
PHI:   %.010 = phi double [ -1.000000e+10, %42 ], [ %65, %76 ]
PHI LatOp: 0, 0x560c2d88f380
Check LatCell: 0
In Meet:   %.010 = phi double [ -1.000000e+10, %42 ], [ %65, %76 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d88f380)
Lat2.second: double -1.000000e+10
Meet:   %.010 = phi double [ -1.000000e+10, %42 ], [ %65, %76 ]
VisitInstr:   %.09 = phi double [ 1.000000e+10, %42 ], [ %70, %76 ]
PHI:   %.09 = phi double [ 1.000000e+10, %42 ], [ %70, %76 ]
PHI LatOp: 0, 0x560c2d88e960
Check LatCell: 0
In Meet:   %.09 = phi double [ 1.000000e+10, %42 ], [ %70, %76 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d88e960)
Lat2.second: double 1.000000e+10
Meet:   %.09 = phi double [ 1.000000e+10, %42 ], [ %70, %76 ]
VisitInstr:   %.05 = phi double [ -1.000000e+10, %42 ], [ %75, %76 ]
PHI:   %.05 = phi double [ -1.000000e+10, %42 ], [ %75, %76 ]
PHI LatOp: 0, 0x560c2d88f380
Check LatCell: 0
In Meet:   %.05 = phi double [ -1.000000e+10, %42 ], [ %75, %76 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d88f380)
Lat2.second: double -1.000000e+10
Meet:   %.05 = phi double [ -1.000000e+10, %42 ], [ %75, %76 ]
VisitInstr:   %.04 = phi double [ 0.000000e+00, %42 ], [ %54, %76 ]
PHI:   %.04 = phi double [ 0.000000e+00, %42 ], [ %54, %76 ]
PHI LatOp: 0, 0x560c2d88f570
Check LatCell: 0
In Meet:   %.04 = phi double [ 0.000000e+00, %42 ], [ %54, %76 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d88f570)
Lat2.second: double 0.000000e+00
Meet:   %.04 = phi double [ 0.000000e+00, %42 ], [ %54, %76 ]
VisitInstr:   %.2 = phi i32 [ 1, %42 ], [ %77, %76 ]
PHI:   %.2 = phi i32 [ 1, %42 ], [ %77, %76 ]
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 0
In Meet:   %.2 = phi i32 [ 1, %42 ], [ %77, %76 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %.2 = phi i32 [ 1, %42 ], [ %77, %76 ]
VisitInstr:   %.0 = phi double [ 0.000000e+00, %42 ], [ %55, %76 ]
PHI:   %.0 = phi double [ 0.000000e+00, %42 ], [ %55, %76 ]
PHI LatOp: 0, 0x560c2d88f570
Check LatCell: 0
In Meet:   %.0 = phi double [ 0.000000e+00, %42 ], [ %55, %76 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d88f570)
Lat2.second: double 0.000000e+00
Meet:   %.0 = phi double [ 0.000000e+00, %42 ], [ %55, %76 ]
VisitInstr:   %44 = sext i32 %.2 to i64
UnaryOp:   %44 = sext i32 %.2 to i64
Check LatCell: 0
In Meet:   %44 = sext i32 %.2 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88d550)
Lat2.second: i32 sext (i32 1 to i32)
Meet:   %44 = sext i32 %.2 to i64
VisitInstr:   %45 = icmp sle i64 %44, %2
CmpInst:   %45 = icmp sle i64 %44, %2
Check LatCell: 0
In Meet:   %45 = icmp sle i64 %44, %2, Lat1: (1, 0x0), Lat2: (0, 0x560c2d888ce0)
Lat2.second: i1 icmp sle (i32 sext (i32 1 to i32), i32 sext (i32 65536 to i32))
Meet:   %45 = icmp sle i64 %44, %2
VisitInstr:   br i1 %45, label %46, label %78
BranchInst:   br i1 %45, label %46, label %78
In BranchInst: 0, 0x560c2d888ce0
Removing:   %44 = sext i32 %.2 to i64, replacing with: i32 sext (i32 1 to i32)
Removing:   %.011 = phi double [ 1.000000e+10, %42 ], [ %59, %75 ], replacing with: double 1.000000e+10
Removing:   %.09 = phi double [ 1.000000e+10, %42 ], [ %69, %75 ], replacing with: double 1.000000e+10
Removing:   %2 = sext i32 %1 to i64, replacing with: i32 sext (i32 65536 to i32)
Removing:   %2 = add nsw i32 sext (i32 65536 to i32), i64 1, replacing with: i32 add (i32 sext (i32 65536 to i32), i64 1)
Removing:   %.0 = phi double [ 0.000000e+00, %40 ], [ %52, %73 ], replacing with: double 0.000000e+00
Removing:   %2 = mul nsw i32 add (i32 sext (i32 65536 to i32), i64 1), i64 2, replacing with: i32 mul (i32 add (i32 sext (i32 65536 to i32), i64 1), i64 2)
Removing:   %.04 = phi double [ 0.000000e+00, %39 ], [ %50, %72 ], replacing with: double 0.000000e+00
Removing:   %.05 = phi double [ -1.000000e+10, %39 ], [ %71, %72 ], replacing with: double -1.000000e+10
Removing:   %.010 = phi double [ -1.000000e+10, %39 ], [ %61, %72 ], replacing with: double -1.000000e+10
Removing:   %41 = icmp sle i32 sext (i32 1 to i32), sext (i32 65536 to i32), replacing with: i1 icmp sle (i32 sext (i32 1 to i32), i32 sext (i32 65536 to i32))
Removing:   %2 = mul i32 mul (i32 add (i32 sext (i32 65536 to i32), i64 1), i64 2), i64 8, replacing with: i32 mul (i32 add (i32 sext (i32 65536 to i32), i64 1), i64 16)
Removing:   %1 = mul nsw i32 256, 256, replacing with: i32 65536
Removing:   %.2 = phi i32 [ 1, %37 ], [ %70, %69 ], replacing with: i32 1
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
UnitSCCP: 14 instructions removed, 96 basic blocks unreachable, 24 instructions simplified
UnitSCCP running on fourn
Visiting BB: 
VisitInstr:   br label %5
BranchInst:   br label %5
In AddEdge: 0x560c2d89e1d0, 0x560c2d89f310, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
PHI:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 0
In Meet:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
VisitInstr:   %.09 = phi i32 [ 1, %4 ], [ %11, %12 ]
PHI:   %.09 = phi i32 [ 1, %4 ], [ %11, %12 ]
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 0
In Meet:   %.09 = phi i32 [ 1, %4 ], [ %11, %12 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %.09 = phi i32 [ 1, %4 ], [ %11, %12 ]
VisitInstr:   %6 = icmp sle i32 %.011, %2
CmpInst:   %6 = icmp sle i32 %.011, %2
Check LatCell: 0
In Meet:   %6 = icmp sle i32 %.011, %2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %6 = icmp sle i32 %.011, %2
VisitInstr:   br i1 %6, label %7, label %14
BranchInst:   br i1 %6, label %7, label %14
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d89e220, 0x560c2d89f610, 0
Adding edge:  -> 
In AddEdge: 0x560c2d89e220, 0x560c2d89f610, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %8 = sext i32 %.011 to i64
UnaryOp:   %8 = sext i32 %.011 to i64
Check LatCell: 0
In Meet:   %8 = sext i32 %.011 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88d550)
Lat2.second: i32 sext (i32 1 to i32)
Meet:   %8 = sext i32 %.011 to i64
VisitInstr:   %9 = getelementptr inbounds i32, ptr %1, i64 %8
GetElementPtr:   %9 = getelementptr inbounds i32, ptr %1, i64 %8
Check LatCell: 0
In Meet:   %9 = getelementptr inbounds i32, ptr %1, i64 %8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %9 = getelementptr inbounds i32, ptr %1, i64 %8
VisitInstr:   %10 = load i32, ptr %9, align 4
Check LatCell: 0
In Meet:   %10 = load i32, ptr %9, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %10 = load i32, ptr %9, align 4
VisitInstr:   %11 = mul nsw i32 %.09, %10
BinaryOp:   %11 = mul nsw i32 %.09, %10
Check LatCell: 0
In Meet:   %11 = mul nsw i32 %.09, %10, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %11 = mul nsw i32 %.09, %10
Adding SSA:   %.09 = phi i32 [ 1, %4 ], [ %11, %12 ]
VisitInstr:   br label %12
BranchInst:   br label %12
In AddEdge: 0x560c2d89f4d0, 0x560c2d89fac0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %15
BranchInst:   br label %15
In AddEdge: 0x560c2d89f520, 0x560c2d89ff90, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %13 = add nsw i32 %.011, 1
BinaryOp:   %13 = add nsw i32 %.011, 1
Check LatCell: 0
In Meet:   %13 = add nsw i32 %.011, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88c700)
Lat2.second: i32 2
Meet:   %13 = add nsw i32 %.011, 1
Adding SSA:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
VisitInstr:   br label %5, !llvm.loop !6
BranchInst:   br label %5, !llvm.loop !6
In AddEdge: 0x560c2d89fa50, 0x560c2d89fcc0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.112 = phi i32 [ %2, %14 ], [ %174, %173 ]
PHI:   %.112 = phi i32 [ %2, %14 ], [ %174, %173 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.112 = phi i32 [ %2, %14 ], [ %174, %173 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.112 = phi i32 [ %2, %14 ], [ %174, %173 ]
VisitInstr:   %.010 = phi i32 [ 1, %14 ], [ %172, %173 ]
PHI:   %.010 = phi i32 [ 1, %14 ], [ %172, %173 ]
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 0
In Meet:   %.010 = phi i32 [ 1, %14 ], [ %172, %173 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %.010 = phi i32 [ 1, %14 ], [ %172, %173 ]
VisitInstr:   %16 = icmp sge i32 %.112, 1
CmpInst:   %16 = icmp sge i32 %.112, 1
Check LatCell: 0
In Meet:   %16 = icmp sge i32 %.112, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %16 = icmp sge i32 %.112, 1
VisitInstr:   br i1 %16, label %17, label %175
BranchInst:   br i1 %16, label %17, label %175
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d89ff20, 0x560c2d8a0220, 0
Adding edge:  -> 
In AddEdge: 0x560c2d89ff20, 0x560c2d8a0220, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %18 = sext i32 %.112 to i64
UnaryOp:   %18 = sext i32 %.112 to i64
Check LatCell: 0
In Meet:   %18 = sext i32 %.112 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %18 = sext i32 %.112 to i64
VisitInstr:   %19 = getelementptr inbounds i32, ptr %1, i64 %18
GetElementPtr:   %19 = getelementptr inbounds i32, ptr %1, i64 %18
Check LatCell: 0
In Meet:   %19 = getelementptr inbounds i32, ptr %1, i64 %18, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %19 = getelementptr inbounds i32, ptr %1, i64 %18
VisitInstr:   %20 = load i32, ptr %19, align 4
Check LatCell: 0
In Meet:   %20 = load i32, ptr %19, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %20 = load i32, ptr %19, align 4
VisitInstr:   %21 = mul nsw i32 %20, %.010
BinaryOp:   %21 = mul nsw i32 %20, %.010
Check LatCell: 0
In Meet:   %21 = mul nsw i32 %20, %.010, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %21 = mul nsw i32 %20, %.010
VisitInstr:   %22 = sdiv i32 %.09, %21
BinaryOp:   %22 = sdiv i32 %.09, %21
Check LatCell: 0
In Meet:   %22 = sdiv i32 %.09, %21, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %22 = sdiv i32 %.09, %21
VisitInstr:   %23 = shl i32 %.010, 1
BinaryOp:   %23 = shl i32 %.010, 1
Check LatCell: 0
In Meet:   %23 = shl i32 %.010, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88c700)
Lat2.second: i32 2
Meet:   %23 = shl i32 %.010, 1
VisitInstr:   %24 = mul nsw i32 %23, %20
BinaryOp:   %24 = mul nsw i32 %23, %20
Check LatCell: 0
In Meet:   %24 = mul nsw i32 %23, %20, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %24 = mul nsw i32 %23, %20
VisitInstr:   %25 = mul nsw i32 %24, %22
BinaryOp:   %25 = mul nsw i32 %24, %22
Check LatCell: 0
In Meet:   %25 = mul nsw i32 %24, %22, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %25 = mul nsw i32 %24, %22
VisitInstr:   br label %26
BranchInst:   br label %26
In AddEdge: 0x560c2d8a00e0, 0x560c2d8a0f80, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   ret void
Check LatCell: 0
In Meet:   ret void, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret void
Visiting BB: 
VisitInstr:   %.07 = phi i32 [ 1, %17 ], [ %83, %84 ]
PHI:   %.07 = phi i32 [ 1, %17 ], [ %83, %84 ]
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 0
In Meet:   %.07 = phi i32 [ 1, %17 ], [ %83, %84 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %.07 = phi i32 [ 1, %17 ], [ %83, %84 ]
VisitInstr:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ]
PHI:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ]
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 0
In Meet:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ]
VisitInstr:   %27 = icmp sle i32 %.03, %24
CmpInst:   %27 = icmp sle i32 %.03, %24
Check LatCell: 0
In Meet:   %27 = icmp sle i32 %.03, %24, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %27 = icmp sle i32 %.03, %24
VisitInstr:   br i1 %27, label %28, label %86
BranchInst:   br i1 %27, label %28, label %86
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d8a0f10, 0x560c2d8a1280, 0
Adding edge:  -> 
In AddEdge: 0x560c2d8a0f10, 0x560c2d8a1280, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %29 = icmp slt i32 %.03, %.07
CmpInst:   %29 = icmp slt i32 %.03, %.07
Check LatCell: 0
In Meet:   %29 = icmp slt i32 %.03, %.07, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88af10)
Lat2.second: i1 false
Meet:   %29 = icmp slt i32 %.03, %.07
VisitInstr:   br i1 %29, label %30, label %71
BranchInst:   br i1 %29, label %30, label %71
In BranchInst: 0, 0x560c2d88af10
In AddEdge: 0x560c2d8a1140, 0x560c2d8a1580, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %87
BranchInst:   br label %87
In AddEdge: 0x560c2d8a1190, 0x560c2d8a5f40, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %72 = ashr i32 %24, 1
BinaryOp:   %72 = ashr i32 %24, 1
Check LatCell: 0
In Meet:   %72 = ashr i32 %24, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %72 = ashr i32 %24, 1
VisitInstr:   br label %73
BranchInst:   br label %73
In AddEdge: 0x560c2d8a1490, 0x560c2d8a4d10, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
PHI:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
PHI LatOp: 0, 0x560c2d88c700
Check LatCell: 0
In Meet:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d88c700)
Lat2.second: i32 2
Meet:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
VisitInstr:   %88 = icmp slt i32 %.014, %24
CmpInst:   %88 = icmp slt i32 %.014, %24
Check LatCell: 0
In Meet:   %88 = icmp slt i32 %.014, %24, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %88 = icmp slt i32 %.014, %24
VisitInstr:   br i1 %88, label %89, label %171
BranchInst:   br i1 %88, label %89, label %171
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d8a5ed0, 0x560c2d8a6240, 0
Adding edge:  -> 
In AddEdge: 0x560c2d8a5ed0, 0x560c2d8a6240, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.013 = phi i32 [ %72, %71 ], [ %81, %79 ]
PHI:   %.013 = phi i32 [ %72, %71 ], [ %81, %79 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.013 = phi i32 [ %72, %71 ], [ %81, %79 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.013 = phi i32 [ %72, %71 ], [ %81, %79 ]
VisitInstr:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ]
PHI:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ]
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 0
In Meet:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ]
VisitInstr:   %74 = icmp sge i32 %.013, %23
CmpInst:   %74 = icmp sge i32 %.013, %23
Check LatCell: 0
In Meet:   %74 = icmp sge i32 %.013, %23, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %74 = icmp sge i32 %.013, %23
VisitInstr:   br i1 %74, label %75, label %77
BranchInst:   br i1 %74, label %75, label %77
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d8a4ca0, 0x560c2d8a4fd0, 0
Adding edge:  -> 
In AddEdge: 0x560c2d8a4ca0, 0x560c2d8a4fd0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %90 = shl i32 %.014, 1
BinaryOp:   %90 = shl i32 %.014, 1
Check LatCell: 0
In Meet:   %90 = shl i32 %.014, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d8a9700)
Lat2.second: i32 4
Meet:   %90 = shl i32 %.014, 1
Adding SSA:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
VisitInstr:   %91 = sitofp i32 %3 to double
UnaryOp:   %91 = sitofp i32 %3 to double
Check LatCell: 0
In Meet:   %91 = sitofp i32 %3 to double, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %91 = sitofp i32 %3 to double
VisitInstr:   %92 = fmul double %91, 0x401921FB54442D1C
BinaryOp:   %92 = fmul double %91, 0x401921FB54442D1C
Check LatCell: 0
In Meet:   %92 = fmul double %91, 0x401921FB54442D1C, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %92 = fmul double %91, 0x401921FB54442D1C
VisitInstr:   %93 = sdiv i32 %90, %23
BinaryOp:   %93 = sdiv i32 %90, %23
Check LatCell: 0
In Meet:   %93 = sdiv i32 %90, %23, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88c700)
Lat2.second: i32 2
Meet:   %93 = sdiv i32 %90, %23
VisitInstr:   %94 = sitofp i32 %93 to double
UnaryOp:   %94 = sitofp i32 %93 to double
Check LatCell: 0
In Meet:   %94 = sitofp i32 %93 to double, Lat1: (1, 0x0), Lat2: (0, 0x560c2d8a2cb0)
Lat2.second: i32 sitofp (i32 2 to i32)
Meet:   %94 = sitofp i32 %93 to double
VisitInstr:   %95 = fdiv double %92, %94
BinaryOp:   %95 = fdiv double %92, %94
Check LatCell: 0
In Meet:   %95 = fdiv double %92, %94, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %95 = fdiv double %92, %94
VisitInstr:   %96 = fmul double 5.000000e-01, %95
BinaryOp:   %96 = fmul double 5.000000e-01, %95
Check LatCell: 0
In Meet:   %96 = fmul double 5.000000e-01, %95, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %96 = fmul double 5.000000e-01, %95
VisitInstr:   %97 = call double @sin(double noundef %96) #7
Check LatCell: 0
In Meet:   %97 = call double @sin(double noundef %96) #7, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %97 = call double @sin(double noundef %96) #7
VisitInstr:   %98 = fmul double -2.000000e+00, %97
BinaryOp:   %98 = fmul double -2.000000e+00, %97
Check LatCell: 0
In Meet:   %98 = fmul double -2.000000e+00, %97, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %98 = fmul double -2.000000e+00, %97
VisitInstr:   %99 = fmul double %98, %97
BinaryOp:   %99 = fmul double %98, %97
Check LatCell: 0
In Meet:   %99 = fmul double %98, %97, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %99 = fmul double %98, %97
VisitInstr:   %100 = call double @sin(double noundef %95) #7
Check LatCell: 0
In Meet:   %100 = call double @sin(double noundef %95) #7, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %100 = call double @sin(double noundef %95) #7
VisitInstr:   br label %101
BranchInst:   br label %101
In AddEdge: 0x560c2d8a6100, 0x560c2d8a7350, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %172 = mul nsw i32 %.010, %20
BinaryOp:   %172 = mul nsw i32 %.010, %20
Check LatCell: 0
In Meet:   %172 = mul nsw i32 %.010, %20, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %172 = mul nsw i32 %.010, %20
Adding SSA:   %.010 = phi i32 [ 1, %14 ], [ %172, %173 ]
VisitInstr:   br label %173
BranchInst:   br label %173
In AddEdge: 0x560c2d8a6150, 0x560c2d8ace90, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %76 = icmp sgt i32 %.18, %.013
CmpInst:   %76 = icmp sgt i32 %.18, %.013
Check LatCell: 0
In Meet:   %76 = icmp sgt i32 %.18, %.013, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %76 = icmp sgt i32 %.18, %.013
VisitInstr:   br label %77
BranchInst:   br label %77
In AddEdge: 0x560c2d8a4ed0, 0x560c2d8a51b0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %78 = phi i1 [ false, %73 ], [ %76, %75 ]
PHI:   %78 = phi i1 [ false, %73 ], [ %76, %75 ]
PHI LatOp: 0, 0x560c2d88af10
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %78 = phi i1 [ false, %73 ], [ %76, %75 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %78 = phi i1 [ false, %73 ], [ %76, %75 ]
VisitInstr:   br i1 %78, label %79, label %82
BranchInst:   br i1 %78, label %79, label %82
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d8a4f20, 0x560c2d8a5350, 0
Adding edge:  -> 
In AddEdge: 0x560c2d8a4f20, 0x560c2d8a5350, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.16 = phi i32 [ 1, %89 ], [ %169, %168 ]
PHI:   %.16 = phi i32 [ 1, %89 ], [ %169, %168 ]
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 0
In Meet:   %.16 = phi i32 [ 1, %89 ], [ %169, %168 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %.16 = phi i32 [ 1, %89 ], [ %169, %168 ]
VisitInstr:   %.01 = phi double [ 0.000000e+00, %89 ], [ %167, %168 ]
PHI:   %.01 = phi double [ 0.000000e+00, %89 ], [ %167, %168 ]
PHI LatOp: 0, 0x560c2d88f570
Check LatCell: 0
In Meet:   %.01 = phi double [ 0.000000e+00, %89 ], [ %167, %168 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d88f570)
Lat2.second: double 0.000000e+00
Meet:   %.01 = phi double [ 0.000000e+00, %89 ], [ %167, %168 ]
VisitInstr:   %.0 = phi double [ 1.000000e+00, %89 ], [ %164, %168 ]
PHI:   %.0 = phi double [ 1.000000e+00, %89 ], [ %164, %168 ]
PHI LatOp: 0, 0x560c2d8a70b0
Check LatCell: 0
In Meet:   %.0 = phi double [ 1.000000e+00, %89 ], [ %164, %168 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d8a70b0)
Lat2.second: double 1.000000e+00
Meet:   %.0 = phi double [ 1.000000e+00, %89 ], [ %164, %168 ]
VisitInstr:   %102 = icmp sle i32 %.16, %.014
CmpInst:   %102 = icmp sle i32 %.16, %.014
Check LatCell: 0
In Meet:   %102 = icmp sle i32 %.16, %.014, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88edb0)
Lat2.second: i1 true
Meet:   %102 = icmp sle i32 %.16, %.014
VisitInstr:   br i1 %102, label %103, label %170
BranchInst:   br i1 %102, label %103, label %170
In BranchInst: 0, 0x560c2d88edb0
In AddEdge: 0x560c2d8a72a0, 0x560c2d8a7650, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %174 = add nsw i32 %.112, -1
BinaryOp:   %174 = add nsw i32 %.112, -1
Check LatCell: 0
In Meet:   %174 = add nsw i32 %.112, -1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %174 = add nsw i32 %.112, -1
Adding SSA:   %.112 = phi i32 [ %2, %14 ], [ %174, %173 ]
VisitInstr:   br label %15, !llvm.loop !16
BranchInst:   br label %15, !llvm.loop !16
In AddEdge: 0x560c2d8ace20, 0x560c2d8ad090, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %78 = phi i1 [ false, %73 ], [ %76, %75 ]
VisitInstr:   br i1 %78, label %79, label %82
BranchInst:   br i1 %78, label %79, label %82
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d8a4f20, 0x560c2d8a5350, 0
In AddEdge: 0x560c2d8a4f20, 0x560c2d8a5350, 1
Visiting BB: 
VisitInstr:   %80 = sub nsw i32 %.18, %.013
BinaryOp:   %80 = sub nsw i32 %.18, %.013
Check LatCell: 0
In Meet:   %80 = sub nsw i32 %.18, %.013, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %80 = sub nsw i32 %.18, %.013
Adding SSA:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ]
VisitInstr:   %81 = ashr i32 %.013, 1
BinaryOp:   %81 = ashr i32 %.013, 1
Check LatCell: 0
In Meet:   %81 = ashr i32 %.013, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %81 = ashr i32 %.013, 1
Adding SSA:   %.013 = phi i32 [ %72, %71 ], [ %81, %79 ]
VisitInstr:   br label %73, !llvm.loop !10
BranchInst:   br label %73, !llvm.loop !10
In AddEdge: 0x560c2d8a5250, 0x560c2d8a5750, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %83 = add nsw i32 %.18, %.013
BinaryOp:   %83 = add nsw i32 %.18, %.013
Check LatCell: 0
In Meet:   %83 = add nsw i32 %.18, %.013, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %83 = add nsw i32 %.18, %.013
Adding SSA:   %.07 = phi i32 [ 1, %17 ], [ %83, %84 ]
VisitInstr:   br label %84
BranchInst:   br label %84
In AddEdge: 0x560c2d8a52a0, 0x560c2d8a5a90, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %104
BranchInst:   br label %104
In AddEdge: 0x560c2d8a7510, 0x560c2d8a7810, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %85 = add nsw i32 %.03, %23
BinaryOp:   %85 = add nsw i32 %.03, %23
Check LatCell: 0
In Meet:   %85 = add nsw i32 %.03, %23, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88b670)
Lat2.second: i32 3
Meet:   %85 = add nsw i32 %.03, %23
Adding SSA:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ]
VisitInstr:   br label %26, !llvm.loop !11
BranchInst:   br label %26, !llvm.loop !11
In AddEdge: 0x560c2d8a5a20, 0x560c2d8a5d00, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
PHI:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 0
In Meet:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
VisitInstr:   %105 = add nsw i32 %.16, %23
BinaryOp:   %105 = add nsw i32 %.16, %23
Check LatCell: 0
In Meet:   %105 = add nsw i32 %.16, %23, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88b670)
Lat2.second: i32 3
Meet:   %105 = add nsw i32 %.16, %23
VisitInstr:   %106 = sub nsw i32 %105, 2
BinaryOp:   %106 = sub nsw i32 %105, 2
Check LatCell: 0
In Meet:   %106 = sub nsw i32 %105, 2, Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %106 = sub nsw i32 %105, 2
VisitInstr:   %107 = icmp sle i32 %.1, %106
CmpInst:   %107 = icmp sle i32 %.1, %106
Check LatCell: 0
In Meet:   %107 = icmp sle i32 %.1, %106, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88edb0)
Lat2.second: i1 true
Meet:   %107 = icmp sle i32 %.1, %106
VisitInstr:   br i1 %107, label %108, label %160
BranchInst:   br i1 %107, label %108, label %160
In BranchInst: 0, 0x560c2d88edb0
In AddEdge: 0x560c2d8a77a0, 0x560c2d8a7ca0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %109
BranchInst:   br label %109
In AddEdge: 0x560c2d8a7b60, 0x560c2d8a7e60, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
PHI:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
PHI LatOp: 0, 0x560c2d888a80
Check LatCell: 0
In Meet:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ], Lat1: (1, 0x0), Lat2: (0, 0x560c2d888a80)
Lat2.second: i32 1
Meet:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
VisitInstr:   %110 = icmp sle i32 %.14, %25
CmpInst:   %110 = icmp sle i32 %.14, %25
Check LatCell: 0
In Meet:   %110 = icmp sle i32 %.14, %25, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %110 = icmp sle i32 %.14, %25
VisitInstr:   br i1 %110, label %111, label %157
BranchInst:   br i1 %110, label %111, label %157
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d8a7df0, 0x560c2d8a8160, 0
Adding edge:  -> 
In AddEdge: 0x560c2d8a7df0, 0x560c2d8a8160, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %112 = add nsw i32 %.14, %.014
BinaryOp:   %112 = add nsw i32 %.14, %.014
Check LatCell: 0
In Meet:   %112 = add nsw i32 %.14, %.014, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88b670)
Lat2.second: i32 3
Meet:   %112 = add nsw i32 %.14, %.014
VisitInstr:   %113 = sext i32 %112 to i64
UnaryOp:   %113 = sext i32 %112 to i64
Check LatCell: 0
In Meet:   %113 = sext i32 %112 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d8a3ac0)
Lat2.second: i32 sext (i32 3 to i32)
Meet:   %113 = sext i32 %112 to i64
VisitInstr:   %114 = getelementptr inbounds double, ptr %0, i64 %113
GetElementPtr:   %114 = getelementptr inbounds double, ptr %0, i64 %113
Check LatCell: 0
In Meet:   %114 = getelementptr inbounds double, ptr %0, i64 %113, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %114 = getelementptr inbounds double, ptr %0, i64 %113
VisitInstr:   %115 = load double, ptr %114, align 8
Check LatCell: 0
In Meet:   %115 = load double, ptr %114, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %115 = load double, ptr %114, align 8
VisitInstr:   %116 = add nsw i32 %112, 1
BinaryOp:   %116 = add nsw i32 %112, 1
Check LatCell: 0
In Meet:   %116 = add nsw i32 %112, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d8a9700)
Lat2.second: i32 4
Meet:   %116 = add nsw i32 %112, 1
VisitInstr:   %117 = sext i32 %116 to i64
UnaryOp:   %117 = sext i32 %116 to i64
Check LatCell: 0
In Meet:   %117 = sext i32 %116 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d89fb30)
Lat2.second: i32 sext (i32 4 to i32)
Meet:   %117 = sext i32 %116 to i64
VisitInstr:   %118 = getelementptr inbounds double, ptr %0, i64 %117
GetElementPtr:   %118 = getelementptr inbounds double, ptr %0, i64 %117
Check LatCell: 0
In Meet:   %118 = getelementptr inbounds double, ptr %0, i64 %117, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %118 = getelementptr inbounds double, ptr %0, i64 %117
VisitInstr:   %119 = load double, ptr %118, align 8
Check LatCell: 0
In Meet:   %119 = load double, ptr %118, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %119 = load double, ptr %118, align 8
VisitInstr:   %120 = fmul double %.01, %119
BinaryOp:   %120 = fmul double %.01, %119
Check LatCell: 0
In Meet:   %120 = fmul double %.01, %119, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %120 = fmul double %.01, %119
VisitInstr:   %121 = fneg double %120
UnaryOp:   %121 = fneg double %120
Check LatCell: 0
In Meet:   %121 = fneg double %120, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %121 = fneg double %120
VisitInstr:   %122 = call double @llvm.fmuladd.f64(double %.0, double %115, double %121)
Check LatCell: 0
In Meet:   %122 = call double @llvm.fmuladd.f64(double %.0, double %115, double %121), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %122 = call double @llvm.fmuladd.f64(double %.0, double %115, double %121)
VisitInstr:   %123 = add nsw i32 %112, 1
BinaryOp:   %123 = add nsw i32 %112, 1
Check LatCell: 0
In Meet:   %123 = add nsw i32 %112, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d8a9700)
Lat2.second: i32 4
Meet:   %123 = add nsw i32 %112, 1
VisitInstr:   %124 = sext i32 %123 to i64
UnaryOp:   %124 = sext i32 %123 to i64
Check LatCell: 0
In Meet:   %124 = sext i32 %123 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d89fb30)
Lat2.second: i32 sext (i32 4 to i32)
Meet:   %124 = sext i32 %123 to i64
VisitInstr:   %125 = getelementptr inbounds double, ptr %0, i64 %124
GetElementPtr:   %125 = getelementptr inbounds double, ptr %0, i64 %124
Check LatCell: 0
In Meet:   %125 = getelementptr inbounds double, ptr %0, i64 %124, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %125 = getelementptr inbounds double, ptr %0, i64 %124
VisitInstr:   %126 = load double, ptr %125, align 8
Check LatCell: 0
In Meet:   %126 = load double, ptr %125, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %126 = load double, ptr %125, align 8
VisitInstr:   %127 = sext i32 %112 to i64
UnaryOp:   %127 = sext i32 %112 to i64
Check LatCell: 0
In Meet:   %127 = sext i32 %112 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d8a3ac0)
Lat2.second: i32 sext (i32 3 to i32)
Meet:   %127 = sext i32 %112 to i64
VisitInstr:   %128 = getelementptr inbounds double, ptr %0, i64 %127
GetElementPtr:   %128 = getelementptr inbounds double, ptr %0, i64 %127
Check LatCell: 0
In Meet:   %128 = getelementptr inbounds double, ptr %0, i64 %127, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %128 = getelementptr inbounds double, ptr %0, i64 %127
VisitInstr:   %129 = load double, ptr %128, align 8
Check LatCell: 0
In Meet:   %129 = load double, ptr %128, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %129 = load double, ptr %128, align 8
VisitInstr:   %130 = fmul double %.01, %129
BinaryOp:   %130 = fmul double %.01, %129
Check LatCell: 0
In Meet:   %130 = fmul double %.01, %129, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %130 = fmul double %.01, %129
VisitInstr:   %131 = call double @llvm.fmuladd.f64(double %.0, double %126, double %130)
Check LatCell: 0
In Meet:   %131 = call double @llvm.fmuladd.f64(double %.0, double %126, double %130), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %131 = call double @llvm.fmuladd.f64(double %.0, double %126, double %130)
VisitInstr:   %132 = sext i32 %.14 to i64
UnaryOp:   %132 = sext i32 %.14 to i64
Check LatCell: 0
In Meet:   %132 = sext i32 %.14 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88d550)
Lat2.second: i32 sext (i32 1 to i32)
Meet:   %132 = sext i32 %.14 to i64
VisitInstr:   %133 = getelementptr inbounds double, ptr %0, i64 %132
GetElementPtr:   %133 = getelementptr inbounds double, ptr %0, i64 %132
Check LatCell: 0
In Meet:   %133 = getelementptr inbounds double, ptr %0, i64 %132, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %133 = getelementptr inbounds double, ptr %0, i64 %132
VisitInstr:   %134 = load double, ptr %133, align 8
Check LatCell: 0
In Meet:   %134 = load double, ptr %133, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %134 = load double, ptr %133, align 8
VisitInstr:   %135 = fsub double %134, %122
BinaryOp:   %135 = fsub double %134, %122
Check LatCell: 0
In Meet:   %135 = fsub double %134, %122, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %135 = fsub double %134, %122
VisitInstr:   %136 = sext i32 %112 to i64
UnaryOp:   %136 = sext i32 %112 to i64
Check LatCell: 0
In Meet:   %136 = sext i32 %112 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d8a3ac0)
Lat2.second: i32 sext (i32 3 to i32)
Meet:   %136 = sext i32 %112 to i64
VisitInstr:   %137 = getelementptr inbounds double, ptr %0, i64 %136
GetElementPtr:   %137 = getelementptr inbounds double, ptr %0, i64 %136
Check LatCell: 0
In Meet:   %137 = getelementptr inbounds double, ptr %0, i64 %136, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %137 = getelementptr inbounds double, ptr %0, i64 %136
VisitInstr:   store double %135, ptr %137, align 8
Check LatCell: 0
In Meet:   store double %135, ptr %137, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %135, ptr %137, align 8
VisitInstr:   %138 = add nsw i32 %.14, 1
BinaryOp:   %138 = add nsw i32 %.14, 1
Check LatCell: 0
In Meet:   %138 = add nsw i32 %.14, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88c700)
Lat2.second: i32 2
Meet:   %138 = add nsw i32 %.14, 1
VisitInstr:   %139 = sext i32 %138 to i64
UnaryOp:   %139 = sext i32 %138 to i64
Check LatCell: 0
In Meet:   %139 = sext i32 %138 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d89f8e0)
Lat2.second: i32 sext (i32 2 to i32)
Meet:   %139 = sext i32 %138 to i64
VisitInstr:   %140 = getelementptr inbounds double, ptr %0, i64 %139
GetElementPtr:   %140 = getelementptr inbounds double, ptr %0, i64 %139
Check LatCell: 0
In Meet:   %140 = getelementptr inbounds double, ptr %0, i64 %139, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %140 = getelementptr inbounds double, ptr %0, i64 %139
VisitInstr:   %141 = load double, ptr %140, align 8
Check LatCell: 0
In Meet:   %141 = load double, ptr %140, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %141 = load double, ptr %140, align 8
VisitInstr:   %142 = fsub double %141, %131
BinaryOp:   %142 = fsub double %141, %131
Check LatCell: 0
In Meet:   %142 = fsub double %141, %131, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %142 = fsub double %141, %131
VisitInstr:   %143 = add nsw i32 %112, 1
BinaryOp:   %143 = add nsw i32 %112, 1
Check LatCell: 0
In Meet:   %143 = add nsw i32 %112, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d8a9700)
Lat2.second: i32 4
Meet:   %143 = add nsw i32 %112, 1
VisitInstr:   %144 = sext i32 %143 to i64
UnaryOp:   %144 = sext i32 %143 to i64
Check LatCell: 0
In Meet:   %144 = sext i32 %143 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d89fb30)
Lat2.second: i32 sext (i32 4 to i32)
Meet:   %144 = sext i32 %143 to i64
VisitInstr:   %145 = getelementptr inbounds double, ptr %0, i64 %144
GetElementPtr:   %145 = getelementptr inbounds double, ptr %0, i64 %144
Check LatCell: 0
In Meet:   %145 = getelementptr inbounds double, ptr %0, i64 %144, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %145 = getelementptr inbounds double, ptr %0, i64 %144
VisitInstr:   store double %142, ptr %145, align 8
Check LatCell: 0
In Meet:   store double %142, ptr %145, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %142, ptr %145, align 8
VisitInstr:   %146 = sext i32 %.14 to i64
UnaryOp:   %146 = sext i32 %.14 to i64
Check LatCell: 0
In Meet:   %146 = sext i32 %.14 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88d550)
Lat2.second: i32 sext (i32 1 to i32)
Meet:   %146 = sext i32 %.14 to i64
VisitInstr:   %147 = getelementptr inbounds double, ptr %0, i64 %146
GetElementPtr:   %147 = getelementptr inbounds double, ptr %0, i64 %146
Check LatCell: 0
In Meet:   %147 = getelementptr inbounds double, ptr %0, i64 %146, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %147 = getelementptr inbounds double, ptr %0, i64 %146
VisitInstr:   %148 = load double, ptr %147, align 8
Check LatCell: 0
In Meet:   %148 = load double, ptr %147, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %148 = load double, ptr %147, align 8
VisitInstr:   %149 = fadd double %148, %122
BinaryOp:   %149 = fadd double %148, %122
Check LatCell: 0
In Meet:   %149 = fadd double %148, %122, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %149 = fadd double %148, %122
VisitInstr:   store double %149, ptr %147, align 8
Check LatCell: 0
In Meet:   store double %149, ptr %147, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %149, ptr %147, align 8
VisitInstr:   %150 = add nsw i32 %.14, 1
BinaryOp:   %150 = add nsw i32 %.14, 1
Check LatCell: 0
In Meet:   %150 = add nsw i32 %.14, 1, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88c700)
Lat2.second: i32 2
Meet:   %150 = add nsw i32 %.14, 1
VisitInstr:   %151 = sext i32 %150 to i64
UnaryOp:   %151 = sext i32 %150 to i64
Check LatCell: 0
In Meet:   %151 = sext i32 %150 to i64, Lat1: (1, 0x0), Lat2: (0, 0x560c2d89f8e0)
Lat2.second: i32 sext (i32 2 to i32)
Meet:   %151 = sext i32 %150 to i64
VisitInstr:   %152 = getelementptr inbounds double, ptr %0, i64 %151
GetElementPtr:   %152 = getelementptr inbounds double, ptr %0, i64 %151
Check LatCell: 0
In Meet:   %152 = getelementptr inbounds double, ptr %0, i64 %151, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %152 = getelementptr inbounds double, ptr %0, i64 %151
VisitInstr:   %153 = load double, ptr %152, align 8
Check LatCell: 0
In Meet:   %153 = load double, ptr %152, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %153 = load double, ptr %152, align 8
VisitInstr:   %154 = fadd double %153, %131
BinaryOp:   %154 = fadd double %153, %131
Check LatCell: 0
In Meet:   %154 = fadd double %153, %131, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %154 = fadd double %153, %131
VisitInstr:   store double %154, ptr %152, align 8
Check LatCell: 0
In Meet:   store double %154, ptr %152, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %154, ptr %152, align 8
VisitInstr:   br label %155
BranchInst:   br label %155
In AddEdge: 0x560c2d8a8020, 0x560c2d8ab2e0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %158
BranchInst:   br label %158
In AddEdge: 0x560c2d8a8070, 0x560c2d8ab710, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %156 = add nsw i32 %.14, %90
BinaryOp:   %156 = add nsw i32 %.14, %90
Check LatCell: 0
In Meet:   %156 = add nsw i32 %.14, %90, Lat1: (1, 0x0), Lat2: (0, 0x560c2d8928f0)
Lat2.second: i32 5
Meet:   %156 = add nsw i32 %.14, %90
Adding SSA:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
VisitInstr:   br label %109, !llvm.loop !12
BranchInst:   br label %109, !llvm.loop !12
In AddEdge: 0x560c2d8a3a50, 0x560c2d8ab550, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %159 = add nsw i32 %.1, 2
BinaryOp:   %159 = add nsw i32 %.1, 2
Check LatCell: 0
In Meet:   %159 = add nsw i32 %.1, 2, Lat1: (1, 0x0), Lat2: (0, 0x560c2d88b670)
Lat2.second: i32 3
Meet:   %159 = add nsw i32 %.1, 2
Adding SSA:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
VisitInstr:   br label %104, !llvm.loop !13
BranchInst:   br label %104, !llvm.loop !13
In AddEdge: 0x560c2d8ab6a0, 0x560c2d8ab910, 0
Adding edge:  -> 
Visiting SSA:   %.09 = phi i32 [ 1, %4 ], [ %11, %12 ]
VisitInstr:   %.09 = phi i32 [ 1, %4 ], [ %11, %12 ]
PHI:   %.09 = phi i32 [ 1, %4 ], [ %11, %12 ]
PHI LatOp: 0, 0x560c2d888a80
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.09 = phi i32 [ 1, %4 ], [ %11, %12 ], Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.09 = phi i32 [ 1, %4 ], [ %11, %12 ]
Adding SSA:   %22 = sdiv i32 %.09, %21
Adding SSA:   %11 = mul nsw i32 %.09, %10
Visiting SSA:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
VisitInstr:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
PHI:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
PHI LatOp: 0, 0x560c2d888a80
PHI LatOp: 0, 0x560c2d88c700
Check LatCell: 1
In Meet:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ], Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
Adding SSA:   %13 = add nsw i32 %.011, 1
Adding SSA:   %8 = sext i32 %.011 to i64
Adding SSA:   %6 = icmp sle i32 %.011, %2
Visiting SSA:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
VisitInstr:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
PHI:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
PHI LatOp: 0, 0x560c2d88c700
Check LatCell: 1
In Meet:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ], Lat1: (0, 0x560c2d88c700), Lat2: (0, 0x560c2d88c700)
Lat1.second: i32 2
Lat2.second: i32 2
Visiting SSA:   %.010 = phi i32 [ 1, %14 ], [ %172, %173 ]
VisitInstr:   %.010 = phi i32 [ 1, %14 ], [ %172, %173 ]
PHI:   %.010 = phi i32 [ 1, %14 ], [ %172, %173 ]
PHI LatOp: 0, 0x560c2d888a80
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.010 = phi i32 [ 1, %14 ], [ %172, %173 ], Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.010 = phi i32 [ 1, %14 ], [ %172, %173 ]
Adding SSA:   %172 = mul nsw i32 %.010, %20
Adding SSA:   %23 = shl i32 %.010, 1
Adding SSA:   %21 = mul nsw i32 %20, %.010
Visiting SSA:   %.112 = phi i32 [ %2, %14 ], [ %174, %173 ]
VisitInstr:   %.112 = phi i32 [ %2, %14 ], [ %174, %173 ]
Visiting SSA:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ]
VisitInstr:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ]
PHI:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ]
PHI LatOp: 0, 0x560c2d888a80
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ], Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ]
Adding SSA:   %83 = add nsw i32 %.18, %.013
Adding SSA:   %80 = sub nsw i32 %.18, %.013
Adding SSA:   %76 = icmp sgt i32 %.18, %.013
Visiting SSA:   %.013 = phi i32 [ %72, %71 ], [ %81, %79 ]
VisitInstr:   %.013 = phi i32 [ %72, %71 ], [ %81, %79 ]
Visiting SSA:   %.07 = phi i32 [ 1, %17 ], [ %83, %84 ]
VisitInstr:   %.07 = phi i32 [ 1, %17 ], [ %83, %84 ]
PHI:   %.07 = phi i32 [ 1, %17 ], [ %83, %84 ]
PHI LatOp: 0, 0x560c2d888a80
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.07 = phi i32 [ 1, %17 ], [ %83, %84 ], Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.07 = phi i32 [ 1, %17 ], [ %83, %84 ]
Adding SSA:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ]
Adding SSA:   %29 = icmp slt i32 %.03, %.07
Visiting SSA:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ]
VisitInstr:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ]
PHI:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ]
PHI LatOp: 0, 0x560c2d888a80
PHI LatOp: 0, 0x560c2d88b670
Check LatCell: 1
In Meet:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ], Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ]
Adding SSA:   %85 = add nsw i32 %.03, %23
Adding SSA:   %27 = icmp sle i32 %.03, %24
Visiting SSA:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
VisitInstr:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
PHI:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
PHI LatOp: 0, 0x560c2d888a80
PHI LatOp: 0, 0x560c2d8928f0
Check LatCell: 1
In Meet:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ], Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
Adding SSA:   %156 = add nsw i32 %.14, %90
Adding SSA:   %150 = add nsw i32 %.14, 1
Adding SSA:   %146 = sext i32 %.14 to i64
Adding SSA:   %138 = add nsw i32 %.14, 1
Adding SSA:   %132 = sext i32 %.14 to i64
Adding SSA:   %112 = add nsw i32 %.14, %.014
Adding SSA:   %110 = icmp sle i32 %.14, %25
Visiting SSA:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
VisitInstr:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
PHI:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
PHI LatOp: 0, 0x560c2d888a80
PHI LatOp: 0, 0x560c2d88b670
Check LatCell: 1
In Meet:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ], Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
Adding SSA:   %159 = add nsw i32 %.1, 2
Adding SSA:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
Adding SSA:   %107 = icmp sle i32 %.1, %106
Visiting SSA:   %22 = sdiv i32 %.09, %21
VisitInstr:   %22 = sdiv i32 %.09, %21
Visiting SSA:   %11 = mul nsw i32 %.09, %10
VisitInstr:   %11 = mul nsw i32 %.09, %10
Visiting SSA:   %13 = add nsw i32 %.011, 1
VisitInstr:   %13 = add nsw i32 %.011, 1
BinaryOp:   %13 = add nsw i32 %.011, 1
Check LatCell: 1
In Meet:   %13 = add nsw i32 %.011, 1, Lat1: (0, 0x560c2d88c700), Lat2: (-1, 0x0)
Lat1.second: i32 2
Meet:   %13 = add nsw i32 %.011, 1
Adding SSA:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
Visiting SSA:   %8 = sext i32 %.011 to i64
VisitInstr:   %8 = sext i32 %.011 to i64
UnaryOp:   %8 = sext i32 %.011 to i64
Check LatCell: 1
In Meet:   %8 = sext i32 %.011 to i64, Lat1: (0, 0x560c2d88d550), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 1 to i32)
Meet:   %8 = sext i32 %.011 to i64
Adding SSA:   %9 = getelementptr inbounds i32, ptr %1, i64 %8
Visiting SSA:   %6 = icmp sle i32 %.011, %2
VisitInstr:   %6 = icmp sle i32 %.011, %2
Visiting SSA:   %172 = mul nsw i32 %.010, %20
VisitInstr:   %172 = mul nsw i32 %.010, %20
Visiting SSA:   %23 = shl i32 %.010, 1
VisitInstr:   %23 = shl i32 %.010, 1
BinaryOp:   %23 = shl i32 %.010, 1
Check LatCell: 1
In Meet:   %23 = shl i32 %.010, 1, Lat1: (0, 0x560c2d88c700), Lat2: (-1, 0x0)
Lat1.second: i32 2
Meet:   %23 = shl i32 %.010, 1
Adding SSA:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
Adding SSA:   %24 = mul nsw i32 %23, %20
Adding SSA:   %74 = icmp sge i32 %.013, %23
Adding SSA:   %93 = sdiv i32 %90, %23
Adding SSA:   %105 = add nsw i32 %.16, %23
Visiting SSA:   %21 = mul nsw i32 %20, %.010
VisitInstr:   %21 = mul nsw i32 %20, %.010
Visiting SSA:   %83 = add nsw i32 %.18, %.013
VisitInstr:   %83 = add nsw i32 %.18, %.013
Visiting SSA:   %80 = sub nsw i32 %.18, %.013
VisitInstr:   %80 = sub nsw i32 %.18, %.013
Visiting SSA:   %76 = icmp sgt i32 %.18, %.013
VisitInstr:   %76 = icmp sgt i32 %.18, %.013
Visiting SSA:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ]
VisitInstr:   %.18 = phi i32 [ %.07, %71 ], [ %80, %79 ]
Visiting SSA:   %29 = icmp slt i32 %.03, %.07
VisitInstr:   %29 = icmp slt i32 %.03, %.07
CmpInst:   %29 = icmp slt i32 %.03, %.07
Check LatCell: 1
In Meet:   %29 = icmp slt i32 %.03, %.07, Lat1: (0, 0x560c2d88af10), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %29 = icmp slt i32 %.03, %.07
Adding SSA:   br i1 %29, label %30, label %71
Visiting SSA:   %85 = add nsw i32 %.03, %23
VisitInstr:   %85 = add nsw i32 %.03, %23
BinaryOp:   %85 = add nsw i32 %.03, %23
Check LatCell: 1
In Meet:   %85 = add nsw i32 %.03, %23, Lat1: (0, 0x560c2d88b670), Lat2: (-1, 0x0)
Lat1.second: i32 3
Meet:   %85 = add nsw i32 %.03, %23
Adding SSA:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ]
Visiting SSA:   %27 = icmp sle i32 %.03, %24
VisitInstr:   %27 = icmp sle i32 %.03, %24
Visiting SSA:   %156 = add nsw i32 %.14, %90
VisitInstr:   %156 = add nsw i32 %.14, %90
BinaryOp:   %156 = add nsw i32 %.14, %90
Check LatCell: 1
In Meet:   %156 = add nsw i32 %.14, %90, Lat1: (0, 0x560c2d8928f0), Lat2: (-1, 0x0)
Lat1.second: i32 5
Meet:   %156 = add nsw i32 %.14, %90
Visiting SSA:   %150 = add nsw i32 %.14, 1
VisitInstr:   %150 = add nsw i32 %.14, 1
BinaryOp:   %150 = add nsw i32 %.14, 1
Check LatCell: 1
In Meet:   %150 = add nsw i32 %.14, 1, Lat1: (0, 0x560c2d88c700), Lat2: (-1, 0x0)
Lat1.second: i32 2
Meet:   %150 = add nsw i32 %.14, 1
Adding SSA:   %151 = sext i32 %150 to i64
Visiting SSA:   %146 = sext i32 %.14 to i64
VisitInstr:   %146 = sext i32 %.14 to i64
UnaryOp:   %146 = sext i32 %.14 to i64
Check LatCell: 1
In Meet:   %146 = sext i32 %.14 to i64, Lat1: (0, 0x560c2d88d550), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 1 to i32)
Meet:   %146 = sext i32 %.14 to i64
Adding SSA:   %147 = getelementptr inbounds double, ptr %0, i64 %146
Visiting SSA:   %138 = add nsw i32 %.14, 1
VisitInstr:   %138 = add nsw i32 %.14, 1
BinaryOp:   %138 = add nsw i32 %.14, 1
Check LatCell: 1
In Meet:   %138 = add nsw i32 %.14, 1, Lat1: (0, 0x560c2d88c700), Lat2: (-1, 0x0)
Lat1.second: i32 2
Meet:   %138 = add nsw i32 %.14, 1
Adding SSA:   %139 = sext i32 %138 to i64
Visiting SSA:   %132 = sext i32 %.14 to i64
VisitInstr:   %132 = sext i32 %.14 to i64
UnaryOp:   %132 = sext i32 %.14 to i64
Check LatCell: 1
In Meet:   %132 = sext i32 %.14 to i64, Lat1: (0, 0x560c2d88d550), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 1 to i32)
Meet:   %132 = sext i32 %.14 to i64
Adding SSA:   %133 = getelementptr inbounds double, ptr %0, i64 %132
Visiting SSA:   %112 = add nsw i32 %.14, %.014
VisitInstr:   %112 = add nsw i32 %.14, %.014
BinaryOp:   %112 = add nsw i32 %.14, %.014
Check LatCell: 1
In Meet:   %112 = add nsw i32 %.14, %.014, Lat1: (0, 0x560c2d88b670), Lat2: (-1, 0x0)
Lat1.second: i32 3
Meet:   %112 = add nsw i32 %.14, %.014
Adding SSA:   %113 = sext i32 %112 to i64
Adding SSA:   %116 = add nsw i32 %112, 1
Adding SSA:   %123 = add nsw i32 %112, 1
Adding SSA:   %127 = sext i32 %112 to i64
Adding SSA:   %136 = sext i32 %112 to i64
Adding SSA:   %143 = add nsw i32 %112, 1
Visiting SSA:   %110 = icmp sle i32 %.14, %25
VisitInstr:   %110 = icmp sle i32 %.14, %25
Visiting SSA:   %159 = add nsw i32 %.1, 2
VisitInstr:   %159 = add nsw i32 %.1, 2
BinaryOp:   %159 = add nsw i32 %.1, 2
Check LatCell: 1
In Meet:   %159 = add nsw i32 %.1, 2, Lat1: (0, 0x560c2d88b670), Lat2: (-1, 0x0)
Lat1.second: i32 3
Meet:   %159 = add nsw i32 %.1, 2
Adding SSA:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
Visiting SSA:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
VisitInstr:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
Visiting SSA:   %107 = icmp sle i32 %.1, %106
VisitInstr:   %107 = icmp sle i32 %.1, %106
CmpInst:   %107 = icmp sle i32 %.1, %106
Check LatCell: 1
In Meet:   %107 = icmp sle i32 %.1, %106, Lat1: (0, 0x560c2d88edb0), Lat2: (-1, 0x0)
Lat1.second: i1 true
Meet:   %107 = icmp sle i32 %.1, %106
Adding SSA:   br i1 %107, label %108, label %160
Visiting SSA:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
VisitInstr:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
Visiting SSA:   %9 = getelementptr inbounds i32, ptr %1, i64 %8
VisitInstr:   %9 = getelementptr inbounds i32, ptr %1, i64 %8
Visiting SSA:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
VisitInstr:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
PHI:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ], Lat1: (0, 0x560c2d88c700), Lat2: (-1, 0x0)
Lat1.second: i32 2
Meet:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
Adding SSA:   %112 = add nsw i32 %.14, %.014
Adding SSA:   %102 = icmp sle i32 %.16, %.014
Adding SSA:   %90 = shl i32 %.014, 1
Adding SSA:   %88 = icmp slt i32 %.014, %24
Visiting SSA:   %24 = mul nsw i32 %23, %20
VisitInstr:   %24 = mul nsw i32 %23, %20
Visiting SSA:   %74 = icmp sge i32 %.013, %23
VisitInstr:   %74 = icmp sge i32 %.013, %23
Visiting SSA:   %93 = sdiv i32 %90, %23
VisitInstr:   %93 = sdiv i32 %90, %23
BinaryOp:   %93 = sdiv i32 %90, %23
Check LatCell: 1
In Meet:   %93 = sdiv i32 %90, %23, Lat1: (0, 0x560c2d88c700), Lat2: (-1, 0x0)
Lat1.second: i32 2
Meet:   %93 = sdiv i32 %90, %23
Adding SSA:   %94 = sitofp i32 %93 to double
Visiting SSA:   %105 = add nsw i32 %.16, %23
VisitInstr:   %105 = add nsw i32 %.16, %23
BinaryOp:   %105 = add nsw i32 %.16, %23
Check LatCell: 1
In Meet:   %105 = add nsw i32 %.16, %23, Lat1: (0, 0x560c2d88b670), Lat2: (-1, 0x0)
Lat1.second: i32 3
Meet:   %105 = add nsw i32 %.16, %23
Adding SSA:   %106 = sub nsw i32 %105, 2
Visiting SSA:   br i1 %29, label %30, label %71
VisitInstr:   br i1 %29, label %30, label %71
BranchInst:   br i1 %29, label %30, label %71
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d8a1140, 0x560c2d8a1580, 0
Adding edge:  -> 
In AddEdge: 0x560c2d8a1140, 0x560c2d8a1580, 1
Visiting BB: 
VisitInstr:   br label %31
BranchInst:   br label %31
In AddEdge: 0x560c2d8a1440, 0x560c2d8a1740, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.02 = phi i32 [ %.03, %30 ], [ %69, %68 ]
PHI:   %.02 = phi i32 [ %.03, %30 ], [ %69, %68 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.02 = phi i32 [ %.03, %30 ], [ %69, %68 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.02 = phi i32 [ %.03, %30 ], [ %69, %68 ]
VisitInstr:   %32 = add nsw i32 %.03, %23
BinaryOp:   %32 = add nsw i32 %.03, %23
Check LatCell: 0
In Meet:   %32 = add nsw i32 %.03, %23, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %32 = add nsw i32 %.03, %23
VisitInstr:   %33 = sub nsw i32 %32, 2
BinaryOp:   %33 = sub nsw i32 %32, 2
Check LatCell: 0
In Meet:   %33 = sub nsw i32 %32, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %33 = sub nsw i32 %32, 2
VisitInstr:   %34 = icmp sle i32 %.02, %33
CmpInst:   %34 = icmp sle i32 %.02, %33
Check LatCell: 0
In Meet:   %34 = icmp sle i32 %.02, %33, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %34 = icmp sle i32 %.02, %33
VisitInstr:   br i1 %34, label %35, label %70
BranchInst:   br i1 %34, label %35, label %70
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d8a16d0, 0x560c2d8a1bd0, 0
Adding edge:  -> 
In AddEdge: 0x560c2d8a16d0, 0x560c2d8a1bd0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %36
BranchInst:   br label %36
In AddEdge: 0x560c2d8a1a90, 0x560c2d8a1d90, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %71
BranchInst:   br label %71
In AddEdge: 0x560c2d8a1ae0, 0x560c2d8a4ac0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.05 = phi i32 [ %.02, %35 ], [ %66, %65 ]
PHI:   %.05 = phi i32 [ %.02, %35 ], [ %66, %65 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.05 = phi i32 [ %.02, %35 ], [ %66, %65 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.05 = phi i32 [ %.02, %35 ], [ %66, %65 ]
VisitInstr:   %37 = icmp sle i32 %.05, %25
CmpInst:   %37 = icmp sle i32 %.05, %25
Check LatCell: 0
In Meet:   %37 = icmp sle i32 %.05, %25, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %37 = icmp sle i32 %.05, %25
VisitInstr:   br i1 %37, label %38, label %67
BranchInst:   br i1 %37, label %38, label %67
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d8a1d20, 0x560c2d8a2090, 0
Adding edge:  -> 
In AddEdge: 0x560c2d8a1d20, 0x560c2d8a2090, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %39 = add nsw i32 %.07, %.05
BinaryOp:   %39 = add nsw i32 %.07, %.05
Check LatCell: 0
In Meet:   %39 = add nsw i32 %.07, %.05, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %39 = add nsw i32 %.07, %.05
VisitInstr:   %40 = sub nsw i32 %39, %.03
BinaryOp:   %40 = sub nsw i32 %39, %.03
Check LatCell: 0
In Meet:   %40 = sub nsw i32 %39, %.03, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %40 = sub nsw i32 %39, %.03
VisitInstr:   %41 = sext i32 %.05 to i64
UnaryOp:   %41 = sext i32 %.05 to i64
Check LatCell: 0
In Meet:   %41 = sext i32 %.05 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %41 = sext i32 %.05 to i64
VisitInstr:   %42 = getelementptr inbounds double, ptr %0, i64 %41
GetElementPtr:   %42 = getelementptr inbounds double, ptr %0, i64 %41
Check LatCell: 0
In Meet:   %42 = getelementptr inbounds double, ptr %0, i64 %41, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %42 = getelementptr inbounds double, ptr %0, i64 %41
VisitInstr:   %43 = load double, ptr %42, align 8
Check LatCell: 0
In Meet:   %43 = load double, ptr %42, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %43 = load double, ptr %42, align 8
VisitInstr:   %44 = sext i32 %40 to i64
UnaryOp:   %44 = sext i32 %40 to i64
Check LatCell: 0
In Meet:   %44 = sext i32 %40 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %44 = sext i32 %40 to i64
VisitInstr:   %45 = getelementptr inbounds double, ptr %0, i64 %44
GetElementPtr:   %45 = getelementptr inbounds double, ptr %0, i64 %44
Check LatCell: 0
In Meet:   %45 = getelementptr inbounds double, ptr %0, i64 %44, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %45 = getelementptr inbounds double, ptr %0, i64 %44
VisitInstr:   %46 = load double, ptr %45, align 8
Check LatCell: 0
In Meet:   %46 = load double, ptr %45, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %46 = load double, ptr %45, align 8
VisitInstr:   %47 = sext i32 %.05 to i64
UnaryOp:   %47 = sext i32 %.05 to i64
Check LatCell: 0
In Meet:   %47 = sext i32 %.05 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %47 = sext i32 %.05 to i64
VisitInstr:   %48 = getelementptr inbounds double, ptr %0, i64 %47
GetElementPtr:   %48 = getelementptr inbounds double, ptr %0, i64 %47
Check LatCell: 0
In Meet:   %48 = getelementptr inbounds double, ptr %0, i64 %47, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %48 = getelementptr inbounds double, ptr %0, i64 %47
VisitInstr:   store double %46, ptr %48, align 8
Check LatCell: 0
In Meet:   store double %46, ptr %48, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %46, ptr %48, align 8
VisitInstr:   %49 = sext i32 %40 to i64
UnaryOp:   %49 = sext i32 %40 to i64
Check LatCell: 0
In Meet:   %49 = sext i32 %40 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %49 = sext i32 %40 to i64
VisitInstr:   %50 = getelementptr inbounds double, ptr %0, i64 %49
GetElementPtr:   %50 = getelementptr inbounds double, ptr %0, i64 %49
Check LatCell: 0
In Meet:   %50 = getelementptr inbounds double, ptr %0, i64 %49, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %50 = getelementptr inbounds double, ptr %0, i64 %49
VisitInstr:   store double %43, ptr %50, align 8
Check LatCell: 0
In Meet:   store double %43, ptr %50, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %43, ptr %50, align 8
VisitInstr:   %51 = add nsw i32 %.05, 1
BinaryOp:   %51 = add nsw i32 %.05, 1
Check LatCell: 0
In Meet:   %51 = add nsw i32 %.05, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %51 = add nsw i32 %.05, 1
VisitInstr:   %52 = sext i32 %51 to i64
UnaryOp:   %52 = sext i32 %51 to i64
Check LatCell: 0
In Meet:   %52 = sext i32 %51 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %52 = sext i32 %51 to i64
VisitInstr:   %53 = getelementptr inbounds double, ptr %0, i64 %52
GetElementPtr:   %53 = getelementptr inbounds double, ptr %0, i64 %52
Check LatCell: 0
In Meet:   %53 = getelementptr inbounds double, ptr %0, i64 %52, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %53 = getelementptr inbounds double, ptr %0, i64 %52
VisitInstr:   %54 = load double, ptr %53, align 8
Check LatCell: 0
In Meet:   %54 = load double, ptr %53, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %54 = load double, ptr %53, align 8
VisitInstr:   %55 = add nsw i32 %40, 1
BinaryOp:   %55 = add nsw i32 %40, 1
Check LatCell: 0
In Meet:   %55 = add nsw i32 %40, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %55 = add nsw i32 %40, 1
VisitInstr:   %56 = sext i32 %55 to i64
UnaryOp:   %56 = sext i32 %55 to i64
Check LatCell: 0
In Meet:   %56 = sext i32 %55 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %56 = sext i32 %55 to i64
VisitInstr:   %57 = getelementptr inbounds double, ptr %0, i64 %56
GetElementPtr:   %57 = getelementptr inbounds double, ptr %0, i64 %56
Check LatCell: 0
In Meet:   %57 = getelementptr inbounds double, ptr %0, i64 %56, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %57 = getelementptr inbounds double, ptr %0, i64 %56
VisitInstr:   %58 = load double, ptr %57, align 8
Check LatCell: 0
In Meet:   %58 = load double, ptr %57, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %58 = load double, ptr %57, align 8
VisitInstr:   %59 = add nsw i32 %.05, 1
BinaryOp:   %59 = add nsw i32 %.05, 1
Check LatCell: 0
In Meet:   %59 = add nsw i32 %.05, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %59 = add nsw i32 %.05, 1
VisitInstr:   %60 = sext i32 %59 to i64
UnaryOp:   %60 = sext i32 %59 to i64
Check LatCell: 0
In Meet:   %60 = sext i32 %59 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %60 = sext i32 %59 to i64
VisitInstr:   %61 = getelementptr inbounds double, ptr %0, i64 %60
GetElementPtr:   %61 = getelementptr inbounds double, ptr %0, i64 %60
Check LatCell: 0
In Meet:   %61 = getelementptr inbounds double, ptr %0, i64 %60, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %61 = getelementptr inbounds double, ptr %0, i64 %60
VisitInstr:   store double %58, ptr %61, align 8
Check LatCell: 0
In Meet:   store double %58, ptr %61, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %58, ptr %61, align 8
VisitInstr:   %62 = add nsw i32 %40, 1
BinaryOp:   %62 = add nsw i32 %40, 1
Check LatCell: 0
In Meet:   %62 = add nsw i32 %40, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %62 = add nsw i32 %40, 1
VisitInstr:   %63 = sext i32 %62 to i64
UnaryOp:   %63 = sext i32 %62 to i64
Check LatCell: 0
In Meet:   %63 = sext i32 %62 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %63 = sext i32 %62 to i64
VisitInstr:   %64 = getelementptr inbounds double, ptr %0, i64 %63
GetElementPtr:   %64 = getelementptr inbounds double, ptr %0, i64 %63
Check LatCell: 0
In Meet:   %64 = getelementptr inbounds double, ptr %0, i64 %63, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %64 = getelementptr inbounds double, ptr %0, i64 %63
VisitInstr:   store double %54, ptr %64, align 8
Check LatCell: 0
In Meet:   store double %54, ptr %64, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %54, ptr %64, align 8
VisitInstr:   br label %65
BranchInst:   br label %65
In AddEdge: 0x560c2d8a1f50, 0x560c2d8a4420, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %68
BranchInst:   br label %68
In AddEdge: 0x560c2d8a1fa0, 0x560c2d8a47d0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %66 = add nsw i32 %.05, %24
BinaryOp:   %66 = add nsw i32 %.05, %24
Check LatCell: 0
In Meet:   %66 = add nsw i32 %.05, %24, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %66 = add nsw i32 %.05, %24
Adding SSA:   %.05 = phi i32 [ %.02, %35 ], [ %66, %65 ]
VisitInstr:   br label %36, !llvm.loop !8
BranchInst:   br label %36, !llvm.loop !8
In AddEdge: 0x560c2d8a43b0, 0x560c2d8a4690, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %69 = add nsw i32 %.02, 2
BinaryOp:   %69 = add nsw i32 %.02, 2
Check LatCell: 0
In Meet:   %69 = add nsw i32 %.02, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %69 = add nsw i32 %.02, 2
Adding SSA:   %.02 = phi i32 [ %.03, %30 ], [ %69, %68 ]
VisitInstr:   br label %31, !llvm.loop !9
BranchInst:   br label %31, !llvm.loop !9
In AddEdge: 0x560c2d8a4760, 0x560c2d8a49d0, 0
Adding edge:  -> 
Visiting SSA:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ]
VisitInstr:   %.03 = phi i32 [ 1, %17 ], [ %85, %84 ]
Visiting SSA:   %151 = sext i32 %150 to i64
VisitInstr:   %151 = sext i32 %150 to i64
UnaryOp:   %151 = sext i32 %150 to i64
Check LatCell: 1
In Meet:   %151 = sext i32 %150 to i64, Lat1: (0, 0x560c2d89f8e0), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 2 to i32)
Meet:   %151 = sext i32 %150 to i64
Adding SSA:   %152 = getelementptr inbounds double, ptr %0, i64 %151
Visiting SSA:   %147 = getelementptr inbounds double, ptr %0, i64 %146
VisitInstr:   %147 = getelementptr inbounds double, ptr %0, i64 %146
Visiting SSA:   %139 = sext i32 %138 to i64
VisitInstr:   %139 = sext i32 %138 to i64
UnaryOp:   %139 = sext i32 %138 to i64
Check LatCell: 1
In Meet:   %139 = sext i32 %138 to i64, Lat1: (0, 0x560c2d89f8e0), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 2 to i32)
Meet:   %139 = sext i32 %138 to i64
Adding SSA:   %140 = getelementptr inbounds double, ptr %0, i64 %139
Visiting SSA:   %133 = getelementptr inbounds double, ptr %0, i64 %132
VisitInstr:   %133 = getelementptr inbounds double, ptr %0, i64 %132
Visiting SSA:   %113 = sext i32 %112 to i64
VisitInstr:   %113 = sext i32 %112 to i64
UnaryOp:   %113 = sext i32 %112 to i64
Check LatCell: 1
In Meet:   %113 = sext i32 %112 to i64, Lat1: (0, 0x560c2d8a3ac0), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 3 to i32)
Meet:   %113 = sext i32 %112 to i64
Adding SSA:   %114 = getelementptr inbounds double, ptr %0, i64 %113
Visiting SSA:   %116 = add nsw i32 %112, 1
VisitInstr:   %116 = add nsw i32 %112, 1
BinaryOp:   %116 = add nsw i32 %112, 1
Check LatCell: 1
In Meet:   %116 = add nsw i32 %112, 1, Lat1: (0, 0x560c2d8a9700), Lat2: (-1, 0x0)
Lat1.second: i32 4
Meet:   %116 = add nsw i32 %112, 1
Adding SSA:   %117 = sext i32 %116 to i64
Visiting SSA:   %123 = add nsw i32 %112, 1
VisitInstr:   %123 = add nsw i32 %112, 1
BinaryOp:   %123 = add nsw i32 %112, 1
Check LatCell: 1
In Meet:   %123 = add nsw i32 %112, 1, Lat1: (0, 0x560c2d8a9700), Lat2: (-1, 0x0)
Lat1.second: i32 4
Meet:   %123 = add nsw i32 %112, 1
Adding SSA:   %124 = sext i32 %123 to i64
Visiting SSA:   %127 = sext i32 %112 to i64
VisitInstr:   %127 = sext i32 %112 to i64
UnaryOp:   %127 = sext i32 %112 to i64
Check LatCell: 1
In Meet:   %127 = sext i32 %112 to i64, Lat1: (0, 0x560c2d8a3ac0), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 3 to i32)
Meet:   %127 = sext i32 %112 to i64
Adding SSA:   %128 = getelementptr inbounds double, ptr %0, i64 %127
Visiting SSA:   %136 = sext i32 %112 to i64
VisitInstr:   %136 = sext i32 %112 to i64
UnaryOp:   %136 = sext i32 %112 to i64
Check LatCell: 1
In Meet:   %136 = sext i32 %112 to i64, Lat1: (0, 0x560c2d8a3ac0), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 3 to i32)
Meet:   %136 = sext i32 %112 to i64
Adding SSA:   %137 = getelementptr inbounds double, ptr %0, i64 %136
Visiting SSA:   %143 = add nsw i32 %112, 1
VisitInstr:   %143 = add nsw i32 %112, 1
BinaryOp:   %143 = add nsw i32 %112, 1
Check LatCell: 1
In Meet:   %143 = add nsw i32 %112, 1, Lat1: (0, 0x560c2d8a9700), Lat2: (-1, 0x0)
Lat1.second: i32 4
Meet:   %143 = add nsw i32 %112, 1
Adding SSA:   %144 = sext i32 %143 to i64
Visiting SSA:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
VisitInstr:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
Visiting SSA:   br i1 %107, label %108, label %160
VisitInstr:   br i1 %107, label %108, label %160
BranchInst:   br i1 %107, label %108, label %160
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d8a77a0, 0x560c2d8a7ca0, 0
In AddEdge: 0x560c2d8a77a0, 0x560c2d8a7ca0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %161 = fmul double %.01, %100
BinaryOp:   %161 = fmul double %.01, %100
Check LatCell: 0
In Meet:   %161 = fmul double %.01, %100, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %161 = fmul double %.01, %100
VisitInstr:   %162 = fneg double %161
UnaryOp:   %162 = fneg double %161
Check LatCell: 0
In Meet:   %162 = fneg double %161, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %162 = fneg double %161
VisitInstr:   %163 = call double @llvm.fmuladd.f64(double %.0, double %99, double %162)
Check LatCell: 0
In Meet:   %163 = call double @llvm.fmuladd.f64(double %.0, double %99, double %162), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %163 = call double @llvm.fmuladd.f64(double %.0, double %99, double %162)
VisitInstr:   %164 = fadd double %163, %.0
BinaryOp:   %164 = fadd double %163, %.0
Check LatCell: 0
In Meet:   %164 = fadd double %163, %.0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %164 = fadd double %163, %.0
Adding SSA:   %.0 = phi double [ 1.000000e+00, %89 ], [ %164, %168 ]
VisitInstr:   %165 = fmul double %.0, %100
BinaryOp:   %165 = fmul double %.0, %100
Check LatCell: 0
In Meet:   %165 = fmul double %.0, %100, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %165 = fmul double %.0, %100
VisitInstr:   %166 = call double @llvm.fmuladd.f64(double %.01, double %99, double %165)
Check LatCell: 0
In Meet:   %166 = call double @llvm.fmuladd.f64(double %.01, double %99, double %165), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %166 = call double @llvm.fmuladd.f64(double %.01, double %99, double %165)
VisitInstr:   %167 = fadd double %166, %.01
BinaryOp:   %167 = fadd double %166, %.01
Check LatCell: 0
In Meet:   %167 = fadd double %166, %.01, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %167 = fadd double %166, %.01
Adding SSA:   %.01 = phi double [ 0.000000e+00, %89 ], [ %167, %168 ]
VisitInstr:   br label %168
BranchInst:   br label %168
In AddEdge: 0x560c2d8a7bb0, 0x560c2d8ac5f0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %169 = add nsw i32 %.16, %23
BinaryOp:   %169 = add nsw i32 %.16, %23
Check LatCell: 0
In Meet:   %169 = add nsw i32 %.16, %23, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %169 = add nsw i32 %.16, %23
Adding SSA:   %.16 = phi i32 [ 1, %89 ], [ %169, %168 ]
VisitInstr:   br label %101, !llvm.loop !14
BranchInst:   br label %101, !llvm.loop !14
In AddEdge: 0x560c2d8ac580, 0x560c2d8ac860, 0
Adding edge:  -> 
Visiting SSA:   %112 = add nsw i32 %.14, %.014
VisitInstr:   %112 = add nsw i32 %.14, %.014
Visiting SSA:   %102 = icmp sle i32 %.16, %.014
VisitInstr:   %102 = icmp sle i32 %.16, %.014
CmpInst:   %102 = icmp sle i32 %.16, %.014
Check LatCell: 1
In Meet:   %102 = icmp sle i32 %.16, %.014, Lat1: (0, 0x560c2d88edb0), Lat2: (-1, 0x0)
Lat1.second: i1 true
Meet:   %102 = icmp sle i32 %.16, %.014
Adding SSA:   br i1 %102, label %103, label %170
Visiting SSA:   %90 = shl i32 %.014, 1
VisitInstr:   %90 = shl i32 %.014, 1
BinaryOp:   %90 = shl i32 %.014, 1
Check LatCell: 1
In Meet:   %90 = shl i32 %.014, 1, Lat1: (0, 0x560c2d8a9700), Lat2: (-1, 0x0)
Lat1.second: i32 4
Meet:   %90 = shl i32 %.014, 1
Adding SSA:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
Adding SSA:   %93 = sdiv i32 %90, %23
Adding SSA:   %156 = add nsw i32 %.14, %90
Visiting SSA:   %88 = icmp slt i32 %.014, %24
VisitInstr:   %88 = icmp slt i32 %.014, %24
Visiting SSA:   %94 = sitofp i32 %93 to double
VisitInstr:   %94 = sitofp i32 %93 to double
UnaryOp:   %94 = sitofp i32 %93 to double
Check LatCell: 1
In Meet:   %94 = sitofp i32 %93 to double, Lat1: (0, 0x560c2d8a2cb0), Lat2: (-1, 0x0)
Lat1.second: i32 sitofp (i32 2 to i32)
Meet:   %94 = sitofp i32 %93 to double
Adding SSA:   %95 = fdiv double %92, %94
Visiting SSA:   %106 = sub nsw i32 %105, 2
VisitInstr:   %106 = sub nsw i32 %105, 2
BinaryOp:   %106 = sub nsw i32 %105, 2
Check LatCell: 1
In Meet:   %106 = sub nsw i32 %105, 2, Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %106 = sub nsw i32 %105, 2
Adding SSA:   %107 = icmp sle i32 %.1, %106
Visiting SSA:   %.05 = phi i32 [ %.02, %35 ], [ %66, %65 ]
VisitInstr:   %.05 = phi i32 [ %.02, %35 ], [ %66, %65 ]
Visiting SSA:   %.02 = phi i32 [ %.03, %30 ], [ %69, %68 ]
VisitInstr:   %.02 = phi i32 [ %.03, %30 ], [ %69, %68 ]
Visiting SSA:   %152 = getelementptr inbounds double, ptr %0, i64 %151
VisitInstr:   %152 = getelementptr inbounds double, ptr %0, i64 %151
Visiting SSA:   %140 = getelementptr inbounds double, ptr %0, i64 %139
VisitInstr:   %140 = getelementptr inbounds double, ptr %0, i64 %139
Visiting SSA:   %114 = getelementptr inbounds double, ptr %0, i64 %113
VisitInstr:   %114 = getelementptr inbounds double, ptr %0, i64 %113
Visiting SSA:   %117 = sext i32 %116 to i64
VisitInstr:   %117 = sext i32 %116 to i64
UnaryOp:   %117 = sext i32 %116 to i64
Check LatCell: 1
In Meet:   %117 = sext i32 %116 to i64, Lat1: (0, 0x560c2d89fb30), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 4 to i32)
Meet:   %117 = sext i32 %116 to i64
Adding SSA:   %118 = getelementptr inbounds double, ptr %0, i64 %117
Visiting SSA:   %124 = sext i32 %123 to i64
VisitInstr:   %124 = sext i32 %123 to i64
UnaryOp:   %124 = sext i32 %123 to i64
Check LatCell: 1
In Meet:   %124 = sext i32 %123 to i64, Lat1: (0, 0x560c2d89fb30), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 4 to i32)
Meet:   %124 = sext i32 %123 to i64
Adding SSA:   %125 = getelementptr inbounds double, ptr %0, i64 %124
Visiting SSA:   %128 = getelementptr inbounds double, ptr %0, i64 %127
VisitInstr:   %128 = getelementptr inbounds double, ptr %0, i64 %127
Visiting SSA:   %137 = getelementptr inbounds double, ptr %0, i64 %136
VisitInstr:   %137 = getelementptr inbounds double, ptr %0, i64 %136
Visiting SSA:   %144 = sext i32 %143 to i64
VisitInstr:   %144 = sext i32 %143 to i64
UnaryOp:   %144 = sext i32 %143 to i64
Check LatCell: 1
In Meet:   %144 = sext i32 %143 to i64, Lat1: (0, 0x560c2d89fb30), Lat2: (-1, 0x0)
Lat1.second: i32 sext (i32 4 to i32)
Meet:   %144 = sext i32 %143 to i64
Adding SSA:   %145 = getelementptr inbounds double, ptr %0, i64 %144
Visiting SSA:   %.0 = phi double [ 1.000000e+00, %89 ], [ %164, %168 ]
VisitInstr:   %.0 = phi double [ 1.000000e+00, %89 ], [ %164, %168 ]
PHI:   %.0 = phi double [ 1.000000e+00, %89 ], [ %164, %168 ]
PHI LatOp: 0, 0x560c2d8a70b0
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.0 = phi double [ 1.000000e+00, %89 ], [ %164, %168 ], Lat1: (0, 0x560c2d8a70b0), Lat2: (-1, 0x0)
Lat1.second: double 1.000000e+00
Meet:   %.0 = phi double [ 1.000000e+00, %89 ], [ %164, %168 ]
Adding SSA:   %165 = fmul double %.0, %100
Adding SSA:   %164 = fadd double %163, %.0
Adding SSA:   %163 = call double @llvm.fmuladd.f64(double %.0, double %99, double %162)
Adding SSA:   %131 = call double @llvm.fmuladd.f64(double %.0, double %126, double %130)
Adding SSA:   %122 = call double @llvm.fmuladd.f64(double %.0, double %115, double %121)
Visiting SSA:   %.01 = phi double [ 0.000000e+00, %89 ], [ %167, %168 ]
VisitInstr:   %.01 = phi double [ 0.000000e+00, %89 ], [ %167, %168 ]
PHI:   %.01 = phi double [ 0.000000e+00, %89 ], [ %167, %168 ]
PHI LatOp: 0, 0x560c2d88f570
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.01 = phi double [ 0.000000e+00, %89 ], [ %167, %168 ], Lat1: (0, 0x560c2d88f570), Lat2: (-1, 0x0)
Lat1.second: double 0.000000e+00
Meet:   %.01 = phi double [ 0.000000e+00, %89 ], [ %167, %168 ]
Adding SSA:   %167 = fadd double %166, %.01
Adding SSA:   %166 = call double @llvm.fmuladd.f64(double %.01, double %99, double %165)
Adding SSA:   %161 = fmul double %.01, %100
Adding SSA:   %130 = fmul double %.01, %129
Adding SSA:   %120 = fmul double %.01, %119
Visiting SSA:   %.16 = phi i32 [ 1, %89 ], [ %169, %168 ]
VisitInstr:   %.16 = phi i32 [ 1, %89 ], [ %169, %168 ]
PHI:   %.16 = phi i32 [ 1, %89 ], [ %169, %168 ]
PHI LatOp: 0, 0x560c2d888a80
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.16 = phi i32 [ 1, %89 ], [ %169, %168 ], Lat1: (0, 0x560c2d888a80), Lat2: (-1, 0x0)
Lat1.second: i32 1
Meet:   %.16 = phi i32 [ 1, %89 ], [ %169, %168 ]
Adding SSA:   %169 = add nsw i32 %.16, %23
Adding SSA:   %105 = add nsw i32 %.16, %23
Adding SSA:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
Adding SSA:   %102 = icmp sle i32 %.16, %.014
Visiting SSA:   br i1 %102, label %103, label %170
VisitInstr:   br i1 %102, label %103, label %170
BranchInst:   br i1 %102, label %103, label %170
In BranchInst: -1, 0x0
In AddEdge: 0x560c2d8a72a0, 0x560c2d8a7650, 0
In AddEdge: 0x560c2d8a72a0, 0x560c2d8a7650, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %87, !llvm.loop !15
BranchInst:   br label %87, !llvm.loop !15
In AddEdge: 0x560c2d8a7560, 0x560c2d8acad0, 0
Adding edge:  -> 
Visiting SSA:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
VisitInstr:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
Visiting SSA:   %93 = sdiv i32 %90, %23
VisitInstr:   %93 = sdiv i32 %90, %23
Visiting SSA:   %156 = add nsw i32 %.14, %90
VisitInstr:   %156 = add nsw i32 %.14, %90
Visiting SSA:   %95 = fdiv double %92, %94
VisitInstr:   %95 = fdiv double %92, %94
Visiting SSA:   %107 = icmp sle i32 %.1, %106
VisitInstr:   %107 = icmp sle i32 %.1, %106
Visiting SSA:   %118 = getelementptr inbounds double, ptr %0, i64 %117
VisitInstr:   %118 = getelementptr inbounds double, ptr %0, i64 %117
Visiting SSA:   %125 = getelementptr inbounds double, ptr %0, i64 %124
VisitInstr:   %125 = getelementptr inbounds double, ptr %0, i64 %124
Visiting SSA:   %145 = getelementptr inbounds double, ptr %0, i64 %144
VisitInstr:   %145 = getelementptr inbounds double, ptr %0, i64 %144
Visiting SSA:   %165 = fmul double %.0, %100
VisitInstr:   %165 = fmul double %.0, %100
Visiting SSA:   %164 = fadd double %163, %.0
VisitInstr:   %164 = fadd double %163, %.0
Visiting SSA:   %163 = call double @llvm.fmuladd.f64(double %.0, double %99, double %162)
VisitInstr:   %163 = call double @llvm.fmuladd.f64(double %.0, double %99, double %162)
Visiting SSA:   %131 = call double @llvm.fmuladd.f64(double %.0, double %126, double %130)
VisitInstr:   %131 = call double @llvm.fmuladd.f64(double %.0, double %126, double %130)
Visiting SSA:   %122 = call double @llvm.fmuladd.f64(double %.0, double %115, double %121)
VisitInstr:   %122 = call double @llvm.fmuladd.f64(double %.0, double %115, double %121)
Visiting SSA:   %167 = fadd double %166, %.01
VisitInstr:   %167 = fadd double %166, %.01
Visiting SSA:   %166 = call double @llvm.fmuladd.f64(double %.01, double %99, double %165)
VisitInstr:   %166 = call double @llvm.fmuladd.f64(double %.01, double %99, double %165)
Visiting SSA:   %161 = fmul double %.01, %100
VisitInstr:   %161 = fmul double %.01, %100
Visiting SSA:   %130 = fmul double %.01, %129
VisitInstr:   %130 = fmul double %.01, %129
Visiting SSA:   %120 = fmul double %.01, %119
VisitInstr:   %120 = fmul double %.01, %119
Visiting SSA:   %169 = add nsw i32 %.16, %23
VisitInstr:   %169 = add nsw i32 %.16, %23
Visiting SSA:   %105 = add nsw i32 %.16, %23
VisitInstr:   %105 = add nsw i32 %.16, %23
Visiting SSA:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
VisitInstr:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
Visiting SSA:   %102 = icmp sle i32 %.16, %.014
VisitInstr:   %102 = icmp sle i32 %.16, %.014
UnitSCCP: 14 instructions removed, 96 basic blocks unreachable, 24 instructions simplified
Call parameter type does not match function signature!
i32 mul (i32 add (i32 sext (i32 65536 to i32), i64 1), i64 16)
 i64  %1 = call noalias ptr @malloc(i32 noundef mul (i32 add (i32 sext (i32 65536 to i32), i64 1), i64 16)) #7
Call parameter type does not match function signature!
i32 mul (i32 add (i32 sext (i32 65536 to i32), i64 1), i64 16)
 i64  call void @llvm.memset.p0.i64(ptr align 8 %1, i8 0, i32 mul (i32 add (i32 sext (i32 65536 to i32), i64 1), i64 16), i1 false)
LLVM ERROR: Broken module found, compilation aborted!
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: opt-15 -load-pass-plugin=../build/libUnitProject.so -passes=mem2reg,unit-sccp -S -o ffbench.ll
 #0 0x00007f8a3f1853b1 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/usr/lib/llvm-15/bin/../lib/libLLVM-15.so.1+0xf043b1)
 #1 0x00007f8a3f1830fe llvm::sys::RunSignalHandlers() (/usr/lib/llvm-15/bin/../lib/libLLVM-15.so.1+0xf020fe)
 #2 0x00007f8a3f1858d6 (/usr/lib/llvm-15/bin/../lib/libLLVM-15.so.1+0xf048d6)
 #3 0x00007f8a3dd60520 (/lib/x86_64-linux-gnu/libc.so.6+0x42520)
 #4 0x00007f8a3ddb49fc __pthread_kill_implementation ./nptl/pthread_kill.c:44:76
 #5 0x00007f8a3ddb49fc __pthread_kill_internal ./nptl/pthread_kill.c:78:10
 #6 0x00007f8a3ddb49fc pthread_kill ./nptl/pthread_kill.c:89:10
 #7 0x00007f8a3dd60476 gsignal ./signal/../sysdeps/posix/raise.c:27:6
 #8 0x00007f8a3dd467f3 abort ./stdlib/abort.c:81:7
 #9 0x00007f8a3f0ba3db llvm::report_fatal_error(llvm::Twine const&, bool) (/usr/lib/llvm-15/bin/../lib/libLLVM-15.so.1+0xe393db)
#10 0x00007f8a3f0ba226 (/usr/lib/llvm-15/bin/../lib/libLLVM-15.so.1+0xe39226)
#11 0x00007f8a3f32557c (/usr/lib/llvm-15/bin/../lib/libLLVM-15.so.1+0x10a457c)
#12 0x0000560c2cc204ed (/usr/lib/llvm-15/bin/opt+0x2b4ed)
#13 0x00007f8a3f2f6129 llvm::PassManager<llvm::Module, llvm::AnalysisManager<llvm::Module>>::run(llvm::Module&, llvm::AnalysisManager<llvm::Module>&) (/usr/lib/llvm-15/bin/../lib/libLLVM-15.so.1+0x1075129)
#14 0x0000560c2cc17f37 llvm::runPassPipeline(llvm::StringRef, llvm::Module&, llvm::TargetMachine*, llvm::TargetLibraryInfoImpl*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::ToolOutputFile*, llvm::StringRef, llvm::ArrayRef<llvm::StringRef>, llvm::ArrayRef<llvm::PassPlugin>, llvm::opt_tool::OutputKind, llvm::opt_tool::VerifierKind, bool, bool, bool, bool, bool, bool) (/usr/lib/llvm-15/bin/opt+0x22f37)
#15 0x0000560c2cc29c04 main (/usr/lib/llvm-15/bin/opt+0x34c04)
#16 0x00007f8a3dd47d90 __libc_start_call_main ./csu/../sysdeps/nptl/libc_start_call_main.h:58:16
#17 0x00007f8a3dd47e40 call_init ./csu/../csu/libc-start.c:128:20
#18 0x00007f8a3dd47e40 __libc_start_main ./csu/../csu/libc-start.c:379:5
#19 0x0000560c2cc10905 _start (/usr/lib/llvm-15/bin/opt+0x1b905)
./scripts/run_test.sh: line 12: 42781 Done                    clang-15 $1 -c -O0 -Xclang -disable-O0-optnone -emit-llvm -S -o -
     42782 Aborted                 (core dumped) | opt-15 -load-pass-plugin=../build/libUnitProject.so -passes="mem2reg,unit-sccp" -S -o ${1%.*}.ll
----------------------------------------
Running licm only: ffbench.c
ffbench.c:157:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]
static void fourn(data, nn, ndim, isign)
            ^
1 warning generated.
UnitLICM running on main
******************************************************
UnitLoopAnalysis running on main
[LoopLoopAnalysis] parent loop header is:   %.01 = phi i32 [ 0, %11 ], [ %35, %34 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
[LoopLoopAnalysis] parent loop header is:   %.011 = phi double [ 1.000000e+10, %42 ], [ %60, %76 ]
[LoopLoopAnalysis] parent loop header is:   %.06 = phi i32 [ 0, %78 ], [ %.17, %115 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.17 = phi i32 [ %.06, %83 ], [ %.28, %112 ]
[LoopLoopAnalysis] parent loop header is:   %.17 = phi i32 [ %.06, %83 ], [ %.28, %112 ]
[LoopLoopAnalysis] parent loop header is:   %.1 = phi i32 [ 0, %36 ], [ %41, %40 ]
[LoopLoopAnalysis] parent loop header is:   %.02 = phi i32 [ 0, %14 ], [ %32, %31 ]
Instruction to be moved:   %18 = and i32 %.01, 15
Instruction to be moved:   %19 = icmp eq i32 %15, 8
Instruction to be moved:   %24 = mul nsw i32 256, %.01
Instruction to be moved:   %87 = mul nsw i32 256, %.3
Instruction to be moved:   %97 = and i32 %.3, 15
Instruction to be moved:   %98 = icmp eq i32 %85, 8
Instruction to be moved:   %109 = load ptr, ptr @stderr, align 8
Instruction to be moved:   %87 = load ptr, ptr @stderr, align 8
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 2
[UnitLICM]: NumComputeHoisted: 6
[UnitLICM]: Total: 8
UnitLICM running on fourn
******************************************************
UnitLoopAnalysis running on fourn
[LoopLoopAnalysis] parent loop header is:   %.112 = phi i32 [ %2, %14 ], [ %174, %173 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.07 = phi i32 [ 1, %17 ], [ %83, %84 ]
[LoopLoopAnalysis] parent loop header is:   %.07 = phi i32 [ 1, %17 ], [ %83, %84 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.013 = phi i32 [ %72, %71 ], [ %81, %79 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.02 = phi i32 [ %.03, %30 ], [ %69, %68 ]
[LoopLoopAnalysis] parent loop header is:   %.014 = phi i32 [ %23, %86 ], [ %90, %170 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.16 = phi i32 [ 1, %89 ], [ %169, %168 ]
[LoopLoopAnalysis] parent loop header is:   %.011 = phi i32 [ 1, %4 ], [ %13, %12 ]
[LoopLoopAnalysis] parent loop header is:   %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
[LoopLoopAnalysis] parent loop header is:   %.14 = phi i32 [ %.1, %108 ], [ %156, %155 ]
[LoopLoopAnalysis] parent loop header is:   %.013 = phi i32 [ %72, %71 ], [ %81, %79 ]
[LoopLoopAnalysis] parent loop header is:   %.16 = phi i32 [ 1, %89 ], [ %169, %168 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.1 = phi i32 [ %.16, %103 ], [ %159, %158 ]
[LoopLoopAnalysis] parent loop header is:   %.02 = phi i32 [ %.03, %30 ], [ %69, %68 ]
[LoopLoopAnalysis] It has child loop header : ^-  %.05 = phi i32 [ %.02, %35 ], [ %66, %65 ]
[LoopLoopAnalysis] parent loop header is:   %.05 = phi i32 [ %.02, %35 ], [ %66, %65 ]
Instruction to be moved:   %105 = add nsw i32 %.16, %23
Instruction to be moved:   %106 = sub nsw i32 %104, 2
Instruction to be moved:   %91 = sitofp i32 %3 to double
Instruction to be moved:   %92 = fmul double %87, 0x401921FB54442D1C
Instruction to be moved:   %32 = add nsw i32 %.03, %23
Instruction to be moved:   %33 = sub nsw i32 %31, 2
Instruction to be moved:   %72 = ashr i32 %24, 1
Instruction to be moved:   %87 = sitofp i32 %3 to double
Instruction to be moved:   %88 = fmul double %15, 0x401921FB54442D1C
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 2
[UnitLICM]: NumComputeHoisted: 13
[UnitLICM]: Total: 17
----------------------------------------
Running sccp and licm: ffbench.c
ffbench.c:157:13: warning: a function definition without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]
static void fourn(data, nn, ndim, isign)
            ^
1 warning generated.
UnitLICM running on main
******************************************************
UnitLoopAnalysis running on main
[LoopLoopAnalysis] parent loop header is:   %42 = load i32, ptr %2, align 4
[LoopLoopAnalysis] It has child loop header : ^-  %47 = load i32, ptr %3, align 4
[LoopLoopAnalysis] parent loop header is:   %90 = load i32, ptr %2, align 4
[LoopLoopAnalysis] parent loop header is:   %158 = load i32, ptr %2, align 4
[LoopLoopAnalysis] It has child loop header : ^-  %163 = load i32, ptr %3, align 4
[LoopLoopAnalysis] parent loop header is:   %163 = load i32, ptr %3, align 4
[LoopLoopAnalysis] parent loop header is:   %79 = load i32, ptr %2, align 4
[LoopLoopAnalysis] parent loop header is:   %47 = load i32, ptr %3, align 4
Instruction to be moved:   %47 = load i32, ptr %3, align 4
Instruction to be moved:   %48 = load i32, ptr %8, align 4
Instruction to be moved:   %49 = icmp slt i32 %46, %47
Instruction to be moved:   %51 = load i32, ptr %2, align 4
Instruction to be moved:   %52 = and i32 %49, 15
Instruction to be moved:   %53 = icmp eq i32 %50, 8
Instruction to be moved:   %59 = load ptr, ptr %9, align 8
Instruction to be moved:   %60 = load i32, ptr %8, align 4
Instruction to be moved:   %61 = load i32, ptr %2, align 4
Instruction to be moved:   %62 = mul nsw i32 %53, %54
Instruction to be moved:   %63 = load i32, ptr %3, align 4
Instruction to be moved:   %64 = add nsw i32 %55, %56
Instruction to be moved:   %65 = mul nsw i32 %57, 2
Instruction to be moved:   %66 = add nsw i32 1, %58
Instruction to be moved:   %67 = sext i32 %59 to i64
Instruction to be moved:   %68 = getelementptr inbounds double, ptr %52, i64 %60
Instruction to be moved:   %65 = load i32, ptr %3, align 4
Instruction to be moved:   %66 = and i32 %62, 15
Instruction to be moved:   %67 = icmp eq i32 %63, 8
Instruction to be moved:   %71 = load i32, ptr %3, align 4
Instruction to be moved:   %72 = add nsw i32 %65, 1
Instruction to be moved:   %65 = load i32, ptr %3, align 4
Instruction to be moved:   %65 = add nsw i32 %66, 1
Instruction to be moved:   %42 = load i32, ptr %2, align 4
Instruction to be moved:   %43 = load i32, ptr %8, align 4
Instruction to be moved:   %44 = icmp slt i32 %41, %42
Instruction to be moved:   %46 = load i32, ptr %3, align 4
Instruction to be moved:   %47 = load i32, ptr %8, align 4
Instruction to be moved:   %48 = icmp slt i32 %44, %45
Instruction to be moved:   %49 = load i32, ptr %2, align 4
Instruction to be moved:   %50 = and i32 %47, 15
Instruction to be moved:   %51 = icmp eq i32 %48, 8
Instruction to be moved:   %52 = load ptr, ptr %9, align 8
Instruction to be moved:   %53 = load i32, ptr %8, align 4
Instruction to be moved:   %54 = load i32, ptr %2, align 4
Instruction to be moved:   %55 = mul nsw i32 %51, %52
Instruction to be moved:   %56 = load i32, ptr %3, align 4
Instruction to be moved:   %57 = add nsw i32 %53, %54
Instruction to be moved:   %58 = mul nsw i32 %55, 2
Instruction to be moved:   %59 = add nsw i32 1, %56
Instruction to be moved:   %60 = sext i32 %57 to i64
Instruction to be moved:   %61 = getelementptr inbounds double, ptr %50, i64 %58
Instruction to be moved:   %62 = load i32, ptr %3, align 4
Instruction to be moved:   %63 = and i32 %60, 15
Instruction to be moved:   %64 = icmp eq i32 %61, 8
Instruction to be moved:   %65 = load i32, ptr %3, align 4
Instruction to be moved:   %66 = add nsw i32 %63, 1
Instruction to be moved:   %75 = load i32, ptr %2, align 4
Instruction to be moved:   %76 = add nsw i32 %65, 1
Instruction to be moved:   %90 = load i32, ptr %2, align 4
Instruction to be moved:   %91 = sext i32 %89 to i64
Instruction to be moved:   %92 = load i64, ptr %10, align 8
Instruction to be moved:   %93 = icmp sle i64 %90, %91
Instruction to be moved:   %95 = load ptr, ptr %9, align 8
Instruction to be moved:   %96 = load i32, ptr %2, align 4
Instruction to be moved:   %97 = sext i32 %94 to i64
Instruction to be moved:   %98 = getelementptr inbounds double, ptr %93, i64 %95
Instruction to be moved:   %100 = load ptr, ptr %9, align 8
Instruction to be moved:   %101 = load i32, ptr %2, align 4
Instruction to be moved:   %102 = add nsw i32 %98, 1
Instruction to be moved:   %103 = sext i32 %99 to i64
Instruction to be moved:   %104 = getelementptr inbounds double, ptr %97, i64 %100
Instruction to be moved:   %106 = load double, ptr %18, align 8
Instruction to be moved:   %107 = load double, ptr %20, align 8
Instruction to be moved:   %108 = fadd double %103, %102
Instruction to be moved:   %109 = load double, ptr %19, align 8
Instruction to be moved:   %110 = load double, ptr %21, align 8
Instruction to be moved:   %111 = fadd double %106, %105
Instruction to be moved:   %112 = load double, ptr %18, align 8
Instruction to be moved:   %113 = load double, ptr %14, align 8
Instruction to be moved:   %114 = fcmp ole double %108, %109
Instruction to be moved:   %116 = load double, ptr %18, align 8
Instruction to be moved:   %118 = load double, ptr %14, align 8
Instruction to be moved:   %121 = load double, ptr %18, align 8
Instruction to be moved:   %122 = load double, ptr %15, align 8
Instruction to be moved:   %123 = fcmp ogt double %113, %114
Instruction to be moved:   %113 = load double, ptr %18, align 8
Instruction to be moved:   %113 = load double, ptr %15, align 8
Instruction to be moved:   %113 = fcmp ogt double %114, %115
Instruction to be moved:   %125 = load double, ptr %18, align 8
Instruction to be moved:   %127 = load double, ptr %15, align 8
Instruction to be moved:   %116 = load double, ptr %18, align 8
Instruction to be moved:   %116 = load double, ptr %15, align 8
Instruction to be moved:   %130 = load double, ptr %19, align 8
Instruction to be moved:   %131 = load double, ptr %16, align 8
Instruction to be moved:   %132 = fcmp ole double %118, %119
Instruction to be moved:   %118 = load double, ptr %19, align 8
Instruction to be moved:   %118 = load double, ptr %16, align 8
Instruction to be moved:   %118 = fcmp ole double %119, %120
Instruction to be moved:   %118 = load double, ptr %19, align 8
Instruction to be moved:   %118 = load double, ptr %16, align 8
Instruction to be moved:   %118 = fcmp ole double %119, %120
Instruction to be moved:   %118 = load double, ptr %19, align 8
Instruction to be moved:   %118 = load double, ptr %16, align 8
Instruction to be moved:   %118 = fcmp ole double %119, %120
Instruction to be moved:   %134 = load double, ptr %19, align 8
Instruction to be moved:   %136 = load double, ptr %16, align 8
Instruction to be moved:   %121 = load double, ptr %19, align 8
Instruction to be moved:   %121 = load double, ptr %16, align 8
Instruction to be moved:   %121 = load double, ptr %19, align 8
Instruction to be moved:   %121 = load double, ptr %16, align 8
Instruction to be moved:   %121 = load double, ptr %19, align 8
Instruction to be moved:   %121 = load double, ptr %16, align 8
Instruction to be moved:   %139 = load double, ptr %19, align 8
Instruction to be moved:   %140 = load double, ptr %17, align 8
Instruction to be moved:   %141 = fcmp ogt double %123, %124
Instruction to be moved:   %123 = load double, ptr %19, align 8
Instruction to be moved:   %123 = load double, ptr %17, align 8
Instruction to be moved:   %123 = fcmp ogt double %124, %125
Instruction to be moved:   %123 = load double, ptr %19, align 8
Instruction to be moved:   %123 = load double, ptr %17, align 8
Instruction to be moved:   %123 = fcmp ogt double %124, %125
Instruction to be moved:   %123 = load double, ptr %19, align 8
Instruction to be moved:   %123 = load double, ptr %17, align 8
Instruction to be moved:   %123 = fcmp ogt double %124, %125
Instruction to be moved:   %123 = load double, ptr %19, align 8
Instruction to be moved:   %123 = load double, ptr %17, align 8
Instruction to be moved:   %123 = fcmp ogt double %124, %125
Instruction to be moved:   %123 = load double, ptr %19, align 8
Instruction to be moved:   %123 = load double, ptr %17, align 8
Instruction to be moved:   %123 = fcmp ogt double %124, %125
Instruction to be moved:   %123 = load double, ptr %19, align 8
Instruction to be moved:   %123 = load double, ptr %17, align 8
Instruction to be moved:   %123 = fcmp ogt double %124, %125
Instruction to be moved:   %123 = load double, ptr %19, align 8
Instruction to be moved:   %123 = load double, ptr %17, align 8
Instruction to be moved:   %123 = fcmp ogt double %124, %125
Instruction to be moved:   %143 = load double, ptr %19, align 8
Instruction to be moved:   %145 = load double, ptr %17, align 8
Instruction to be moved:   %126 = load double, ptr %19, align 8
Instruction to be moved:   %126 = load double, ptr %17, align 8
Instruction to be moved:   %126 = load double, ptr %19, align 8
Instruction to be moved:   %126 = load double, ptr %17, align 8
Instruction to be moved:   %126 = load double, ptr %19, align 8
Instruction to be moved:   %126 = load double, ptr %17, align 8
Instruction to be moved:   %126 = load double, ptr %19, align 8
Instruction to be moved:   %126 = load double, ptr %17, align 8
Instruction to be moved:   %126 = load double, ptr %19, align 8
Instruction to be moved:   %126 = load double, ptr %17, align 8
Instruction to be moved:   %126 = load double, ptr %19, align 8
Instruction to be moved:   %126 = load double, ptr %17, align 8
Instruction to be moved:   %126 = load double, ptr %19, align 8
Instruction to be moved:   %126 = load double, ptr %17, align 8
Instruction to be moved:   %149 = load i32, ptr %2, align 4
Instruction to be moved:   %150 = add nsw i32 %128, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %128 = load i32, ptr %2, align 4
Instruction to be moved:   %128 = add nsw i32 %129, 2
Instruction to be moved:   %163 = load i32, ptr %3, align 4
Instruction to be moved:   %164 = load i32, ptr %8, align 4
Instruction to be moved:   %165 = icmp slt i32 %162, %163
Instruction to be moved:   %167 = load ptr, ptr %9, align 8
Instruction to be moved:   %168 = load i32, ptr %8, align 4
Instruction to be moved:   %169 = load i32, ptr %2, align 4
Instruction to be moved:   %170 = mul nsw i32 %166, %167
Instruction to be moved:   %171 = load i32, ptr %3, align 4
Instruction to be moved:   %172 = add nsw i32 %168, %169
Instruction to be moved:   %173 = mul nsw i32 %170, 2
Instruction to be moved:   %174 = add nsw i32 1, %171
Instruction to be moved:   %175 = sext i32 %172 to i64
Instruction to be moved:   %176 = getelementptr inbounds double, ptr %165, i64 %173
Instruction to be moved:   %178 = load double, ptr %12, align 8
Instruction to be moved:   %180 = load double, ptr %13, align 8
Instruction to be moved:   %183 = load i32, ptr %2, align 4
Instruction to be moved:   %184 = and i32 %177, 15
Instruction to be moved:   %185 = icmp eq i32 %178, 8
Instruction to be moved:   %194 = load i32, ptr %4, align 4
Instruction to be moved:   %195 = load i32, ptr %5, align 4
Instruction to be moved:   %196 = icmp ne i32 %180, %181
Instruction to be moved:   %190 = load i32, ptr %3, align 4
Instruction to be moved:   %191 = and i32 %183, 15
Instruction to be moved:   %192 = icmp eq i32 %184, 8
Instruction to be moved:   %198 = load i32, ptr %6, align 4
Instruction to be moved:   %199 = add nsw i32 %186, 1
Instruction to be moved:   %200 = load ptr, ptr @stderr, align 8
Instruction to be moved:   %201 = load i32, ptr %2, align 4
Instruction to be moved:   %202 = load i32, ptr %3, align 4
Instruction to be moved:   %203 = load i32, ptr %5, align 4
Instruction to be moved:   %204 = load i32, ptr %4, align 4
Instruction to be moved:   %208 = load i32, ptr %3, align 4
Instruction to be moved:   %209 = add nsw i32 %193, 1
Instruction to be moved:   %193 = load i32, ptr %3, align 4
Instruction to be moved:   %193 = add nsw i32 %194, 1
Instruction to be moved:   %158 = load i32, ptr %2, align 4
Instruction to be moved:   %159 = load i32, ptr %8, align 4
Instruction to be moved:   %160 = icmp slt i32 %157, %158
Instruction to be moved:   %162 = load i32, ptr %3, align 4
Instruction to be moved:   %163 = load i32, ptr %8, align 4
Instruction to be moved:   %164 = icmp slt i32 %160, %161
Instruction to be moved:   %165 = load ptr, ptr %9, align 8
Instruction to be moved:   %166 = load i32, ptr %8, align 4
Instruction to be moved:   %167 = load i32, ptr %2, align 4
Instruction to be moved:   %168 = mul nsw i32 %164, %165
Instruction to be moved:   %169 = load i32, ptr %3, align 4
Instruction to be moved:   %170 = add nsw i32 %166, %167
Instruction to be moved:   %171 = mul nsw i32 %168, 2
Instruction to be moved:   %172 = add nsw i32 1, %169
Instruction to be moved:   %173 = sext i32 %170 to i64
Instruction to be moved:   %174 = getelementptr inbounds double, ptr %163, i64 %171
Instruction to be moved:   %175 = load double, ptr %12, align 8
Instruction to be moved:   %176 = load double, ptr %13, align 8
Instruction to be moved:   %177 = load i32, ptr %2, align 4
Instruction to be moved:   %178 = and i32 %175, 15
Instruction to be moved:   %179 = icmp eq i32 %176, 8
Instruction to be moved:   %180 = load i32, ptr %4, align 4
Instruction to be moved:   %181 = load i32, ptr %5, align 4
Instruction to be moved:   %182 = icmp ne i32 %178, %179
Instruction to be moved:   %183 = load i32, ptr %3, align 4
Instruction to be moved:   %184 = and i32 %181, 15
Instruction to be moved:   %185 = icmp eq i32 %182, 8
Instruction to be moved:   %186 = load i32, ptr %6, align 4
Instruction to be moved:   %187 = add nsw i32 %184, 1
Instruction to be moved:   %188 = load ptr, ptr @stderr, align 8
Instruction to be moved:   %189 = load i32, ptr %2, align 4
Instruction to be moved:   %190 = load i32, ptr %3, align 4
Instruction to be moved:   %191 = load i32, ptr %5, align 4
Instruction to be moved:   %192 = load i32, ptr %4, align 4
Instruction to be moved:   %193 = load i32, ptr %3, align 4
Instruction to be moved:   %194 = add nsw i32 %191, 1
Instruction to be moved:   %212 = load i32, ptr %2, align 4
Instruction to be moved:   %213 = add nsw i32 %193, 1
Instruction to be moved:   %79 = load i32, ptr %2, align 4
Instruction to be moved:   %80 = load i32, ptr %7, align 4
Instruction to be moved:   %81 = icmp slt i32 %78, %79
Instruction to be moved:   %83 = load ptr, ptr %9, align 8
Instruction to be moved:   %84 = load ptr, ptr %9, align 8
Instruction to be moved:   %86 = load i32, ptr %2, align 4
Instruction to be moved:   %87 = add nsw i32 %83, 1
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 155
[UnitLICM]: NumComputeHoisted: 87
[UnitLICM]: Total: 255
UnitSCCP running on main
Visiting BB: 
VisitInstr:   %1 = alloca i32, align 4
Check LatCell: 0
In Meet:   %1 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %1 = alloca i32, align 4
VisitInstr:   %2 = alloca i32, align 4
Check LatCell: 0
In Meet:   %2 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %2 = alloca i32, align 4
VisitInstr:   %3 = alloca i32, align 4
Check LatCell: 0
In Meet:   %3 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %3 = alloca i32, align 4
VisitInstr:   %4 = alloca i32, align 4
Check LatCell: 0
In Meet:   %4 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %4 = alloca i32, align 4
VisitInstr:   %5 = alloca i32, align 4
Check LatCell: 0
In Meet:   %5 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %5 = alloca i32, align 4
VisitInstr:   %6 = alloca i32, align 4
Check LatCell: 0
In Meet:   %6 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %6 = alloca i32, align 4
VisitInstr:   %7 = alloca i32, align 4
Check LatCell: 0
In Meet:   %7 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %7 = alloca i32, align 4
VisitInstr:   %8 = alloca i32, align 4
Check LatCell: 0
In Meet:   %8 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %8 = alloca i32, align 4
VisitInstr:   %9 = alloca ptr, align 8
Check LatCell: 0
In Meet:   %9 = alloca ptr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %9 = alloca ptr, align 8
VisitInstr:   %10 = alloca i64, align 8
Check LatCell: 0
In Meet:   %10 = alloca i64, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %10 = alloca i64, align 8
VisitInstr:   %11 = alloca i64, align 8
Check LatCell: 0
In Meet:   %11 = alloca i64, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %11 = alloca i64, align 8
VisitInstr:   %12 = alloca double, align 8
Check LatCell: 0
In Meet:   %12 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %12 = alloca double, align 8
VisitInstr:   %13 = alloca double, align 8
Check LatCell: 0
In Meet:   %13 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %13 = alloca double, align 8
VisitInstr:   %14 = alloca double, align 8
Check LatCell: 0
In Meet:   %14 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %14 = alloca double, align 8
VisitInstr:   %15 = alloca double, align 8
Check LatCell: 0
In Meet:   %15 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %15 = alloca double, align 8
VisitInstr:   %16 = alloca double, align 8
Check LatCell: 0
In Meet:   %16 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %16 = alloca double, align 8
VisitInstr:   %17 = alloca double, align 8
Check LatCell: 0
In Meet:   %17 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %17 = alloca double, align 8
VisitInstr:   %18 = alloca double, align 8
Check LatCell: 0
In Meet:   %18 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %18 = alloca double, align 8
VisitInstr:   %19 = alloca double, align 8
Check LatCell: 0
In Meet:   %19 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %19 = alloca double, align 8
VisitInstr:   %20 = alloca double, align 8
Check LatCell: 0
In Meet:   %20 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %20 = alloca double, align 8
VisitInstr:   %21 = alloca double, align 8
Check LatCell: 0
In Meet:   %21 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %21 = alloca double, align 8
VisitInstr:   store i32 0, ptr %1, align 4
Check LatCell: 0
In Meet:   store i32 0, ptr %1, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 0, ptr %1, align 4
VisitInstr:   store i32 63, ptr %7, align 4
Check LatCell: 0
In Meet:   store i32 63, ptr %7, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 63, ptr %7, align 4
VisitInstr:   store i32 256, ptr %8, align 4
Check LatCell: 0
In Meet:   store i32 256, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 256, ptr %8, align 4
VisitInstr:   %22 = load i32, ptr %8, align 4
Check LatCell: 0
In Meet:   %22 = load i32, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %22 = load i32, ptr %8, align 4
VisitInstr:   %23 = load i32, ptr %8, align 4
Check LatCell: 0
In Meet:   %23 = load i32, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %23 = load i32, ptr %8, align 4
VisitInstr:   %24 = mul nsw i32 %22, %23
BinaryOp:   %24 = mul nsw i32 %22, %23
Check LatCell: 0
In Meet:   %24 = mul nsw i32 %22, %23, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %24 = mul nsw i32 %22, %23
VisitInstr:   %25 = sext i32 %24 to i64
UnaryOp:   %25 = sext i32 %24 to i64
Check LatCell: 0
In Meet:   %25 = sext i32 %24 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %25 = sext i32 %24 to i64
VisitInstr:   store i64 %25, ptr %10, align 8
Check LatCell: 0
In Meet:   store i64 %25, ptr %10, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i64 %25, ptr %10, align 8
VisitInstr:   %26 = load i64, ptr %10, align 8
Check LatCell: 0
In Meet:   %26 = load i64, ptr %10, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %26 = load i64, ptr %10, align 8
VisitInstr:   %27 = add nsw i64 %26, 1
BinaryOp:   %27 = add nsw i64 %26, 1
Check LatCell: 0
In Meet:   %27 = add nsw i64 %26, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %27 = add nsw i64 %26, 1
VisitInstr:   %28 = mul nsw i64 %27, 2
BinaryOp:   %28 = mul nsw i64 %27, 2
Check LatCell: 0
In Meet:   %28 = mul nsw i64 %27, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %28 = mul nsw i64 %27, 2
VisitInstr:   %29 = mul i64 %28, 8
BinaryOp:   %29 = mul i64 %28, 8
Check LatCell: 0
In Meet:   %29 = mul i64 %28, 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %29 = mul i64 %28, 8
VisitInstr:   store i64 %29, ptr %11, align 8
Check LatCell: 0
In Meet:   store i64 %29, ptr %11, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i64 %29, ptr %11, align 8
VisitInstr:   %30 = load i32, ptr %8, align 4
Check LatCell: 0
In Meet:   %30 = load i32, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %30 = load i32, ptr %8, align 4
VisitInstr:   store i32 %30, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 2), align 4
Check LatCell: 0
In Meet:   store i32 %30, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 2), align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %30, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 2), align 4
VisitInstr:   store i32 %30, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4
Check LatCell: 0
In Meet:   store i32 %30, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %30, ptr getelementptr inbounds ([3 x i32], ptr @main.nsize, i64 0, i64 1), align 4
VisitInstr:   %31 = load i64, ptr %11, align 8
Check LatCell: 0
In Meet:   %31 = load i64, ptr %11, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %31 = load i64, ptr %11, align 8
VisitInstr:   %32 = call noalias ptr @malloc(i64 noundef %31) #7
Check LatCell: 0
In Meet:   %32 = call noalias ptr @malloc(i64 noundef %31) #7, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %32 = call noalias ptr @malloc(i64 noundef %31) #7
VisitInstr:   store ptr %32, ptr %9, align 8
Check LatCell: 0
In Meet:   store ptr %32, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store ptr %32, ptr %9, align 8
VisitInstr:   %33 = load ptr, ptr %9, align 8
Check LatCell: 0
In Meet:   %33 = load ptr, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %33 = load ptr, ptr %9, align 8
VisitInstr:   %34 = icmp eq ptr %33, null
CmpInst:   %34 = icmp eq ptr %33, null
Check LatCell: 0
In Meet:   %34 = icmp eq ptr %33, null, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %34 = icmp eq ptr %33, null
VisitInstr:   br i1 %34, label %35, label %38
BranchInst:   br i1 %34, label %35, label %38
In BranchInst: -1, 0x0
In AddEdge: 0x5611285dd380, 0x5611285df8d0, 0
Adding edge:  -> 
In AddEdge: 0x5611285dd380, 0x5611285df8d0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %36 = load ptr, ptr @stderr, align 8
Check LatCell: 0
In Meet:   %36 = load ptr, ptr @stderr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %36 = load ptr, ptr @stderr, align 8
VisitInstr:   %37 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef @.str)
Check LatCell: 0
In Meet:   %37 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef @.str), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %37 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %36, ptr noundef @.str)
VisitInstr:   call void @exit(i32 noundef 1) #8
Check LatCell: 0
In Meet:   call void @exit(i32 noundef 1) #8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @exit(i32 noundef 1) #8
VisitInstr:   unreachable
Check LatCell: 0
In Meet:   unreachable, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   unreachable
Visiting BB: 
VisitInstr:   %39 = load ptr, ptr %9, align 8
Check LatCell: 0
In Meet:   %39 = load ptr, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %39 = load ptr, ptr %9, align 8
VisitInstr:   %40 = load i64, ptr %11, align 8
Check LatCell: 0
In Meet:   %40 = load i64, ptr %11, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %40 = load i64, ptr %11, align 8
VisitInstr:   call void @llvm.memset.p0.i64(ptr align 8 %39, i8 0, i64 %40, i1 false)
Check LatCell: 0
In Meet:   call void @llvm.memset.p0.i64(ptr align 8 %39, i8 0, i64 %40, i1 false), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @llvm.memset.p0.i64(ptr align 8 %39, i8 0, i64 %40, i1 false)
VisitInstr:   store i32 0, ptr %2, align 4
Check LatCell: 0
In Meet:   store i32 0, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 0, ptr %2, align 4
VisitInstr:   %41 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %41 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %41 = load i32, ptr %2, align 4
VisitInstr:   %42 = load i32, ptr %8, align 4
Check LatCell: 0
In Meet:   %42 = load i32, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %42 = load i32, ptr %8, align 4
VisitInstr:   %43 = icmp slt i32 %41, %42
CmpInst:   %43 = icmp slt i32 %41, %42
Check LatCell: 0
In Meet:   %43 = icmp slt i32 %41, %42, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %43 = icmp slt i32 %41, %42
VisitInstr:   %44 = load i32, ptr %3, align 4
Check LatCell: 0
In Meet:   %44 = load i32, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %44 = load i32, ptr %3, align 4
VisitInstr:   %45 = load i32, ptr %8, align 4
Check LatCell: 0
In Meet:   %45 = load i32, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %45 = load i32, ptr %8, align 4
VisitInstr:   %46 = icmp slt i32 %44, %45
CmpInst:   %46 = icmp slt i32 %44, %45
Check LatCell: 0
In Meet:   %46 = icmp slt i32 %44, %45, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %46 = icmp slt i32 %44, %45
VisitInstr:   %47 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %47 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %47 = load i32, ptr %2, align 4
VisitInstr:   %48 = and i32 %47, 15
BinaryOp:   %48 = and i32 %47, 15
Check LatCell: 0
In Meet:   %48 = and i32 %47, 15, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %48 = and i32 %47, 15
VisitInstr:   %49 = icmp eq i32 %48, 8
CmpInst:   %49 = icmp eq i32 %48, 8
Check LatCell: 0
In Meet:   %49 = icmp eq i32 %48, 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %49 = icmp eq i32 %48, 8
VisitInstr:   %50 = load ptr, ptr %9, align 8
Check LatCell: 0
In Meet:   %50 = load ptr, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %50 = load ptr, ptr %9, align 8
VisitInstr:   %51 = load i32, ptr %8, align 4
Check LatCell: 0
In Meet:   %51 = load i32, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %51 = load i32, ptr %8, align 4
VisitInstr:   %52 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %52 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %52 = load i32, ptr %2, align 4
VisitInstr:   %53 = mul nsw i32 %51, %52
BinaryOp:   %53 = mul nsw i32 %51, %52
Check LatCell: 0
In Meet:   %53 = mul nsw i32 %51, %52, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %53 = mul nsw i32 %51, %52
VisitInstr:   %54 = load i32, ptr %3, align 4
Check LatCell: 0
In Meet:   %54 = load i32, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %54 = load i32, ptr %3, align 4
VisitInstr:   %55 = add nsw i32 %53, %54
BinaryOp:   %55 = add nsw i32 %53, %54
Check LatCell: 0
In Meet:   %55 = add nsw i32 %53, %54, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %55 = add nsw i32 %53, %54
VisitInstr:   %56 = mul nsw i32 %55, 2
BinaryOp:   %56 = mul nsw i32 %55, 2
Check LatCell: 0
In Meet:   %56 = mul nsw i32 %55, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %56 = mul nsw i32 %55, 2
VisitInstr:   %57 = add nsw i32 1, %56
BinaryOp:   %57 = add nsw i32 1, %56
Check LatCell: 0
In Meet:   %57 = add nsw i32 1, %56, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %57 = add nsw i32 1, %56
VisitInstr:   %58 = sext i32 %57 to i64
UnaryOp:   %58 = sext i32 %57 to i64
Check LatCell: 0
In Meet:   %58 = sext i32 %57 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %58 = sext i32 %57 to i64
VisitInstr:   %59 = getelementptr inbounds double, ptr %50, i64 %58
GetElementPtr:   %59 = getelementptr inbounds double, ptr %50, i64 %58
Check LatCell: 0
In Meet:   %59 = getelementptr inbounds double, ptr %50, i64 %58, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %59 = getelementptr inbounds double, ptr %50, i64 %58
VisitInstr:   %60 = load i32, ptr %3, align 4
Check LatCell: 0
In Meet:   %60 = load i32, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %60 = load i32, ptr %3, align 4
VisitInstr:   %61 = and i32 %60, 15
BinaryOp:   %61 = and i32 %60, 15
Check LatCell: 0
In Meet:   %61 = and i32 %60, 15, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %61 = and i32 %60, 15
VisitInstr:   %62 = icmp eq i32 %61, 8
CmpInst:   %62 = icmp eq i32 %61, 8
Check LatCell: 0
In Meet:   %62 = icmp eq i32 %61, 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %62 = icmp eq i32 %61, 8
VisitInstr:   %63 = load i32, ptr %3, align 4
Check LatCell: 0
In Meet:   %63 = load i32, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %63 = load i32, ptr %3, align 4
VisitInstr:   %64 = add nsw i32 %63, 1
BinaryOp:   %64 = add nsw i32 %63, 1
Check LatCell: 0
In Meet:   %64 = add nsw i32 %63, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %64 = add nsw i32 %63, 1
VisitInstr:   %65 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %65 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %65 = load i32, ptr %2, align 4
VisitInstr:   %66 = add nsw i32 %65, 1
BinaryOp:   %66 = add nsw i32 %65, 1
Check LatCell: 0
In Meet:   %66 = add nsw i32 %65, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %66 = add nsw i32 %65, 1
VisitInstr:   br label %67
BranchInst:   br label %67
In AddEdge: 0x5611285df7e0, 0x5611285e02d0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %43, label %68, label %77
BranchInst:   br i1 %43, label %68, label %77
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e0260, 0x5611285e05d0, 0
Adding edge:  -> 
In AddEdge: 0x5611285e0260, 0x5611285e05d0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 0, ptr %3, align 4
Check LatCell: 0
In Meet:   store i32 0, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 0, ptr %3, align 4
VisitInstr:   br label %69
BranchInst:   br label %69
In AddEdge: 0x5611285e0490, 0x5611285e0720, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 0, ptr %2, align 4
Check LatCell: 0
In Meet:   store i32 0, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 0, ptr %2, align 4
VisitInstr:   %78 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %78 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %78 = load i32, ptr %2, align 4
VisitInstr:   %79 = load i32, ptr %7, align 4
Check LatCell: 0
In Meet:   %79 = load i32, ptr %7, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %79 = load i32, ptr %7, align 4
VisitInstr:   %80 = icmp slt i32 %78, %79
CmpInst:   %80 = icmp slt i32 %78, %79
Check LatCell: 0
In Meet:   %80 = icmp slt i32 %78, %79, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %80 = icmp slt i32 %78, %79
VisitInstr:   %81 = load ptr, ptr %9, align 8
Check LatCell: 0
In Meet:   %81 = load ptr, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %81 = load ptr, ptr %9, align 8
VisitInstr:   %82 = load ptr, ptr %9, align 8
Check LatCell: 0
In Meet:   %82 = load ptr, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %82 = load ptr, ptr %9, align 8
VisitInstr:   %83 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %83 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %83 = load i32, ptr %2, align 4
VisitInstr:   %84 = add nsw i32 %83, 1
BinaryOp:   %84 = add nsw i32 %83, 1
Check LatCell: 0
In Meet:   %84 = add nsw i32 %83, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %84 = add nsw i32 %83, 1
VisitInstr:   br label %85
BranchInst:   br label %85
In AddEdge: 0x5611285e04e0, 0x5611285e3710, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %46, label %70, label %75
BranchInst:   br i1 %46, label %70, label %75
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e06b0, 0x5611285e0a20, 0
Adding edge:  -> 
In AddEdge: 0x5611285e06b0, 0x5611285e0a20, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %80, label %86, label %88
BranchInst:   br i1 %80, label %86, label %88
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e36a0, 0x5611285e3a10, 0
Adding edge:  -> 
In AddEdge: 0x5611285e36a0, 0x5611285e3a10, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %49, label %72, label %71
BranchInst:   br i1 %49, label %72, label %71
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e08e0, 0x5611285e0d40, 0
Adding edge:  -> 
In AddEdge: 0x5611285e08e0, 0x5611285e0d40, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %76
BranchInst:   br label %76
In AddEdge: 0x5611285e0930, 0x5611285e32c0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   call void @fourn(ptr noundef %81, ptr noundef @main.nsize, i32 noundef 2, i32 noundef 1)
Check LatCell: 0
In Meet:   call void @fourn(ptr noundef %81, ptr noundef @main.nsize, i32 noundef 2, i32 noundef 1), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @fourn(ptr noundef %81, ptr noundef @main.nsize, i32 noundef 2, i32 noundef 1)
VisitInstr:   call void @fourn(ptr noundef %82, ptr noundef @main.nsize, i32 noundef 2, i32 noundef -1)
Check LatCell: 0
In Meet:   call void @fourn(ptr noundef %82, ptr noundef @main.nsize, i32 noundef 2, i32 noundef -1), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   call void @fourn(ptr noundef %82, ptr noundef @main.nsize, i32 noundef 2, i32 noundef -1)
VisitInstr:   br label %87
BranchInst:   br label %87
In AddEdge: 0x5611285e38d0, 0x5611285e3fb0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store double 1.000000e+10, ptr %14, align 8
Check LatCell: 0
In Meet:   store double 1.000000e+10, ptr %14, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 1.000000e+10, ptr %14, align 8
VisitInstr:   store double -1.000000e+10, ptr %15, align 8
Check LatCell: 0
In Meet:   store double -1.000000e+10, ptr %15, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double -1.000000e+10, ptr %15, align 8
VisitInstr:   store double 1.000000e+10, ptr %16, align 8
Check LatCell: 0
In Meet:   store double 1.000000e+10, ptr %16, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 1.000000e+10, ptr %16, align 8
VisitInstr:   store double -1.000000e+10, ptr %17, align 8
Check LatCell: 0
In Meet:   store double -1.000000e+10, ptr %17, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double -1.000000e+10, ptr %17, align 8
VisitInstr:   store double 0.000000e+00, ptr %20, align 8
Check LatCell: 0
In Meet:   store double 0.000000e+00, ptr %20, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 0.000000e+00, ptr %20, align 8
VisitInstr:   store double 0.000000e+00, ptr %21, align 8
Check LatCell: 0
In Meet:   store double 0.000000e+00, ptr %21, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 0.000000e+00, ptr %21, align 8
VisitInstr:   store i32 1, ptr %2, align 4
Check LatCell: 0
In Meet:   store i32 1, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 1, ptr %2, align 4
VisitInstr:   %89 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %89 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %89 = load i32, ptr %2, align 4
VisitInstr:   %90 = sext i32 %89 to i64
UnaryOp:   %90 = sext i32 %89 to i64
Check LatCell: 0
In Meet:   %90 = sext i32 %89 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %90 = sext i32 %89 to i64
VisitInstr:   %91 = load i64, ptr %10, align 8
Check LatCell: 0
In Meet:   %91 = load i64, ptr %10, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %91 = load i64, ptr %10, align 8
VisitInstr:   %92 = icmp sle i64 %90, %91
CmpInst:   %92 = icmp sle i64 %90, %91
Check LatCell: 0
In Meet:   %92 = icmp sle i64 %90, %91, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %92 = icmp sle i64 %90, %91
VisitInstr:   %93 = load ptr, ptr %9, align 8
Check LatCell: 0
In Meet:   %93 = load ptr, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %93 = load ptr, ptr %9, align 8
VisitInstr:   %94 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %94 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %94 = load i32, ptr %2, align 4
VisitInstr:   %95 = sext i32 %94 to i64
UnaryOp:   %95 = sext i32 %94 to i64
Check LatCell: 0
In Meet:   %95 = sext i32 %94 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %95 = sext i32 %94 to i64
VisitInstr:   %96 = getelementptr inbounds double, ptr %93, i64 %95
GetElementPtr:   %96 = getelementptr inbounds double, ptr %93, i64 %95
Check LatCell: 0
In Meet:   %96 = getelementptr inbounds double, ptr %93, i64 %95, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %96 = getelementptr inbounds double, ptr %93, i64 %95
VisitInstr:   %97 = load ptr, ptr %9, align 8
Check LatCell: 0
In Meet:   %97 = load ptr, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %97 = load ptr, ptr %9, align 8
VisitInstr:   %98 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %98 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %98 = load i32, ptr %2, align 4
VisitInstr:   %99 = add nsw i32 %98, 1
BinaryOp:   %99 = add nsw i32 %98, 1
Check LatCell: 0
In Meet:   %99 = add nsw i32 %98, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %99 = add nsw i32 %98, 1
VisitInstr:   %100 = sext i32 %99 to i64
UnaryOp:   %100 = sext i32 %99 to i64
Check LatCell: 0
In Meet:   %100 = sext i32 %99 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %100 = sext i32 %99 to i64
VisitInstr:   %101 = getelementptr inbounds double, ptr %97, i64 %100
GetElementPtr:   %101 = getelementptr inbounds double, ptr %97, i64 %100
Check LatCell: 0
In Meet:   %101 = getelementptr inbounds double, ptr %97, i64 %100, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %101 = getelementptr inbounds double, ptr %97, i64 %100
VisitInstr:   %102 = load double, ptr %18, align 8
Check LatCell: 0
In Meet:   %102 = load double, ptr %18, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %102 = load double, ptr %18, align 8
VisitInstr:   %103 = load double, ptr %20, align 8
Check LatCell: 0
In Meet:   %103 = load double, ptr %20, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %103 = load double, ptr %20, align 8
VisitInstr:   %104 = fadd double %103, %102
BinaryOp:   %104 = fadd double %103, %102
Check LatCell: 0
In Meet:   %104 = fadd double %103, %102, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %104 = fadd double %103, %102
VisitInstr:   %105 = load double, ptr %19, align 8
Check LatCell: 0
In Meet:   %105 = load double, ptr %19, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %105 = load double, ptr %19, align 8
VisitInstr:   %106 = load double, ptr %21, align 8
Check LatCell: 0
In Meet:   %106 = load double, ptr %21, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %106 = load double, ptr %21, align 8
VisitInstr:   %107 = fadd double %106, %105
BinaryOp:   %107 = fadd double %106, %105
Check LatCell: 0
In Meet:   %107 = fadd double %106, %105, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %107 = fadd double %106, %105
VisitInstr:   %108 = load double, ptr %18, align 8
Check LatCell: 0
In Meet:   %108 = load double, ptr %18, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %108 = load double, ptr %18, align 8
VisitInstr:   %109 = load double, ptr %14, align 8
Check LatCell: 0
In Meet:   %109 = load double, ptr %14, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %109 = load double, ptr %14, align 8
VisitInstr:   %110 = fcmp ole double %108, %109
CmpInst:   %110 = fcmp ole double %108, %109
Check LatCell: 0
In Meet:   %110 = fcmp ole double %108, %109, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %110 = fcmp ole double %108, %109
VisitInstr:   %111 = load double, ptr %18, align 8
Check LatCell: 0
In Meet:   %111 = load double, ptr %18, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %111 = load double, ptr %18, align 8
VisitInstr:   %112 = load double, ptr %14, align 8
Check LatCell: 0
In Meet:   %112 = load double, ptr %14, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %112 = load double, ptr %14, align 8
VisitInstr:   %113 = load double, ptr %18, align 8
Check LatCell: 0
In Meet:   %113 = load double, ptr %18, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %113 = load double, ptr %18, align 8
VisitInstr:   %114 = load double, ptr %15, align 8
Check LatCell: 0
In Meet:   %114 = load double, ptr %15, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %114 = load double, ptr %15, align 8
VisitInstr:   %115 = fcmp ogt double %113, %114
CmpInst:   %115 = fcmp ogt double %113, %114
Check LatCell: 0
In Meet:   %115 = fcmp ogt double %113, %114, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %115 = fcmp ogt double %113, %114
VisitInstr:   %116 = load double, ptr %18, align 8
Check LatCell: 0
In Meet:   %116 = load double, ptr %18, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %116 = load double, ptr %18, align 8
VisitInstr:   %117 = load double, ptr %15, align 8
Check LatCell: 0
In Meet:   %117 = load double, ptr %15, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %117 = load double, ptr %15, align 8
VisitInstr:   %118 = load double, ptr %19, align 8
Check LatCell: 0
In Meet:   %118 = load double, ptr %19, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %118 = load double, ptr %19, align 8
VisitInstr:   %119 = load double, ptr %16, align 8
Check LatCell: 0
In Meet:   %119 = load double, ptr %16, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %119 = load double, ptr %16, align 8
VisitInstr:   %120 = fcmp ole double %118, %119
CmpInst:   %120 = fcmp ole double %118, %119
Check LatCell: 0
In Meet:   %120 = fcmp ole double %118, %119, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %120 = fcmp ole double %118, %119
VisitInstr:   %121 = load double, ptr %19, align 8
Check LatCell: 0
In Meet:   %121 = load double, ptr %19, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %121 = load double, ptr %19, align 8
VisitInstr:   %122 = load double, ptr %16, align 8
Check LatCell: 0
In Meet:   %122 = load double, ptr %16, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %122 = load double, ptr %16, align 8
VisitInstr:   %123 = load double, ptr %19, align 8
Check LatCell: 0
In Meet:   %123 = load double, ptr %19, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %123 = load double, ptr %19, align 8
VisitInstr:   %124 = load double, ptr %17, align 8
Check LatCell: 0
In Meet:   %124 = load double, ptr %17, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %124 = load double, ptr %17, align 8
VisitInstr:   %125 = fcmp ogt double %123, %124
CmpInst:   %125 = fcmp ogt double %123, %124
Check LatCell: 0
In Meet:   %125 = fcmp ogt double %123, %124, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %125 = fcmp ogt double %123, %124
VisitInstr:   %126 = load double, ptr %19, align 8
Check LatCell: 0
In Meet:   %126 = load double, ptr %19, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %126 = load double, ptr %19, align 8
VisitInstr:   %127 = load double, ptr %17, align 8
Check LatCell: 0
In Meet:   %127 = load double, ptr %17, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %127 = load double, ptr %17, align 8
VisitInstr:   %128 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %128 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %128 = load i32, ptr %2, align 4
VisitInstr:   %129 = add nsw i32 %128, 2
BinaryOp:   %129 = add nsw i32 %128, 2
Check LatCell: 0
In Meet:   %129 = add nsw i32 %128, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %129 = add nsw i32 %128, 2
VisitInstr:   br label %130
BranchInst:   br label %130
In AddEdge: 0x5611285e3920, 0x5611285e4820, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store double 1.280000e+02, ptr %59, align 8
Check LatCell: 0
In Meet:   store double 1.280000e+02, ptr %59, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 1.280000e+02, ptr %59, align 8
VisitInstr:   br label %73
BranchInst:   br label %73
In AddEdge: 0x5611285e0c00, 0x5611285e2430, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %62, label %72, label %73
BranchInst:   br i1 %62, label %72, label %73
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e0c50, 0x5611285e0fd0, 0
Adding edge:  -> 
In AddEdge: 0x5611285e0c50, 0x5611285e0fd0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %66, ptr %2, align 4
Check LatCell: 0
In Meet:   store i32 %66, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %66, ptr %2, align 4
VisitInstr:   br label %67, !llvm.loop !8
BranchInst:   br label %67, !llvm.loop !8
In AddEdge: 0x5611285e3250, 0x5611285e34c0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %84, ptr %2, align 4
Check LatCell: 0
In Meet:   store i32 %84, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %84, ptr %2, align 4
VisitInstr:   br label %85, !llvm.loop !9
BranchInst:   br label %85, !llvm.loop !9
In AddEdge: 0x5611285e3f40, 0x5611285e41b0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %92, label %131, label %151
BranchInst:   br i1 %92, label %131, label %151
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e4770, 0x5611285e4b90, 0
Adding edge:  -> 
In AddEdge: 0x5611285e4770, 0x5611285e4b90, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %74
BranchInst:   br label %74
In AddEdge: 0x5611285e0f20, 0x5611285e24f0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %74
BranchInst:   br label %74
In AddEdge: 0x5611285e0f20, 0x5611285e24f0, 0
Visiting BB: 
VisitInstr:   %132 = load double, ptr %96, align 8
Check LatCell: 0
In Meet:   %132 = load double, ptr %96, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %132 = load double, ptr %96, align 8
VisitInstr:   store double %132, ptr %18, align 8
Check LatCell: 0
In Meet:   store double %132, ptr %18, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %132, ptr %18, align 8
VisitInstr:   %133 = load double, ptr %101, align 8
Check LatCell: 0
In Meet:   %133 = load double, ptr %101, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %133 = load double, ptr %101, align 8
VisitInstr:   store double %133, ptr %19, align 8
Check LatCell: 0
In Meet:   store double %133, ptr %19, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %133, ptr %19, align 8
VisitInstr:   store double %104, ptr %20, align 8
Check LatCell: 0
In Meet:   store double %104, ptr %20, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %104, ptr %20, align 8
VisitInstr:   store double %107, ptr %21, align 8
Check LatCell: 0
In Meet:   store double %107, ptr %21, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %107, ptr %21, align 8
VisitInstr:   br i1 %110, label %134, label %135
BranchInst:   br i1 %110, label %134, label %135
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e4a50, 0x5611285e5900, 0
Adding edge:  -> 
In AddEdge: 0x5611285e4a50, 0x5611285e5900, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %152 = load double, ptr %14, align 8
Check LatCell: 0
In Meet:   %152 = load double, ptr %14, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %152 = load double, ptr %14, align 8
VisitInstr:   store double %152, ptr %12, align 8
Check LatCell: 0
In Meet:   store double %152, ptr %12, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %152, ptr %12, align 8
VisitInstr:   %153 = load double, ptr %15, align 8
Check LatCell: 0
In Meet:   %153 = load double, ptr %15, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %153 = load double, ptr %15, align 8
VisitInstr:   %154 = load double, ptr %14, align 8
Check LatCell: 0
In Meet:   %154 = load double, ptr %14, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %154 = load double, ptr %14, align 8
VisitInstr:   %155 = fsub double %153, %154
BinaryOp:   %155 = fsub double %153, %154
Check LatCell: 0
In Meet:   %155 = fsub double %153, %154, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %155 = fsub double %153, %154
VisitInstr:   %156 = fdiv double 2.550000e+02, %155
BinaryOp:   %156 = fdiv double 2.550000e+02, %155
Check LatCell: 0
In Meet:   %156 = fdiv double 2.550000e+02, %155, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %156 = fdiv double 2.550000e+02, %155
VisitInstr:   store double %156, ptr %13, align 8
Check LatCell: 0
In Meet:   store double %156, ptr %13, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %156, ptr %13, align 8
VisitInstr:   store i32 0, ptr %6, align 4
Check LatCell: 0
In Meet:   store i32 0, ptr %6, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 0, ptr %6, align 4
VisitInstr:   store i32 0, ptr %2, align 4
Check LatCell: 0
In Meet:   store i32 0, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 0, ptr %2, align 4
VisitInstr:   %157 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %157 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %157 = load i32, ptr %2, align 4
VisitInstr:   %158 = load i32, ptr %8, align 4
Check LatCell: 0
In Meet:   %158 = load i32, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %158 = load i32, ptr %8, align 4
VisitInstr:   %159 = icmp slt i32 %157, %158
CmpInst:   %159 = icmp slt i32 %157, %158
Check LatCell: 0
In Meet:   %159 = icmp slt i32 %157, %158, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %159 = icmp slt i32 %157, %158
VisitInstr:   %160 = load i32, ptr %3, align 4
Check LatCell: 0
In Meet:   %160 = load i32, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %160 = load i32, ptr %3, align 4
VisitInstr:   %161 = load i32, ptr %8, align 4
Check LatCell: 0
In Meet:   %161 = load i32, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %161 = load i32, ptr %8, align 4
VisitInstr:   %162 = icmp slt i32 %160, %161
CmpInst:   %162 = icmp slt i32 %160, %161
Check LatCell: 0
In Meet:   %162 = icmp slt i32 %160, %161, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %162 = icmp slt i32 %160, %161
VisitInstr:   %163 = load ptr, ptr %9, align 8
Check LatCell: 0
In Meet:   %163 = load ptr, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %163 = load ptr, ptr %9, align 8
VisitInstr:   %164 = load i32, ptr %8, align 4
Check LatCell: 0
In Meet:   %164 = load i32, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %164 = load i32, ptr %8, align 4
VisitInstr:   %165 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %165 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %165 = load i32, ptr %2, align 4
VisitInstr:   %166 = mul nsw i32 %164, %165
BinaryOp:   %166 = mul nsw i32 %164, %165
Check LatCell: 0
In Meet:   %166 = mul nsw i32 %164, %165, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %166 = mul nsw i32 %164, %165
VisitInstr:   %167 = load i32, ptr %3, align 4
Check LatCell: 0
In Meet:   %167 = load i32, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %167 = load i32, ptr %3, align 4
VisitInstr:   %168 = add nsw i32 %166, %167
BinaryOp:   %168 = add nsw i32 %166, %167
Check LatCell: 0
In Meet:   %168 = add nsw i32 %166, %167, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %168 = add nsw i32 %166, %167
VisitInstr:   %169 = mul nsw i32 %168, 2
BinaryOp:   %169 = mul nsw i32 %168, 2
Check LatCell: 0
In Meet:   %169 = mul nsw i32 %168, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %169 = mul nsw i32 %168, 2
VisitInstr:   %170 = add nsw i32 1, %169
BinaryOp:   %170 = add nsw i32 1, %169
Check LatCell: 0
In Meet:   %170 = add nsw i32 1, %169, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %170 = add nsw i32 1, %169
VisitInstr:   %171 = sext i32 %170 to i64
UnaryOp:   %171 = sext i32 %170 to i64
Check LatCell: 0
In Meet:   %171 = sext i32 %170 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %171 = sext i32 %170 to i64
VisitInstr:   %172 = getelementptr inbounds double, ptr %163, i64 %171
GetElementPtr:   %172 = getelementptr inbounds double, ptr %163, i64 %171
Check LatCell: 0
In Meet:   %172 = getelementptr inbounds double, ptr %163, i64 %171, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %172 = getelementptr inbounds double, ptr %163, i64 %171
VisitInstr:   %173 = load double, ptr %12, align 8
Check LatCell: 0
In Meet:   %173 = load double, ptr %12, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %173 = load double, ptr %12, align 8
VisitInstr:   %174 = load double, ptr %13, align 8
Check LatCell: 0
In Meet:   %174 = load double, ptr %13, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %174 = load double, ptr %13, align 8
VisitInstr:   %175 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %175 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %175 = load i32, ptr %2, align 4
VisitInstr:   %176 = and i32 %175, 15
BinaryOp:   %176 = and i32 %175, 15
Check LatCell: 0
In Meet:   %176 = and i32 %175, 15, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %176 = and i32 %175, 15
VisitInstr:   %177 = icmp eq i32 %176, 8
CmpInst:   %177 = icmp eq i32 %176, 8
Check LatCell: 0
In Meet:   %177 = icmp eq i32 %176, 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %177 = icmp eq i32 %176, 8
VisitInstr:   %178 = load i32, ptr %4, align 4
Check LatCell: 0
In Meet:   %178 = load i32, ptr %4, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %178 = load i32, ptr %4, align 4
VisitInstr:   %179 = load i32, ptr %5, align 4
Check LatCell: 0
In Meet:   %179 = load i32, ptr %5, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %179 = load i32, ptr %5, align 4
VisitInstr:   %180 = icmp ne i32 %178, %179
CmpInst:   %180 = icmp ne i32 %178, %179
Check LatCell: 0
In Meet:   %180 = icmp ne i32 %178, %179, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %180 = icmp ne i32 %178, %179
VisitInstr:   %181 = load i32, ptr %3, align 4
Check LatCell: 0
In Meet:   %181 = load i32, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %181 = load i32, ptr %3, align 4
VisitInstr:   %182 = and i32 %181, 15
BinaryOp:   %182 = and i32 %181, 15
Check LatCell: 0
In Meet:   %182 = and i32 %181, 15, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %182 = and i32 %181, 15
VisitInstr:   %183 = icmp eq i32 %182, 8
CmpInst:   %183 = icmp eq i32 %182, 8
Check LatCell: 0
In Meet:   %183 = icmp eq i32 %182, 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %183 = icmp eq i32 %182, 8
VisitInstr:   %184 = load i32, ptr %6, align 4
Check LatCell: 0
In Meet:   %184 = load i32, ptr %6, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %184 = load i32, ptr %6, align 4
VisitInstr:   %185 = add nsw i32 %184, 1
BinaryOp:   %185 = add nsw i32 %184, 1
Check LatCell: 0
In Meet:   %185 = add nsw i32 %184, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %185 = add nsw i32 %184, 1
VisitInstr:   %186 = load ptr, ptr @stderr, align 8
Check LatCell: 0
In Meet:   %186 = load ptr, ptr @stderr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %186 = load ptr, ptr @stderr, align 8
VisitInstr:   %187 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %187 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %187 = load i32, ptr %2, align 4
VisitInstr:   %188 = load i32, ptr %3, align 4
Check LatCell: 0
In Meet:   %188 = load i32, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %188 = load i32, ptr %3, align 4
VisitInstr:   %189 = load i32, ptr %5, align 4
Check LatCell: 0
In Meet:   %189 = load i32, ptr %5, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %189 = load i32, ptr %5, align 4
VisitInstr:   %190 = load i32, ptr %4, align 4
Check LatCell: 0
In Meet:   %190 = load i32, ptr %4, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %190 = load i32, ptr %4, align 4
VisitInstr:   %191 = load i32, ptr %3, align 4
Check LatCell: 0
In Meet:   %191 = load i32, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %191 = load i32, ptr %3, align 4
VisitInstr:   %192 = add nsw i32 %191, 1
BinaryOp:   %192 = add nsw i32 %191, 1
Check LatCell: 0
In Meet:   %192 = add nsw i32 %191, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %192 = add nsw i32 %191, 1
VisitInstr:   %193 = load i32, ptr %2, align 4
Check LatCell: 0
In Meet:   %193 = load i32, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %193 = load i32, ptr %2, align 4
VisitInstr:   %194 = add nsw i32 %193, 1
BinaryOp:   %194 = add nsw i32 %193, 1
Check LatCell: 0
In Meet:   %194 = add nsw i32 %193, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %194 = add nsw i32 %193, 1
VisitInstr:   br label %195
BranchInst:   br label %195
In AddEdge: 0x5611285e4aa0, 0x5611285e7fc0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %64, ptr %3, align 4
Check LatCell: 0
In Meet:   store i32 %64, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %64, ptr %3, align 4
VisitInstr:   br label %69, !llvm.loop !6
BranchInst:   br label %69, !llvm.loop !6
In AddEdge: 0x5611285e2480, 0x5611285e26f0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %136
BranchInst:   br label %136
In AddEdge: 0x5611285e57c0, 0x5611285e5a30, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %136
BranchInst:   br label %136
In AddEdge: 0x5611285e5810, 0x5611285e5b10, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %159, label %196, label %214
BranchInst:   br i1 %159, label %196, label %214
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e7f10, 0x5611285e82c0, 0
Adding edge:  -> 
In AddEdge: 0x5611285e7f10, 0x5611285e82c0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %137 = phi double [ %111, %134 ], [ %112, %135 ]
PHI:   %137 = phi double [ %111, %134 ], [ %112, %135 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %137 = phi double [ %111, %134 ], [ %112, %135 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %137 = phi double [ %111, %134 ], [ %112, %135 ]
VisitInstr:   store double %137, ptr %14, align 8
Check LatCell: 0
In Meet:   store double %137, ptr %14, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %137, ptr %14, align 8
VisitInstr:   br i1 %115, label %138, label %139
BranchInst:   br i1 %115, label %138, label %139
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e59c0, 0x5611285e5f10, 0
Adding edge:  -> 
In AddEdge: 0x5611285e59c0, 0x5611285e5f10, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %137 = phi double [ %111, %134 ], [ %112, %135 ]
VisitInstr:   store double %137, ptr %14, align 8
VisitInstr:   br i1 %115, label %138, label %139
BranchInst:   br i1 %115, label %138, label %139
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e59c0, 0x5611285e5f10, 0
In AddEdge: 0x5611285e59c0, 0x5611285e5f10, 1
Visiting BB: 
VisitInstr:   store i32 0, ptr %3, align 4
Check LatCell: 0
In Meet:   store i32 0, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 0, ptr %3, align 4
VisitInstr:   br label %197
BranchInst:   br label %197
In AddEdge: 0x5611285e8180, 0x5611285e8410, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %215 = load i32, ptr %6, align 4
Check LatCell: 0
In Meet:   %215 = load i32, ptr %6, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %215 = load i32, ptr %6, align 4
VisitInstr:   %216 = icmp eq i32 %215, 0
CmpInst:   %216 = icmp eq i32 %215, 0
Check LatCell: 0
In Meet:   %216 = icmp eq i32 %215, 0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %216 = icmp eq i32 %215, 0
VisitInstr:   br i1 %216, label %217, label %221
BranchInst:   br i1 %216, label %217, label %221
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e81d0, 0x5611285f2ac0, 0
Adding edge:  -> 
In AddEdge: 0x5611285e81d0, 0x5611285f2ac0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %140
BranchInst:   br label %140
In AddEdge: 0x5611285e5e10, 0x5611285e6040, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %140
BranchInst:   br label %140
In AddEdge: 0x5611285e5e60, 0x5611285e6120, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %162, label %198, label %212
BranchInst:   br i1 %162, label %198, label %212
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e83a0, 0x5611285e8710, 0
Adding edge:  -> 
In AddEdge: 0x5611285e83a0, 0x5611285e8710, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %218 = load ptr, ptr @stderr, align 8
Check LatCell: 0
In Meet:   %218 = load ptr, ptr @stderr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %218 = load ptr, ptr @stderr, align 8
VisitInstr:   %219 = load i32, ptr %7, align 4
Check LatCell: 0
In Meet:   %219 = load i32, ptr %7, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %219 = load i32, ptr %7, align 4
VisitInstr:   %220 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %218, ptr noundef @.str.2, i32 noundef %219)
Check LatCell: 0
In Meet:   %220 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %218, ptr noundef @.str.2, i32 noundef %219), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %220 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %218, ptr noundef @.str.2, i32 noundef %219)
VisitInstr:   br label %226
BranchInst:   br label %226
In AddEdge: 0x5611285f2980, 0x5611285f2cb0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %222 = load ptr, ptr @stderr, align 8
Check LatCell: 0
In Meet:   %222 = load ptr, ptr @stderr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %222 = load ptr, ptr @stderr, align 8
VisitInstr:   %223 = load i32, ptr %7, align 4
Check LatCell: 0
In Meet:   %223 = load i32, ptr %7, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %223 = load i32, ptr %7, align 4
VisitInstr:   %224 = load i32, ptr %6, align 4
Check LatCell: 0
In Meet:   %224 = load i32, ptr %6, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %224 = load i32, ptr %6, align 4
VisitInstr:   %225 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %222, ptr noundef @.str.3, i32 noundef %223, i32 noundef %224)
Check LatCell: 0
In Meet:   %225 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %222, ptr noundef @.str.3, i32 noundef %223, i32 noundef %224), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %225 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %222, ptr noundef @.str.3, i32 noundef %223, i32 noundef %224)
VisitInstr:   br label %226
BranchInst:   br label %226
In AddEdge: 0x5611285f29d0, 0x5611285f2fc0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %141 = phi double [ %116, %138 ], [ %117, %139 ]
PHI:   %141 = phi double [ %116, %138 ], [ %117, %139 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %141 = phi double [ %116, %138 ], [ %117, %139 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %141 = phi double [ %116, %138 ], [ %117, %139 ]
VisitInstr:   store double %141, ptr %15, align 8
Check LatCell: 0
In Meet:   store double %141, ptr %15, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %141, ptr %15, align 8
VisitInstr:   br i1 %120, label %142, label %143
BranchInst:   br i1 %120, label %142, label %143
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e5fd0, 0x5611285e6d30, 0
Adding edge:  -> 
In AddEdge: 0x5611285e5fd0, 0x5611285e6d30, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %141 = phi double [ %116, %138 ], [ %117, %139 ]
VisitInstr:   store double %141, ptr %15, align 8
VisitInstr:   br i1 %120, label %142, label %143
BranchInst:   br i1 %120, label %142, label %143
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e5fd0, 0x5611285e6d30, 0
In AddEdge: 0x5611285e5fd0, 0x5611285e6d30, 1
Visiting BB: 
VisitInstr:   %199 = load double, ptr %172, align 8
Check LatCell: 0
In Meet:   %199 = load double, ptr %172, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %199 = load double, ptr %172, align 8
VisitInstr:   %200 = fsub double %199, %173
BinaryOp:   %200 = fsub double %199, %173
Check LatCell: 0
In Meet:   %200 = fsub double %199, %173, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %200 = fsub double %199, %173
VisitInstr:   %201 = fmul double %200, %174
BinaryOp:   %201 = fmul double %200, %174
Check LatCell: 0
In Meet:   %201 = fmul double %200, %174, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %201 = fmul double %200, %174
VisitInstr:   %202 = fptosi double %201 to i32
UnaryOp:   %202 = fptosi double %201 to i32
Check LatCell: 0
In Meet:   %202 = fptosi double %201 to i32, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %202 = fptosi double %201 to i32
VisitInstr:   store i32 %202, ptr %4, align 4
Check LatCell: 0
In Meet:   store i32 %202, ptr %4, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %202, ptr %4, align 4
VisitInstr:   br i1 %177, label %204, label %203
BranchInst:   br i1 %177, label %204, label %203
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e85d0, 0x5611285f13e0, 0
Adding edge:  -> 
In AddEdge: 0x5611285e85d0, 0x5611285f13e0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %213
BranchInst:   br label %213
In AddEdge: 0x5611285e8620, 0x5611285f2530, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   ret i32 0
Check LatCell: 0
In Meet:   ret i32 0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret i32 0
Visiting BB: 
VisitInstr:   ret i32 0
Visiting BB: 
VisitInstr:   br label %144
BranchInst:   br label %144
In AddEdge: 0x5611285e6c30, 0x5611285e6e60, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %144
BranchInst:   br label %144
In AddEdge: 0x5611285e6c80, 0x5611285e6f40, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %205 = phi i1 [ true, %198 ], [ %183, %203 ]
PHI:   %205 = phi i1 [ true, %198 ], [ %183, %203 ]
PHI LatOp: 0, 0x5611285e3dc0
Check LatCell: 0
In Meet:   %205 = phi i1 [ true, %198 ], [ %183, %203 ], Lat1: (1, 0x0), Lat2: (0, 0x5611285e3dc0)
Lat2.second: i1 true
Meet:   %205 = phi i1 [ true, %198 ], [ %183, %203 ]
VisitInstr:   %206 = zext i1 %205 to i64
UnaryOp:   %206 = zext i1 %205 to i64
Check LatCell: 0
In Meet:   %206 = zext i1 %205 to i64, Lat1: (1, 0x0), Lat2: (0, 0x5611285fea70)
Lat2.second: i1 zext (i1 true to i1)
Meet:   %206 = zext i1 %205 to i64
VisitInstr:   %207 = select i1 %205, i32 255, i32 0
Select:   %207 = select i1 %205, i32 255, i32 0
Select LatCond: 0, 0x5611285e3dc0
Select LatTrue: 0, 0x5611285f1750
Select LatFals: 0, 0x5611285ddb50
Check LatCell: 0
In Meet:   %207 = select i1 %205, i32 255, i32 0, Lat1: (1, 0x0), Lat2: (0, 0x5611285f1750)
Lat2.second: i32 255
Meet:   %207 = select i1 %205, i32 255, i32 0
VisitInstr:   store i32 %207, ptr %5, align 4
Check LatCell: 0
In Meet:   store i32 %207, ptr %5, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %207, ptr %5, align 4
VisitInstr:   br i1 %180, label %208, label %210
BranchInst:   br i1 %180, label %208, label %210
In BranchInst: -1, 0x0
In AddEdge: 0x5611285f12a0, 0x5611285f1b30, 0
Adding edge:  -> 
In AddEdge: 0x5611285f12a0, 0x5611285f1b30, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %204
BranchInst:   br label %204
In AddEdge: 0x5611285f12f0, 0x5611285f15e0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %194, ptr %2, align 4
Check LatCell: 0
In Meet:   store i32 %194, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %194, ptr %2, align 4
VisitInstr:   br label %195, !llvm.loop !12
BranchInst:   br label %195, !llvm.loop !12
In AddEdge: 0x5611285f24c0, 0x5611285f2730, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %145 = phi double [ %121, %142 ], [ %122, %143 ]
PHI:   %145 = phi double [ %121, %142 ], [ %122, %143 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %145 = phi double [ %121, %142 ], [ %122, %143 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %145 = phi double [ %121, %142 ], [ %122, %143 ]
VisitInstr:   store double %145, ptr %16, align 8
Check LatCell: 0
In Meet:   store double %145, ptr %16, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %145, ptr %16, align 8
VisitInstr:   br i1 %125, label %146, label %147
BranchInst:   br i1 %125, label %146, label %147
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e6df0, 0x5611285e7340, 0
Adding edge:  -> 
In AddEdge: 0x5611285e6df0, 0x5611285e7340, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %145 = phi double [ %121, %142 ], [ %122, %143 ]
VisitInstr:   store double %145, ptr %16, align 8
VisitInstr:   br i1 %125, label %146, label %147
BranchInst:   br i1 %125, label %146, label %147
In BranchInst: -1, 0x0
In AddEdge: 0x5611285e6df0, 0x5611285e7340, 0
In AddEdge: 0x5611285e6df0, 0x5611285e7340, 1
Visiting BB: 
VisitInstr:   store i32 %185, ptr %6, align 4
Check LatCell: 0
In Meet:   store i32 %185, ptr %6, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %185, ptr %6, align 4
VisitInstr:   %209 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %186, ptr noundef @.str.1, i32 noundef %187, i32 noundef %188, i32 noundef %189, i32 noundef %190)
Check LatCell: 0
In Meet:   %209 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %186, ptr noundef @.str.1, i32 noundef %187, i32 noundef %188, i32 noundef %189, i32 noundef %190), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %209 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %186, ptr noundef @.str.1, i32 noundef %187, i32 noundef %188, i32 noundef %189, i32 noundef %190)
VisitInstr:   br label %210
BranchInst:   br label %210
In AddEdge: 0x5611285f1a30, 0x5611285f20f0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %211
BranchInst:   br label %211
In AddEdge: 0x5611285f1a80, 0x5611285f21b0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %148
BranchInst:   br label %148
In AddEdge: 0x5611285e7240, 0x5611285e7470, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %148
BranchInst:   br label %148
In AddEdge: 0x5611285e7290, 0x5611285e7550, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %211
BranchInst:   br label %211
In AddEdge: 0x5611285f1a80, 0x5611285f21b0, 0
Visiting BB: 
VisitInstr:   store i32 %192, ptr %3, align 4
Check LatCell: 0
In Meet:   store i32 %192, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %192, ptr %3, align 4
VisitInstr:   br label %197, !llvm.loop !11
BranchInst:   br label %197, !llvm.loop !11
In AddEdge: 0x5611285f2140, 0x5611285f23b0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %149 = phi double [ %126, %146 ], [ %127, %147 ]
PHI:   %149 = phi double [ %126, %146 ], [ %127, %147 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %149 = phi double [ %126, %146 ], [ %127, %147 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %149 = phi double [ %126, %146 ], [ %127, %147 ]
VisitInstr:   store double %149, ptr %17, align 8
Check LatCell: 0
In Meet:   store double %149, ptr %17, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %149, ptr %17, align 8
VisitInstr:   br label %150
BranchInst:   br label %150
In AddEdge: 0x5611285e7400, 0x5611285e7750, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %149 = phi double [ %126, %146 ], [ %127, %147 ]
VisitInstr:   store double %149, ptr %17, align 8
VisitInstr:   br label %150
BranchInst:   br label %150
In AddEdge: 0x5611285e7400, 0x5611285e7750, 0
Visiting BB: 
VisitInstr:   store i32 %129, ptr %2, align 4
Check LatCell: 0
In Meet:   store i32 %129, ptr %2, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %129, ptr %2, align 4
VisitInstr:   br label %130, !llvm.loop !10
BranchInst:   br label %130, !llvm.loop !10
In AddEdge: 0x5611285e76e0, 0x5611285e7950, 0
Adding edge:  -> 
Removing:   %205 = phi i1 [ true, %198 ], [ %183, %203 ], replacing with: i1 true
Removing:   %206 = select i1 true, i32 255, i32 0, replacing with: i32 255
Removing:   %205 = zext i1 true to i64, replacing with: i1 zext (i1 true to i1)
UnitSCCP: 3 instructions removed, 0 basic blocks unreachable, 3 instructions simplified
UnitLICM running on fourn
******************************************************
UnitLoopAnalysis running on fourn
[LoopLoopAnalysis] parent loop header is:   %53 = load i32, ptr %20, align 4
[LoopLoopAnalysis] It has child loop header : ^-  %184 = load i32, ptr %17, align 4
[LoopLoopAnalysis] It has child loop header : ^-  %75 = load i32, ptr %10, align 4
[LoopLoopAnalysis] parent loop header is:   %75 = load i32, ptr %10, align 4
[LoopLoopAnalysis] It has child loop header : ^-  %158 = load i32, ptr %19, align 4
[LoopLoopAnalysis] It has child loop header : ^-  %85 = load i32, ptr %9, align 4
[LoopLoopAnalysis] parent loop header is:   %184 = load i32, ptr %17, align 4
[LoopLoopAnalysis] It has child loop header : ^-  %208 = load i32, ptr %11, align 4
[LoopLoopAnalysis] parent loop header is:   %36 = load i32, ptr %20, align 4
[LoopLoopAnalysis] parent loop header is:   %214 = load i32, ptr %9, align 4
[LoopLoopAnalysis] It has child loop header : ^-  %223 = load i32, ptr %10, align 4
[LoopLoopAnalysis] parent loop header is:   %223 = load i32, ptr %10, align 4
[LoopLoopAnalysis] parent loop header is:   %158 = load i32, ptr %19, align 4
[LoopLoopAnalysis] parent loop header is:   %208 = load i32, ptr %11, align 4
[LoopLoopAnalysis] It has child loop header : ^-  %214 = load i32, ptr %9, align 4
[LoopLoopAnalysis] parent loop header is:   %85 = load i32, ptr %9, align 4
[LoopLoopAnalysis] It has child loop header : ^-  %94 = load i32, ptr %11, align 4
[LoopLoopAnalysis] parent loop header is:   %94 = load i32, ptr %11, align 4
Instruction to be moved:   %223 = load i32, ptr %10, align 4
Instruction to be moved:   %224 = load i32, ptr %16, align 4
Instruction to be moved:   %225 = icmp sle i32 %222, %223
Instruction to be moved:   %227 = load i32, ptr %10, align 4
Instruction to be moved:   %228 = load i32, ptr %21, align 4
Instruction to be moved:   %229 = load i32, ptr %17, align 4
Instruction to be moved:   %230 = add nsw i32 %226, %227
Instruction to be moved:   %231 = load double, ptr %33, align 8
Instruction to be moved:   %232 = load ptr, ptr %5, align 8
Instruction to be moved:   %233 = load i32, ptr %22, align 4
Instruction to be moved:   %234 = sext i32 %231 to i64
Instruction to be moved:   %235 = getelementptr inbounds double, ptr %230, i64 %232
Instruction to be moved:   %237 = load double, ptr %30, align 8
Instruction to be moved:   %238 = load ptr, ptr %5, align 8
Instruction to be moved:   %239 = load i32, ptr %22, align 4
Instruction to be moved:   %240 = add nsw i32 %236, 1
Instruction to be moved:   %241 = sext i32 %237 to i64
Instruction to be moved:   %242 = getelementptr inbounds double, ptr %235, i64 %238
Instruction to be moved:   %247 = load double, ptr %33, align 8
Instruction to be moved:   %248 = load ptr, ptr %5, align 8
Instruction to be moved:   %249 = load i32, ptr %22, align 4
Instruction to be moved:   %250 = add nsw i32 %242, 1
Instruction to be moved:   %251 = sext i32 %243 to i64
Instruction to be moved:   %252 = getelementptr inbounds double, ptr %241, i64 %244
Instruction to be moved:   %254 = load double, ptr %30, align 8
Instruction to be moved:   %255 = load ptr, ptr %5, align 8
Instruction to be moved:   %256 = load i32, ptr %22, align 4
Instruction to be moved:   %257 = sext i32 %248 to i64
Instruction to be moved:   %258 = getelementptr inbounds double, ptr %247, i64 %249
Instruction to be moved:   %262 = load ptr, ptr %5, align 8
Instruction to be moved:   %263 = load i32, ptr %21, align 4
Instruction to be moved:   %264 = sext i32 %252 to i64
Instruction to be moved:   %265 = getelementptr inbounds double, ptr %251, i64 %253
Instruction to be moved:   %267 = load double, ptr %28, align 8
Instruction to be moved:   %269 = load ptr, ptr %5, align 8
Instruction to be moved:   %270 = load i32, ptr %22, align 4
Instruction to be moved:   %271 = sext i32 %257 to i64
Instruction to be moved:   %272 = getelementptr inbounds double, ptr %256, i64 %258
Instruction to be moved:   %273 = load ptr, ptr %5, align 8
Instruction to be moved:   %274 = load i32, ptr %21, align 4
Instruction to be moved:   %275 = add nsw i32 %261, 1
Instruction to be moved:   %276 = sext i32 %262 to i64
Instruction to be moved:   %277 = getelementptr inbounds double, ptr %260, i64 %263
Instruction to be moved:   %279 = load double, ptr %27, align 8
Instruction to be moved:   %281 = load ptr, ptr %5, align 8
Instruction to be moved:   %282 = load i32, ptr %22, align 4
Instruction to be moved:   %283 = add nsw i32 %267, 1
Instruction to be moved:   %284 = sext i32 %268 to i64
Instruction to be moved:   %285 = getelementptr inbounds double, ptr %266, i64 %269
Instruction to be moved:   %286 = load double, ptr %28, align 8
Instruction to be moved:   %287 = load ptr, ptr %5, align 8
Instruction to be moved:   %288 = load i32, ptr %21, align 4
Instruction to be moved:   %289 = sext i32 %273 to i64
Instruction to be moved:   %290 = getelementptr inbounds double, ptr %272, i64 %274
Instruction to be moved:   %293 = load double, ptr %27, align 8
Instruction to be moved:   %294 = load ptr, ptr %5, align 8
Instruction to be moved:   %295 = load i32, ptr %21, align 4
Instruction to be moved:   %296 = add nsw i32 %278, 1
Instruction to be moved:   %297 = sext i32 %279 to i64
Instruction to be moved:   %298 = getelementptr inbounds double, ptr %277, i64 %280
Instruction to be moved:   %302 = load i32, ptr %18, align 4
Instruction to be moved:   %303 = load i32, ptr %10, align 4
Instruction to be moved:   %304 = add nsw i32 %283, %282
Instruction to be moved:   %214 = load i32, ptr %9, align 4
Instruction to be moved:   %215 = load i32, ptr %11, align 4
Instruction to be moved:   %216 = load i32, ptr %14, align 4
Instruction to be moved:   %217 = add nsw i32 %214, %215
Instruction to be moved:   %218 = sub nsw i32 %216, 2
Instruction to be moved:   %219 = icmp sle i32 %213, %217
Instruction to be moved:   %221 = load i32, ptr %9, align 4
Instruction to be moved:   %222 = load i32, ptr %10, align 4
Instruction to be moved:   %223 = load i32, ptr %16, align 4
Instruction to be moved:   %224 = icmp sle i32 %220, %221
Instruction to be moved:   %225 = load i32, ptr %10, align 4
Instruction to be moved:   %226 = load i32, ptr %21, align 4
Instruction to be moved:   %227 = load i32, ptr %17, align 4
Instruction to be moved:   %228 = add nsw i32 %224, %225
Instruction to be moved:   %229 = load double, ptr %33, align 8
Instruction to be moved:   %230 = load ptr, ptr %5, align 8
Instruction to be moved:   %231 = load i32, ptr %22, align 4
Instruction to be moved:   %232 = sext i32 %229 to i64
Instruction to be moved:   %233 = getelementptr inbounds double, ptr %228, i64 %230
Instruction to be moved:   %234 = load double, ptr %30, align 8
Instruction to be moved:   %235 = load ptr, ptr %5, align 8
Instruction to be moved:   %236 = load i32, ptr %22, align 4
Instruction to be moved:   %237 = add nsw i32 %234, 1
Instruction to be moved:   %238 = sext i32 %235 to i64
Instruction to be moved:   %239 = getelementptr inbounds double, ptr %233, i64 %236
Instruction to be moved:   %240 = load double, ptr %33, align 8
Instruction to be moved:   %241 = load ptr, ptr %5, align 8
Instruction to be moved:   %242 = load i32, ptr %22, align 4
Instruction to be moved:   %243 = add nsw i32 %240, 1
Instruction to be moved:   %244 = sext i32 %241 to i64
Instruction to be moved:   %245 = getelementptr inbounds double, ptr %239, i64 %242
Instruction to be moved:   %246 = load double, ptr %30, align 8
Instruction to be moved:   %247 = load ptr, ptr %5, align 8
Instruction to be moved:   %248 = load i32, ptr %22, align 4
Instruction to be moved:   %249 = sext i32 %246 to i64
Instruction to be moved:   %250 = getelementptr inbounds double, ptr %245, i64 %247
Instruction to be moved:   %251 = load ptr, ptr %5, align 8
Instruction to be moved:   %252 = load i32, ptr %21, align 4
Instruction to be moved:   %253 = sext i32 %250 to i64
Instruction to be moved:   %254 = getelementptr inbounds double, ptr %249, i64 %251
Instruction to be moved:   %255 = load double, ptr %28, align 8
Instruction to be moved:   %256 = load ptr, ptr %5, align 8
Instruction to be moved:   %257 = load i32, ptr %22, align 4
Instruction to be moved:   %258 = sext i32 %255 to i64
Instruction to be moved:   %259 = getelementptr inbounds double, ptr %254, i64 %256
Instruction to be moved:   %260 = load ptr, ptr %5, align 8
Instruction to be moved:   %261 = load i32, ptr %21, align 4
Instruction to be moved:   %262 = add nsw i32 %259, 1
Instruction to be moved:   %263 = sext i32 %260 to i64
Instruction to be moved:   %264 = getelementptr inbounds double, ptr %258, i64 %261
Instruction to be moved:   %265 = load double, ptr %27, align 8
Instruction to be moved:   %266 = load ptr, ptr %5, align 8
Instruction to be moved:   %267 = load i32, ptr %22, align 4
Instruction to be moved:   %268 = add nsw i32 %265, 1
Instruction to be moved:   %269 = sext i32 %266 to i64
Instruction to be moved:   %270 = getelementptr inbounds double, ptr %264, i64 %267
Instruction to be moved:   %271 = load double, ptr %28, align 8
Instruction to be moved:   %272 = load ptr, ptr %5, align 8
Instruction to be moved:   %273 = load i32, ptr %21, align 4
Instruction to be moved:   %274 = sext i32 %271 to i64
Instruction to be moved:   %275 = getelementptr inbounds double, ptr %270, i64 %272
Instruction to be moved:   %276 = load double, ptr %27, align 8
Instruction to be moved:   %277 = load ptr, ptr %5, align 8
Instruction to be moved:   %278 = load i32, ptr %21, align 4
Instruction to be moved:   %279 = add nsw i32 %276, 1
Instruction to be moved:   %280 = sext i32 %277 to i64
Instruction to be moved:   %281 = getelementptr inbounds double, ptr %275, i64 %278
Instruction to be moved:   %282 = load i32, ptr %18, align 4
Instruction to be moved:   %283 = load i32, ptr %10, align 4
Instruction to be moved:   %284 = add nsw i32 %281, %280
Instruction to be moved:   %307 = load i32, ptr %9, align 4
Instruction to be moved:   %308 = add nsw i32 %283, 2
Instruction to be moved:   %208 = load i32, ptr %11, align 4
Instruction to be moved:   %209 = load i32, ptr %17, align 4
Instruction to be moved:   %210 = icmp sle i32 %207, %208
Instruction to be moved:   %212 = load i32, ptr %11, align 4
Instruction to be moved:   %213 = load i32, ptr %9, align 4
Instruction to be moved:   %214 = load i32, ptr %11, align 4
Instruction to be moved:   %215 = load i32, ptr %14, align 4
Instruction to be moved:   %216 = add nsw i32 %212, %213
Instruction to be moved:   %217 = sub nsw i32 %214, 2
Instruction to be moved:   %218 = icmp sle i32 %211, %215
Instruction to be moved:   %219 = load i32, ptr %9, align 4
Instruction to be moved:   %220 = load i32, ptr %10, align 4
Instruction to be moved:   %221 = load i32, ptr %16, align 4
Instruction to be moved:   %222 = icmp sle i32 %218, %219
Instruction to be moved:   %223 = load i32, ptr %10, align 4
Instruction to be moved:   %224 = load i32, ptr %21, align 4
Instruction to be moved:   %225 = load i32, ptr %17, align 4
Instruction to be moved:   %226 = add nsw i32 %222, %223
Instruction to be moved:   %227 = load double, ptr %33, align 8
Instruction to be moved:   %228 = load ptr, ptr %5, align 8
Instruction to be moved:   %229 = load i32, ptr %22, align 4
Instruction to be moved:   %230 = sext i32 %227 to i64
Instruction to be moved:   %231 = getelementptr inbounds double, ptr %226, i64 %228
Instruction to be moved:   %232 = load double, ptr %30, align 8
Instruction to be moved:   %233 = load ptr, ptr %5, align 8
Instruction to be moved:   %234 = load i32, ptr %22, align 4
Instruction to be moved:   %235 = add nsw i32 %232, 1
Instruction to be moved:   %236 = sext i32 %233 to i64
Instruction to be moved:   %237 = getelementptr inbounds double, ptr %231, i64 %234
Instruction to be moved:   %238 = load double, ptr %33, align 8
Instruction to be moved:   %239 = load ptr, ptr %5, align 8
Instruction to be moved:   %240 = load i32, ptr %22, align 4
Instruction to be moved:   %241 = add nsw i32 %238, 1
Instruction to be moved:   %242 = sext i32 %239 to i64
Instruction to be moved:   %243 = getelementptr inbounds double, ptr %237, i64 %240
Instruction to be moved:   %244 = load double, ptr %30, align 8
Instruction to be moved:   %245 = load ptr, ptr %5, align 8
Instruction to be moved:   %246 = load i32, ptr %22, align 4
Instruction to be moved:   %247 = sext i32 %244 to i64
Instruction to be moved:   %248 = getelementptr inbounds double, ptr %243, i64 %245
Instruction to be moved:   %249 = load ptr, ptr %5, align 8
Instruction to be moved:   %250 = load i32, ptr %21, align 4
Instruction to be moved:   %251 = sext i32 %248 to i64
Instruction to be moved:   %252 = getelementptr inbounds double, ptr %247, i64 %249
Instruction to be moved:   %253 = load double, ptr %28, align 8
Instruction to be moved:   %254 = load ptr, ptr %5, align 8
Instruction to be moved:   %255 = load i32, ptr %22, align 4
Instruction to be moved:   %256 = sext i32 %253 to i64
Instruction to be moved:   %257 = getelementptr inbounds double, ptr %252, i64 %254
Instruction to be moved:   %258 = load ptr, ptr %5, align 8
Instruction to be moved:   %259 = load i32, ptr %21, align 4
Instruction to be moved:   %260 = add nsw i32 %257, 1
Instruction to be moved:   %261 = sext i32 %258 to i64
Instruction to be moved:   %262 = getelementptr inbounds double, ptr %256, i64 %259
Instruction to be moved:   %263 = load double, ptr %27, align 8
Instruction to be moved:   %264 = load ptr, ptr %5, align 8
Instruction to be moved:   %265 = load i32, ptr %22, align 4
Instruction to be moved:   %266 = add nsw i32 %263, 1
Instruction to be moved:   %267 = sext i32 %264 to i64
Instruction to be moved:   %268 = getelementptr inbounds double, ptr %262, i64 %265
Instruction to be moved:   %269 = load double, ptr %28, align 8
Instruction to be moved:   %270 = load ptr, ptr %5, align 8
Instruction to be moved:   %271 = load i32, ptr %21, align 4
Instruction to be moved:   %272 = sext i32 %269 to i64
Instruction to be moved:   %273 = getelementptr inbounds double, ptr %268, i64 %270
Instruction to be moved:   %274 = load double, ptr %27, align 8
Instruction to be moved:   %275 = load ptr, ptr %5, align 8
Instruction to be moved:   %276 = load i32, ptr %21, align 4
Instruction to be moved:   %277 = add nsw i32 %274, 1
Instruction to be moved:   %278 = sext i32 %275 to i64
Instruction to be moved:   %279 = getelementptr inbounds double, ptr %273, i64 %276
Instruction to be moved:   %280 = load i32, ptr %18, align 4
Instruction to be moved:   %281 = load i32, ptr %10, align 4
Instruction to be moved:   %282 = add nsw i32 %279, %278
Instruction to be moved:   %283 = load i32, ptr %9, align 4
Instruction to be moved:   %284 = add nsw i32 %281, 2
Instruction to be moved:   %310 = load double, ptr %33, align 8
Instruction to be moved:   %311 = load double, ptr %32, align 8
Instruction to be moved:   %312 = load double, ptr %30, align 8
Instruction to be moved:   %313 = load double, ptr %31, align 8
Instruction to be moved:   %314 = fmul double %285, %286
Instruction to be moved:   %315 = fneg double %287
Instruction to be moved:   %317 = load double, ptr %33, align 8
Instruction to be moved:   %319 = load double, ptr %30, align 8
Instruction to be moved:   %320 = load double, ptr %32, align 8
Instruction to be moved:   %321 = load double, ptr %34, align 8
Instruction to be moved:   %322 = load double, ptr %31, align 8
Instruction to be moved:   %323 = fmul double %292, %293
Instruction to be moved:   %325 = load double, ptr %30, align 8
Instruction to be moved:   %328 = load i32, ptr %14, align 4
Instruction to be moved:   %329 = load i32, ptr %11, align 4
Instruction to be moved:   %330 = add nsw i32 %297, %296
Instruction to be moved:   %184 = load i32, ptr %17, align 4
Instruction to be moved:   %185 = load i32, ptr %15, align 4
Instruction to be moved:   %186 = icmp slt i32 %183, %184
Instruction to be moved:   %188 = load i32, ptr %17, align 4
Instruction to be moved:   %189 = shl i32 %186, 1
Instruction to be moved:   %190 = load i32, ptr %8, align 4
Instruction to be moved:   %191 = sitofp i32 %188 to double
Instruction to be moved:   %192 = fmul double %189, 0x401921FB54442D1C
Instruction to be moved:   %193 = load i32, ptr %18, align 4
Instruction to be moved:   %194 = load i32, ptr %14, align 4
Instruction to be moved:   %198 = load double, ptr %29, align 8
Instruction to be moved:   %199 = fmul double 5.000000e-01, %193
Instruction to be moved:   %201 = load double, ptr %34, align 8
Instruction to be moved:   %202 = fmul double -2.000000e+00, %195
Instruction to be moved:   %203 = load double, ptr %34, align 8
Instruction to be moved:   %204 = fmul double %196, %197
Instruction to be moved:   %205 = load double, ptr %29, align 8
Instruction to be moved:   %207 = load i32, ptr %11, align 4
Instruction to be moved:   %208 = load i32, ptr %17, align 4
Instruction to be moved:   %209 = icmp sle i32 %200, %201
Instruction to be moved:   %210 = load i32, ptr %11, align 4
Instruction to be moved:   %211 = load i32, ptr %9, align 4
Instruction to be moved:   %212 = load i32, ptr %11, align 4
Instruction to be moved:   %213 = load i32, ptr %14, align 4
Instruction to be moved:   %214 = add nsw i32 %205, %206
Instruction to be moved:   %215 = sub nsw i32 %207, 2
Instruction to be moved:   %216 = icmp sle i32 %204, %208
Instruction to be moved:   %217 = load i32, ptr %9, align 4
Instruction to be moved:   %218 = load i32, ptr %10, align 4
Instruction to be moved:   %219 = load i32, ptr %16, align 4
Instruction to be moved:   %220 = icmp sle i32 %211, %212
Instruction to be moved:   %221 = load i32, ptr %10, align 4
Instruction to be moved:   %222 = load i32, ptr %21, align 4
Instruction to be moved:   %223 = load i32, ptr %17, align 4
Instruction to be moved:   %224 = add nsw i32 %215, %216
Instruction to be moved:   %225 = load double, ptr %33, align 8
Instruction to be moved:   %226 = load ptr, ptr %5, align 8
Instruction to be moved:   %227 = load i32, ptr %22, align 4
Instruction to be moved:   %228 = sext i32 %220 to i64
Instruction to be moved:   %229 = getelementptr inbounds double, ptr %219, i64 %221
Instruction to be moved:   %230 = load double, ptr %30, align 8
Instruction to be moved:   %231 = load ptr, ptr %5, align 8
Instruction to be moved:   %232 = load i32, ptr %22, align 4
Instruction to be moved:   %233 = add nsw i32 %225, 1
Instruction to be moved:   %234 = sext i32 %226 to i64
Instruction to be moved:   %235 = getelementptr inbounds double, ptr %224, i64 %227
Instruction to be moved:   %236 = load double, ptr %33, align 8
Instruction to be moved:   %237 = load ptr, ptr %5, align 8
Instruction to be moved:   %238 = load i32, ptr %22, align 4
Instruction to be moved:   %239 = add nsw i32 %231, 1
Instruction to be moved:   %240 = sext i32 %232 to i64
Instruction to be moved:   %241 = getelementptr inbounds double, ptr %230, i64 %233
Instruction to be moved:   %242 = load double, ptr %30, align 8
Instruction to be moved:   %243 = load ptr, ptr %5, align 8
Instruction to be moved:   %244 = load i32, ptr %22, align 4
Instruction to be moved:   %245 = sext i32 %237 to i64
Instruction to be moved:   %246 = getelementptr inbounds double, ptr %236, i64 %238
Instruction to be moved:   %247 = load ptr, ptr %5, align 8
Instruction to be moved:   %248 = load i32, ptr %21, align 4
Instruction to be moved:   %249 = sext i32 %241 to i64
Instruction to be moved:   %250 = getelementptr inbounds double, ptr %240, i64 %242
Instruction to be moved:   %251 = load double, ptr %28, align 8
Instruction to be moved:   %252 = load ptr, ptr %5, align 8
Instruction to be moved:   %253 = load i32, ptr %22, align 4
Instruction to be moved:   %254 = sext i32 %246 to i64
Instruction to be moved:   %255 = getelementptr inbounds double, ptr %245, i64 %247
Instruction to be moved:   %256 = load ptr, ptr %5, align 8
Instruction to be moved:   %257 = load i32, ptr %21, align 4
Instruction to be moved:   %258 = add nsw i32 %250, 1
Instruction to be moved:   %259 = sext i32 %251 to i64
Instruction to be moved:   %260 = getelementptr inbounds double, ptr %249, i64 %252
Instruction to be moved:   %261 = load double, ptr %27, align 8
Instruction to be moved:   %262 = load ptr, ptr %5, align 8
Instruction to be moved:   %263 = load i32, ptr %22, align 4
Instruction to be moved:   %264 = add nsw i32 %256, 1
Instruction to be moved:   %265 = sext i32 %257 to i64
Instruction to be moved:   %266 = getelementptr inbounds double, ptr %255, i64 %258
Instruction to be moved:   %267 = load double, ptr %28, align 8
Instruction to be moved:   %268 = load ptr, ptr %5, align 8
Instruction to be moved:   %269 = load i32, ptr %21, align 4
Instruction to be moved:   %270 = sext i32 %262 to i64
Instruction to be moved:   %271 = getelementptr inbounds double, ptr %261, i64 %263
Instruction to be moved:   %272 = load double, ptr %27, align 8
Instruction to be moved:   %273 = load ptr, ptr %5, align 8
Instruction to be moved:   %274 = load i32, ptr %21, align 4
Instruction to be moved:   %275 = add nsw i32 %267, 1
Instruction to be moved:   %276 = sext i32 %268 to i64
Instruction to be moved:   %277 = getelementptr inbounds double, ptr %266, i64 %269
Instruction to be moved:   %278 = load i32, ptr %18, align 4
Instruction to be moved:   %279 = load i32, ptr %10, align 4
Instruction to be moved:   %280 = add nsw i32 %272, %271
Instruction to be moved:   %281 = load i32, ptr %9, align 4
Instruction to be moved:   %282 = add nsw i32 %274, 2
Instruction to be moved:   %283 = load double, ptr %33, align 8
Instruction to be moved:   %284 = load double, ptr %32, align 8
Instruction to be moved:   %285 = load double, ptr %30, align 8
Instruction to be moved:   %286 = load double, ptr %31, align 8
Instruction to be moved:   %287 = fmul double %278, %279
Instruction to be moved:   %288 = fneg double %280
Instruction to be moved:   %289 = load double, ptr %33, align 8
Instruction to be moved:   %290 = load double, ptr %30, align 8
Instruction to be moved:   %291 = load double, ptr %32, align 8
Instruction to be moved:   %292 = load double, ptr %34, align 8
Instruction to be moved:   %293 = load double, ptr %31, align 8
Instruction to be moved:   %294 = fmul double %285, %286
Instruction to be moved:   %295 = load double, ptr %30, align 8
Instruction to be moved:   %296 = load i32, ptr %14, align 4
Instruction to be moved:   %297 = load i32, ptr %11, align 4
Instruction to be moved:   %298 = add nsw i32 %290, %289
Instruction to be moved:   %332 = load i32, ptr %18, align 4
Instruction to be moved:   %158 = load i32, ptr %19, align 4
Instruction to be moved:   %159 = load i32, ptr %14, align 4
Instruction to be moved:   %160 = icmp sge i32 %157, %158
Instruction to be moved:   %162 = load i32, ptr %12, align 4
Instruction to be moved:   %163 = load i32, ptr %19, align 4
Instruction to be moved:   %164 = icmp sgt i32 %160, %161
Instruction to be moved:   %168 = load i32, ptr %19, align 4
Instruction to be moved:   %169 = load i32, ptr %12, align 4
Instruction to be moved:   %170 = sub nsw i32 %164, %163
Instruction to be moved:   %171 = load i32, ptr %19, align 4
Instruction to be moved:   %172 = ashr i32 %166, 1
Instruction to be moved:   %163 = load i32, ptr %19, align 4
Instruction to be moved:   %163 = load i32, ptr %12, align 4
Instruction to be moved:   %163 = sub nsw i32 %167, %166
Instruction to be moved:   %163 = load i32, ptr %19, align 4
Instruction to be moved:   %163 = ashr i32 %167, 1
Instruction to be moved:   %94 = load i32, ptr %11, align 4
Instruction to be moved:   %95 = load i32, ptr %16, align 4
Instruction to be moved:   %96 = icmp sle i32 %93, %94
Instruction to be moved:   %98 = load i32, ptr %12, align 4
Instruction to be moved:   %99 = load i32, ptr %11, align 4
Instruction to be moved:   %100 = add nsw i32 %96, %97
Instruction to be moved:   %101 = load i32, ptr %10, align 4
Instruction to be moved:   %102 = sub nsw i32 %98, %99
Instruction to be moved:   %103 = load ptr, ptr %5, align 8
Instruction to be moved:   %104 = load i32, ptr %11, align 4
Instruction to be moved:   %105 = sext i32 %102 to i64
Instruction to be moved:   %106 = getelementptr inbounds double, ptr %101, i64 %103
Instruction to be moved:   %108 = load ptr, ptr %5, align 8
Instruction to be moved:   %109 = load i32, ptr %13, align 4
Instruction to be moved:   %110 = sext i32 %106 to i64
Instruction to be moved:   %111 = getelementptr inbounds double, ptr %105, i64 %107
Instruction to be moved:   %113 = load ptr, ptr %5, align 8
Instruction to be moved:   %114 = load i32, ptr %11, align 4
Instruction to be moved:   %115 = sext i32 %110 to i64
Instruction to be moved:   %116 = getelementptr inbounds double, ptr %109, i64 %111
Instruction to be moved:   %117 = load double, ptr %28, align 8
Instruction to be moved:   %118 = load ptr, ptr %5, align 8
Instruction to be moved:   %119 = load i32, ptr %13, align 4
Instruction to be moved:   %120 = sext i32 %115 to i64
Instruction to be moved:   %121 = getelementptr inbounds double, ptr %114, i64 %116
Instruction to be moved:   %122 = load ptr, ptr %5, align 8
Instruction to be moved:   %123 = load i32, ptr %11, align 4
Instruction to be moved:   %124 = add nsw i32 %119, 1
Instruction to be moved:   %125 = sext i32 %120 to i64
Instruction to be moved:   %126 = getelementptr inbounds double, ptr %118, i64 %121
Instruction to be moved:   %128 = load ptr, ptr %5, align 8
Instruction to be moved:   %129 = load i32, ptr %13, align 4
Instruction to be moved:   %130 = add nsw i32 %124, 1
Instruction to be moved:   %131 = sext i32 %125 to i64
Instruction to be moved:   %132 = getelementptr inbounds double, ptr %123, i64 %126
Instruction to be moved:   %134 = load ptr, ptr %5, align 8
Instruction to be moved:   %135 = load i32, ptr %11, align 4
Instruction to be moved:   %136 = add nsw i32 %129, 1
Instruction to be moved:   %137 = sext i32 %130 to i64
Instruction to be moved:   %138 = getelementptr inbounds double, ptr %128, i64 %131
Instruction to be moved:   %139 = load double, ptr %28, align 8
Instruction to be moved:   %140 = load ptr, ptr %5, align 8
Instruction to be moved:   %141 = load i32, ptr %13, align 4
Instruction to be moved:   %142 = add nsw i32 %135, 1
Instruction to be moved:   %143 = sext i32 %136 to i64
Instruction to be moved:   %144 = getelementptr inbounds double, ptr %134, i64 %137
Instruction to be moved:   %146 = load i32, ptr %15, align 4
Instruction to be moved:   %147 = load i32, ptr %11, align 4
Instruction to be moved:   %148 = add nsw i32 %140, %139
Instruction to be moved:   %85 = load i32, ptr %9, align 4
Instruction to be moved:   %86 = load i32, ptr %10, align 4
Instruction to be moved:   %87 = load i32, ptr %14, align 4
Instruction to be moved:   %88 = add nsw i32 %85, %86
Instruction to be moved:   %89 = sub nsw i32 %87, 2
Instruction to be moved:   %90 = icmp sle i32 %84, %88
Instruction to be moved:   %92 = load i32, ptr %9, align 4
Instruction to be moved:   %93 = load i32, ptr %11, align 4
Instruction to be moved:   %94 = load i32, ptr %16, align 4
Instruction to be moved:   %95 = icmp sle i32 %91, %92
Instruction to be moved:   %96 = load i32, ptr %12, align 4
Instruction to be moved:   %97 = load i32, ptr %11, align 4
Instruction to be moved:   %98 = add nsw i32 %94, %95
Instruction to be moved:   %99 = load i32, ptr %10, align 4
Instruction to be moved:   %100 = sub nsw i32 %96, %97
Instruction to be moved:   %101 = load ptr, ptr %5, align 8
Instruction to be moved:   %102 = load i32, ptr %11, align 4
Instruction to be moved:   %103 = sext i32 %100 to i64
Instruction to be moved:   %104 = getelementptr inbounds double, ptr %99, i64 %101
Instruction to be moved:   %105 = load ptr, ptr %5, align 8
Instruction to be moved:   %106 = load i32, ptr %13, align 4
Instruction to be moved:   %107 = sext i32 %104 to i64
Instruction to be moved:   %108 = getelementptr inbounds double, ptr %103, i64 %105
Instruction to be moved:   %109 = load ptr, ptr %5, align 8
Instruction to be moved:   %110 = load i32, ptr %11, align 4
Instruction to be moved:   %111 = sext i32 %108 to i64
Instruction to be moved:   %112 = getelementptr inbounds double, ptr %107, i64 %109
Instruction to be moved:   %113 = load double, ptr %28, align 8
Instruction to be moved:   %114 = load ptr, ptr %5, align 8
Instruction to be moved:   %115 = load i32, ptr %13, align 4
Instruction to be moved:   %116 = sext i32 %113 to i64
Instruction to be moved:   %117 = getelementptr inbounds double, ptr %112, i64 %114
Instruction to be moved:   %118 = load ptr, ptr %5, align 8
Instruction to be moved:   %119 = load i32, ptr %11, align 4
Instruction to be moved:   %120 = add nsw i32 %117, 1
Instruction to be moved:   %121 = sext i32 %118 to i64
Instruction to be moved:   %122 = getelementptr inbounds double, ptr %116, i64 %119
Instruction to be moved:   %123 = load ptr, ptr %5, align 8
Instruction to be moved:   %124 = load i32, ptr %13, align 4
Instruction to be moved:   %125 = add nsw i32 %122, 1
Instruction to be moved:   %126 = sext i32 %123 to i64
Instruction to be moved:   %127 = getelementptr inbounds double, ptr %121, i64 %124
Instruction to be moved:   %128 = load ptr, ptr %5, align 8
Instruction to be moved:   %129 = load i32, ptr %11, align 4
Instruction to be moved:   %130 = add nsw i32 %127, 1
Instruction to be moved:   %131 = sext i32 %128 to i64
Instruction to be moved:   %132 = getelementptr inbounds double, ptr %126, i64 %129
Instruction to be moved:   %133 = load double, ptr %28, align 8
Instruction to be moved:   %134 = load ptr, ptr %5, align 8
Instruction to be moved:   %135 = load i32, ptr %13, align 4
Instruction to be moved:   %136 = add nsw i32 %133, 1
Instruction to be moved:   %137 = sext i32 %134 to i64
Instruction to be moved:   %138 = getelementptr inbounds double, ptr %132, i64 %135
Instruction to be moved:   %139 = load i32, ptr %15, align 4
Instruction to be moved:   %140 = load i32, ptr %11, align 4
Instruction to be moved:   %141 = add nsw i32 %138, %137
Instruction to be moved:   %151 = load i32, ptr %9, align 4
Instruction to be moved:   %152 = add nsw i32 %140, 2
Instruction to be moved:   %75 = load i32, ptr %10, align 4
Instruction to be moved:   %76 = load i32, ptr %15, align 4
Instruction to be moved:   %77 = icmp sle i32 %74, %75
Instruction to be moved:   %79 = load i32, ptr %10, align 4
Instruction to be moved:   %80 = load i32, ptr %12, align 4
Instruction to be moved:   %81 = icmp slt i32 %77, %78
Instruction to be moved:   %83 = load i32, ptr %10, align 4
Instruction to be moved:   %84 = load i32, ptr %9, align 4
Instruction to be moved:   %85 = load i32, ptr %10, align 4
Instruction to be moved:   %86 = load i32, ptr %14, align 4
Instruction to be moved:   %87 = add nsw i32 %82, %83
Instruction to be moved:   %88 = sub nsw i32 %84, 2
Instruction to be moved:   %89 = icmp sle i32 %81, %85
Instruction to be moved:   %90 = load i32, ptr %9, align 4
Instruction to be moved:   %91 = load i32, ptr %11, align 4
Instruction to be moved:   %92 = load i32, ptr %16, align 4
Instruction to be moved:   %93 = icmp sle i32 %88, %89
Instruction to be moved:   %94 = load i32, ptr %12, align 4
Instruction to be moved:   %95 = load i32, ptr %11, align 4
Instruction to be moved:   %96 = add nsw i32 %91, %92
Instruction to be moved:   %97 = load i32, ptr %10, align 4
Instruction to be moved:   %98 = sub nsw i32 %93, %94
Instruction to be moved:   %99 = load ptr, ptr %5, align 8
Instruction to be moved:   %100 = load i32, ptr %11, align 4
Instruction to be moved:   %101 = sext i32 %97 to i64
Instruction to be moved:   %102 = getelementptr inbounds double, ptr %96, i64 %98
Instruction to be moved:   %103 = load ptr, ptr %5, align 8
Instruction to be moved:   %104 = load i32, ptr %13, align 4
Instruction to be moved:   %105 = sext i32 %101 to i64
Instruction to be moved:   %106 = getelementptr inbounds double, ptr %100, i64 %102
Instruction to be moved:   %107 = load ptr, ptr %5, align 8
Instruction to be moved:   %108 = load i32, ptr %11, align 4
Instruction to be moved:   %109 = sext i32 %105 to i64
Instruction to be moved:   %110 = getelementptr inbounds double, ptr %104, i64 %106
Instruction to be moved:   %111 = load double, ptr %28, align 8
Instruction to be moved:   %112 = load ptr, ptr %5, align 8
Instruction to be moved:   %113 = load i32, ptr %13, align 4
Instruction to be moved:   %114 = sext i32 %110 to i64
Instruction to be moved:   %115 = getelementptr inbounds double, ptr %109, i64 %111
Instruction to be moved:   %116 = load ptr, ptr %5, align 8
Instruction to be moved:   %117 = load i32, ptr %11, align 4
Instruction to be moved:   %118 = add nsw i32 %114, 1
Instruction to be moved:   %119 = sext i32 %115 to i64
Instruction to be moved:   %120 = getelementptr inbounds double, ptr %113, i64 %116
Instruction to be moved:   %121 = load ptr, ptr %5, align 8
Instruction to be moved:   %122 = load i32, ptr %13, align 4
Instruction to be moved:   %123 = add nsw i32 %119, 1
Instruction to be moved:   %124 = sext i32 %120 to i64
Instruction to be moved:   %125 = getelementptr inbounds double, ptr %118, i64 %121
Instruction to be moved:   %126 = load ptr, ptr %5, align 8
Instruction to be moved:   %127 = load i32, ptr %11, align 4
Instruction to be moved:   %128 = add nsw i32 %124, 1
Instruction to be moved:   %129 = sext i32 %125 to i64
Instruction to be moved:   %130 = getelementptr inbounds double, ptr %123, i64 %126
Instruction to be moved:   %131 = load double, ptr %28, align 8
Instruction to be moved:   %132 = load ptr, ptr %5, align 8
Instruction to be moved:   %133 = load i32, ptr %13, align 4
Instruction to be moved:   %134 = add nsw i32 %130, 1
Instruction to be moved:   %135 = sext i32 %131 to i64
Instruction to be moved:   %136 = getelementptr inbounds double, ptr %129, i64 %132
Instruction to be moved:   %137 = load i32, ptr %15, align 4
Instruction to be moved:   %138 = load i32, ptr %11, align 4
Instruction to be moved:   %139 = add nsw i32 %135, %134
Instruction to be moved:   %140 = load i32, ptr %9, align 4
Instruction to be moved:   %141 = add nsw i32 %137, 2
Instruction to be moved:   %155 = load i32, ptr %15, align 4
Instruction to be moved:   %156 = ashr i32 %139, 1
Instruction to be moved:   %157 = load i32, ptr %19, align 4
Instruction to be moved:   %158 = load i32, ptr %14, align 4
Instruction to be moved:   %159 = icmp sge i32 %141, %142
Instruction to be moved:   %160 = load i32, ptr %12, align 4
Instruction to be moved:   %161 = load i32, ptr %19, align 4
Instruction to be moved:   %162 = icmp sgt i32 %144, %145
Instruction to be moved:   %163 = load i32, ptr %19, align 4
Instruction to be moved:   %164 = load i32, ptr %12, align 4
Instruction to be moved:   %165 = sub nsw i32 %148, %147
Instruction to be moved:   %166 = load i32, ptr %19, align 4
Instruction to be moved:   %167 = ashr i32 %150, 1
Instruction to be moved:   %174 = load i32, ptr %19, align 4
Instruction to be moved:   %175 = load i32, ptr %12, align 4
Instruction to be moved:   %176 = add nsw i32 %153, %152
Instruction to be moved:   %152 = load i32, ptr %19, align 4
Instruction to be moved:   %152 = load i32, ptr %12, align 4
Instruction to be moved:   %152 = add nsw i32 %154, %153
Instruction to be moved:   %178 = load i32, ptr %14, align 4
Instruction to be moved:   %179 = load i32, ptr %10, align 4
Instruction to be moved:   %180 = add nsw i32 %156, %155
Instruction to be moved:   %155 = load i32, ptr %14, align 4
Instruction to be moved:   %155 = load i32, ptr %10, align 4
Instruction to be moved:   %155 = add nsw i32 %157, %156
Instruction to be moved:   %53 = load i32, ptr %20, align 4
Instruction to be moved:   %54 = icmp sge i32 %52, 1
Instruction to be moved:   %56 = load ptr, ptr %6, align 8
Instruction to be moved:   %57 = load i32, ptr %20, align 4
Instruction to be moved:   %58 = sext i32 %55 to i64
Instruction to be moved:   %59 = getelementptr inbounds i32, ptr %54, i64 %56
Instruction to be moved:   %61 = load i32, ptr %26, align 4
Instruction to be moved:   %62 = load i32, ptr %23, align 4
Instruction to be moved:   %63 = load i32, ptr %24, align 4
Instruction to be moved:   %64 = mul nsw i32 %59, %60
Instruction to be moved:   %66 = load i32, ptr %24, align 4
Instruction to be moved:   %67 = shl i32 %62, 1
Instruction to be moved:   %68 = load i32, ptr %14, align 4
Instruction to be moved:   %69 = load i32, ptr %23, align 4
Instruction to be moved:   %70 = mul nsw i32 %64, %65
Instruction to be moved:   %71 = load i32, ptr %15, align 4
Instruction to be moved:   %72 = load i32, ptr %25, align 4
Instruction to be moved:   %73 = mul nsw i32 %67, %68
Instruction to be moved:   %74 = load i32, ptr %10, align 4
Instruction to be moved:   %75 = load i32, ptr %15, align 4
Instruction to be moved:   %76 = icmp sle i32 %70, %71
Instruction to be moved:   %77 = load i32, ptr %10, align 4
Instruction to be moved:   %78 = load i32, ptr %12, align 4
Instruction to be moved:   %79 = icmp slt i32 %73, %74
Instruction to be moved:   %80 = load i32, ptr %10, align 4
Instruction to be moved:   %81 = load i32, ptr %9, align 4
Instruction to be moved:   %82 = load i32, ptr %10, align 4
Instruction to be moved:   %83 = load i32, ptr %14, align 4
Instruction to be moved:   %84 = add nsw i32 %78, %79
Instruction to be moved:   %85 = sub nsw i32 %80, 2
Instruction to be moved:   %86 = icmp sle i32 %77, %81
Instruction to be moved:   %87 = load i32, ptr %9, align 4
Instruction to be moved:   %88 = load i32, ptr %11, align 4
Instruction to be moved:   %89 = load i32, ptr %16, align 4
Instruction to be moved:   %90 = icmp sle i32 %84, %85
Instruction to be moved:   %91 = load i32, ptr %12, align 4
Instruction to be moved:   %92 = load i32, ptr %11, align 4
Instruction to be moved:   %93 = add nsw i32 %87, %88
Instruction to be moved:   %94 = load i32, ptr %10, align 4
Instruction to be moved:   %95 = sub nsw i32 %89, %90
Instruction to be moved:   %96 = load ptr, ptr %5, align 8
Instruction to be moved:   %97 = load i32, ptr %11, align 4
Instruction to be moved:   %98 = sext i32 %93 to i64
Instruction to be moved:   %99 = getelementptr inbounds double, ptr %92, i64 %94
Instruction to be moved:   %100 = load ptr, ptr %5, align 8
Instruction to be moved:   %101 = load i32, ptr %13, align 4
Instruction to be moved:   %102 = sext i32 %97 to i64
Instruction to be moved:   %103 = getelementptr inbounds double, ptr %96, i64 %98
Instruction to be moved:   %104 = load ptr, ptr %5, align 8
Instruction to be moved:   %105 = load i32, ptr %11, align 4
Instruction to be moved:   %106 = sext i32 %101 to i64
Instruction to be moved:   %107 = getelementptr inbounds double, ptr %100, i64 %102
Instruction to be moved:   %108 = load double, ptr %28, align 8
Instruction to be moved:   %109 = load ptr, ptr %5, align 8
Instruction to be moved:   %110 = load i32, ptr %13, align 4
Instruction to be moved:   %111 = sext i32 %106 to i64
Instruction to be moved:   %112 = getelementptr inbounds double, ptr %105, i64 %107
Instruction to be moved:   %113 = load ptr, ptr %5, align 8
Instruction to be moved:   %114 = load i32, ptr %11, align 4
Instruction to be moved:   %115 = add nsw i32 %110, 1
Instruction to be moved:   %116 = sext i32 %111 to i64
Instruction to be moved:   %117 = getelementptr inbounds double, ptr %109, i64 %112
Instruction to be moved:   %118 = load ptr, ptr %5, align 8
Instruction to be moved:   %119 = load i32, ptr %13, align 4
Instruction to be moved:   %120 = add nsw i32 %115, 1
Instruction to be moved:   %121 = sext i32 %116 to i64
Instruction to be moved:   %122 = getelementptr inbounds double, ptr %114, i64 %117
Instruction to be moved:   %123 = load ptr, ptr %5, align 8
Instruction to be moved:   %124 = load i32, ptr %11, align 4
Instruction to be moved:   %125 = add nsw i32 %120, 1
Instruction to be moved:   %126 = sext i32 %121 to i64
Instruction to be moved:   %127 = getelementptr inbounds double, ptr %119, i64 %122
Instruction to be moved:   %128 = load double, ptr %28, align 8
Instruction to be moved:   %129 = load ptr, ptr %5, align 8
Instruction to be moved:   %130 = load i32, ptr %13, align 4
Instruction to be moved:   %131 = add nsw i32 %126, 1
Instruction to be moved:   %132 = sext i32 %127 to i64
Instruction to be moved:   %133 = getelementptr inbounds double, ptr %125, i64 %128
Instruction to be moved:   %134 = load i32, ptr %15, align 4
Instruction to be moved:   %135 = load i32, ptr %11, align 4
Instruction to be moved:   %136 = add nsw i32 %131, %130
Instruction to be moved:   %137 = load i32, ptr %9, align 4
Instruction to be moved:   %138 = add nsw i32 %133, 2
Instruction to be moved:   %139 = load i32, ptr %15, align 4
Instruction to be moved:   %140 = ashr i32 %135, 1
Instruction to be moved:   %141 = load i32, ptr %19, align 4
Instruction to be moved:   %142 = load i32, ptr %14, align 4
Instruction to be moved:   %143 = icmp sge i32 %137, %138
Instruction to be moved:   %144 = load i32, ptr %12, align 4
Instruction to be moved:   %145 = load i32, ptr %19, align 4
Instruction to be moved:   %146 = icmp sgt i32 %140, %141
Instruction to be moved:   %147 = load i32, ptr %19, align 4
Instruction to be moved:   %148 = load i32, ptr %12, align 4
Instruction to be moved:   %149 = sub nsw i32 %144, %143
Instruction to be moved:   %150 = load i32, ptr %19, align 4
Instruction to be moved:   %151 = ashr i32 %146, 1
Instruction to be moved:   %152 = load i32, ptr %19, align 4
Instruction to be moved:   %153 = load i32, ptr %12, align 4
Instruction to be moved:   %154 = add nsw i32 %149, %148
Instruction to be moved:   %155 = load i32, ptr %14, align 4
Instruction to be moved:   %156 = load i32, ptr %10, align 4
Instruction to be moved:   %157 = add nsw i32 %152, %151
Instruction to be moved:   %182 = load i32, ptr %14, align 4
Instruction to be moved:   %183 = load i32, ptr %17, align 4
Instruction to be moved:   %184 = load i32, ptr %15, align 4
Instruction to be moved:   %185 = icmp slt i32 %155, %156
Instruction to be moved:   %186 = load i32, ptr %17, align 4
Instruction to be moved:   %187 = shl i32 %158, 1
Instruction to be moved:   %188 = load i32, ptr %8, align 4
Instruction to be moved:   %189 = sitofp i32 %160 to double
Instruction to be moved:   %190 = fmul double %161, 0x401921FB54442D1C
Instruction to be moved:   %191 = load i32, ptr %18, align 4
Instruction to be moved:   %192 = load i32, ptr %14, align 4
Instruction to be moved:   %193 = load double, ptr %29, align 8
Instruction to be moved:   %194 = fmul double 5.000000e-01, %165
Instruction to be moved:   %195 = load double, ptr %34, align 8
Instruction to be moved:   %196 = fmul double -2.000000e+00, %167
Instruction to be moved:   %197 = load double, ptr %34, align 8
Instruction to be moved:   %198 = fmul double %168, %169
Instruction to be moved:   %199 = load double, ptr %29, align 8
Instruction to be moved:   %200 = load i32, ptr %11, align 4
Instruction to be moved:   %201 = load i32, ptr %17, align 4
Instruction to be moved:   %202 = icmp sle i32 %172, %173
Instruction to be moved:   %203 = load i32, ptr %11, align 4
Instruction to be moved:   %204 = load i32, ptr %9, align 4
Instruction to be moved:   %205 = load i32, ptr %11, align 4
Instruction to be moved:   %206 = load i32, ptr %14, align 4
Instruction to be moved:   %207 = add nsw i32 %177, %178
Instruction to be moved:   %208 = sub nsw i32 %179, 2
Instruction to be moved:   %209 = icmp sle i32 %176, %180
Instruction to be moved:   %210 = load i32, ptr %9, align 4
Instruction to be moved:   %211 = load i32, ptr %10, align 4
Instruction to be moved:   %212 = load i32, ptr %16, align 4
Instruction to be moved:   %213 = icmp sle i32 %183, %184
Instruction to be moved:   %214 = load i32, ptr %10, align 4
Instruction to be moved:   %215 = load i32, ptr %21, align 4
Instruction to be moved:   %216 = load i32, ptr %17, align 4
Instruction to be moved:   %217 = add nsw i32 %187, %188
Instruction to be moved:   %218 = load double, ptr %33, align 8
Instruction to be moved:   %219 = load ptr, ptr %5, align 8
Instruction to be moved:   %220 = load i32, ptr %22, align 4
Instruction to be moved:   %221 = sext i32 %192 to i64
Instruction to be moved:   %222 = getelementptr inbounds double, ptr %191, i64 %193
Instruction to be moved:   %223 = load double, ptr %30, align 8
Instruction to be moved:   %224 = load ptr, ptr %5, align 8
Instruction to be moved:   %225 = load i32, ptr %22, align 4
Instruction to be moved:   %226 = add nsw i32 %197, 1
Instruction to be moved:   %227 = sext i32 %198 to i64
Instruction to be moved:   %228 = getelementptr inbounds double, ptr %196, i64 %199
Instruction to be moved:   %229 = load double, ptr %33, align 8
Instruction to be moved:   %230 = load ptr, ptr %5, align 8
Instruction to be moved:   %231 = load i32, ptr %22, align 4
Instruction to be moved:   %232 = add nsw i32 %203, 1
Instruction to be moved:   %233 = sext i32 %204 to i64
Instruction to be moved:   %234 = getelementptr inbounds double, ptr %202, i64 %205
Instruction to be moved:   %235 = load double, ptr %30, align 8
Instruction to be moved:   %236 = load ptr, ptr %5, align 8
Instruction to be moved:   %237 = load i32, ptr %22, align 4
Instruction to be moved:   %238 = sext i32 %209 to i64
Instruction to be moved:   %239 = getelementptr inbounds double, ptr %208, i64 %210
Instruction to be moved:   %240 = load ptr, ptr %5, align 8
Instruction to be moved:   %241 = load i32, ptr %21, align 4
Instruction to be moved:   %242 = sext i32 %213 to i64
Instruction to be moved:   %243 = getelementptr inbounds double, ptr %212, i64 %214
Instruction to be moved:   %244 = load double, ptr %28, align 8
Instruction to be moved:   %245 = load ptr, ptr %5, align 8
Instruction to be moved:   %246 = load i32, ptr %22, align 4
Instruction to be moved:   %247 = sext i32 %218 to i64
Instruction to be moved:   %248 = getelementptr inbounds double, ptr %217, i64 %219
Instruction to be moved:   %249 = load ptr, ptr %5, align 8
Instruction to be moved:   %250 = load i32, ptr %21, align 4
Instruction to be moved:   %251 = add nsw i32 %222, 1
Instruction to be moved:   %252 = sext i32 %223 to i64
Instruction to be moved:   %253 = getelementptr inbounds double, ptr %221, i64 %224
Instruction to be moved:   %254 = load double, ptr %27, align 8
Instruction to be moved:   %255 = load ptr, ptr %5, align 8
Instruction to be moved:   %256 = load i32, ptr %22, align 4
Instruction to be moved:   %257 = add nsw i32 %228, 1
Instruction to be moved:   %258 = sext i32 %229 to i64
Instruction to be moved:   %259 = getelementptr inbounds double, ptr %227, i64 %230
Instruction to be moved:   %260 = load double, ptr %28, align 8
Instruction to be moved:   %261 = load ptr, ptr %5, align 8
Instruction to be moved:   %262 = load i32, ptr %21, align 4
Instruction to be moved:   %263 = sext i32 %234 to i64
Instruction to be moved:   %264 = getelementptr inbounds double, ptr %233, i64 %235
Instruction to be moved:   %265 = load double, ptr %27, align 8
Instruction to be moved:   %266 = load ptr, ptr %5, align 8
Instruction to be moved:   %267 = load i32, ptr %21, align 4
Instruction to be moved:   %268 = add nsw i32 %239, 1
Instruction to be moved:   %269 = sext i32 %240 to i64
Instruction to be moved:   %270 = getelementptr inbounds double, ptr %238, i64 %241
Instruction to be moved:   %271 = load i32, ptr %18, align 4
Instruction to be moved:   %272 = load i32, ptr %10, align 4
Instruction to be moved:   %273 = add nsw i32 %244, %243
Instruction to be moved:   %274 = load i32, ptr %9, align 4
Instruction to be moved:   %275 = add nsw i32 %246, 2
Instruction to be moved:   %276 = load double, ptr %33, align 8
Instruction to be moved:   %277 = load double, ptr %32, align 8
Instruction to be moved:   %278 = load double, ptr %30, align 8
Instruction to be moved:   %279 = load double, ptr %31, align 8
Instruction to be moved:   %280 = fmul double %250, %251
Instruction to be moved:   %281 = fneg double %252
Instruction to be moved:   %282 = load double, ptr %33, align 8
Instruction to be moved:   %283 = load double, ptr %30, align 8
Instruction to be moved:   %284 = load double, ptr %32, align 8
Instruction to be moved:   %285 = load double, ptr %34, align 8
Instruction to be moved:   %286 = load double, ptr %31, align 8
Instruction to be moved:   %287 = fmul double %257, %258
Instruction to be moved:   %288 = load double, ptr %30, align 8
Instruction to be moved:   %289 = load i32, ptr %14, align 4
Instruction to be moved:   %290 = load i32, ptr %11, align 4
Instruction to be moved:   %291 = add nsw i32 %262, %261
Instruction to be moved:   %292 = load i32, ptr %18, align 4
Instruction to be moved:   %334 = load i32, ptr %23, align 4
Instruction to be moved:   %335 = load i32, ptr %24, align 4
Instruction to be moved:   %336 = mul nsw i32 %266, %265
Instruction to be moved:   %338 = load i32, ptr %20, align 4
Instruction to be moved:   %339 = add nsw i32 %268, -1
Instruction to be moved:   %36 = load i32, ptr %20, align 4
Instruction to be moved:   %37 = load i32, ptr %7, align 4
Instruction to be moved:   %38 = icmp sle i32 %35, %36
Instruction to be moved:   %40 = load ptr, ptr %6, align 8
Instruction to be moved:   %41 = load i32, ptr %20, align 4
Instruction to be moved:   %42 = sext i32 %39 to i64
Instruction to be moved:   %43 = getelementptr inbounds i32, ptr %38, i64 %40
Instruction to be moved:   %45 = load i32, ptr %26, align 4
Instruction to be moved:   %48 = load i32, ptr %20, align 4
Instruction to be moved:   %49 = add nsw i32 %43, 1
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 601
[UnitLICM]: NumComputeHoisted: 249
[UnitLICM]: Total: 1033
UnitSCCP running on fourn
Visiting BB: 
VisitInstr:   %5 = alloca ptr, align 8
Check LatCell: 0
In Meet:   %5 = alloca ptr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %5 = alloca ptr, align 8
VisitInstr:   %6 = alloca ptr, align 8
Check LatCell: 0
In Meet:   %6 = alloca ptr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %6 = alloca ptr, align 8
VisitInstr:   %7 = alloca i32, align 4
Check LatCell: 0
In Meet:   %7 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %7 = alloca i32, align 4
VisitInstr:   %8 = alloca i32, align 4
Check LatCell: 0
In Meet:   %8 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %8 = alloca i32, align 4
VisitInstr:   %9 = alloca i32, align 4
Check LatCell: 0
In Meet:   %9 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %9 = alloca i32, align 4
VisitInstr:   %10 = alloca i32, align 4
Check LatCell: 0
In Meet:   %10 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %10 = alloca i32, align 4
VisitInstr:   %11 = alloca i32, align 4
Check LatCell: 0
In Meet:   %11 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %11 = alloca i32, align 4
VisitInstr:   %12 = alloca i32, align 4
Check LatCell: 0
In Meet:   %12 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %12 = alloca i32, align 4
VisitInstr:   %13 = alloca i32, align 4
Check LatCell: 0
In Meet:   %13 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %13 = alloca i32, align 4
VisitInstr:   %14 = alloca i32, align 4
Check LatCell: 0
In Meet:   %14 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %14 = alloca i32, align 4
VisitInstr:   %15 = alloca i32, align 4
Check LatCell: 0
In Meet:   %15 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %15 = alloca i32, align 4
VisitInstr:   %16 = alloca i32, align 4
Check LatCell: 0
In Meet:   %16 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %16 = alloca i32, align 4
VisitInstr:   %17 = alloca i32, align 4
Check LatCell: 0
In Meet:   %17 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %17 = alloca i32, align 4
VisitInstr:   %18 = alloca i32, align 4
Check LatCell: 0
In Meet:   %18 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %18 = alloca i32, align 4
VisitInstr:   %19 = alloca i32, align 4
Check LatCell: 0
In Meet:   %19 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %19 = alloca i32, align 4
VisitInstr:   %20 = alloca i32, align 4
Check LatCell: 0
In Meet:   %20 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %20 = alloca i32, align 4
VisitInstr:   %21 = alloca i32, align 4
Check LatCell: 0
In Meet:   %21 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %21 = alloca i32, align 4
VisitInstr:   %22 = alloca i32, align 4
Check LatCell: 0
In Meet:   %22 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %22 = alloca i32, align 4
VisitInstr:   %23 = alloca i32, align 4
Check LatCell: 0
In Meet:   %23 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %23 = alloca i32, align 4
VisitInstr:   %24 = alloca i32, align 4
Check LatCell: 0
In Meet:   %24 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %24 = alloca i32, align 4
VisitInstr:   %25 = alloca i32, align 4
Check LatCell: 0
In Meet:   %25 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %25 = alloca i32, align 4
VisitInstr:   %26 = alloca i32, align 4
Check LatCell: 0
In Meet:   %26 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %26 = alloca i32, align 4
VisitInstr:   %27 = alloca double, align 8
Check LatCell: 0
In Meet:   %27 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %27 = alloca double, align 8
VisitInstr:   %28 = alloca double, align 8
Check LatCell: 0
In Meet:   %28 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %28 = alloca double, align 8
VisitInstr:   %29 = alloca double, align 8
Check LatCell: 0
In Meet:   %29 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %29 = alloca double, align 8
VisitInstr:   %30 = alloca double, align 8
Check LatCell: 0
In Meet:   %30 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %30 = alloca double, align 8
VisitInstr:   %31 = alloca double, align 8
Check LatCell: 0
In Meet:   %31 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %31 = alloca double, align 8
VisitInstr:   %32 = alloca double, align 8
Check LatCell: 0
In Meet:   %32 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %32 = alloca double, align 8
VisitInstr:   %33 = alloca double, align 8
Check LatCell: 0
In Meet:   %33 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %33 = alloca double, align 8
VisitInstr:   %34 = alloca double, align 8
Check LatCell: 0
In Meet:   %34 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %34 = alloca double, align 8
VisitInstr:   store ptr %0, ptr %5, align 8
Check LatCell: 0
In Meet:   store ptr %0, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store ptr %0, ptr %5, align 8
VisitInstr:   store ptr %1, ptr %6, align 8
Check LatCell: 0
In Meet:   store ptr %1, ptr %6, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store ptr %1, ptr %6, align 8
VisitInstr:   store i32 %2, ptr %7, align 4
Check LatCell: 0
In Meet:   store i32 %2, ptr %7, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %2, ptr %7, align 4
VisitInstr:   store i32 %3, ptr %8, align 4
Check LatCell: 0
In Meet:   store i32 %3, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %3, ptr %8, align 4
VisitInstr:   store i32 1, ptr %26, align 4
Check LatCell: 0
In Meet:   store i32 1, ptr %26, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 1, ptr %26, align 4
VisitInstr:   store i32 1, ptr %20, align 4
Check LatCell: 0
In Meet:   store i32 1, ptr %20, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 1, ptr %20, align 4
VisitInstr:   %35 = load i32, ptr %20, align 4
Check LatCell: 0
In Meet:   %35 = load i32, ptr %20, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %35 = load i32, ptr %20, align 4
VisitInstr:   %36 = load i32, ptr %7, align 4
Check LatCell: 0
In Meet:   %36 = load i32, ptr %7, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %36 = load i32, ptr %7, align 4
VisitInstr:   %37 = icmp sle i32 %35, %36
CmpInst:   %37 = icmp sle i32 %35, %36
Check LatCell: 0
In Meet:   %37 = icmp sle i32 %35, %36, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %37 = icmp sle i32 %35, %36
VisitInstr:   %38 = load ptr, ptr %6, align 8
Check LatCell: 0
In Meet:   %38 = load ptr, ptr %6, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %38 = load ptr, ptr %6, align 8
VisitInstr:   %39 = load i32, ptr %20, align 4
Check LatCell: 0
In Meet:   %39 = load i32, ptr %20, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %39 = load i32, ptr %20, align 4
VisitInstr:   %40 = sext i32 %39 to i64
UnaryOp:   %40 = sext i32 %39 to i64
Check LatCell: 0
In Meet:   %40 = sext i32 %39 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %40 = sext i32 %39 to i64
VisitInstr:   %41 = getelementptr inbounds i32, ptr %38, i64 %40
GetElementPtr:   %41 = getelementptr inbounds i32, ptr %38, i64 %40
Check LatCell: 0
In Meet:   %41 = getelementptr inbounds i32, ptr %38, i64 %40, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %41 = getelementptr inbounds i32, ptr %38, i64 %40
VisitInstr:   %42 = load i32, ptr %26, align 4
Check LatCell: 0
In Meet:   %42 = load i32, ptr %26, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %42 = load i32, ptr %26, align 4
VisitInstr:   %43 = load i32, ptr %20, align 4
Check LatCell: 0
In Meet:   %43 = load i32, ptr %20, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %43 = load i32, ptr %20, align 4
VisitInstr:   %44 = add nsw i32 %43, 1
BinaryOp:   %44 = add nsw i32 %43, 1
Check LatCell: 0
In Meet:   %44 = add nsw i32 %43, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %44 = add nsw i32 %43, 1
VisitInstr:   br label %45
BranchInst:   br label %45
In AddEdge: 0x5611285f31e0, 0x5611285f4320, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %37, label %46, label %50
BranchInst:   br i1 %37, label %46, label %50
In BranchInst: -1, 0x0
In AddEdge: 0x5611285f3230, 0x5611285f4620, 0
Adding edge:  -> 
In AddEdge: 0x5611285f3230, 0x5611285f4620, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %47 = load i32, ptr %41, align 4
Check LatCell: 0
In Meet:   %47 = load i32, ptr %41, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %47 = load i32, ptr %41, align 4
VisitInstr:   %48 = mul nsw i32 %42, %47
BinaryOp:   %48 = mul nsw i32 %42, %47
Check LatCell: 0
In Meet:   %48 = mul nsw i32 %42, %47, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %48 = mul nsw i32 %42, %47
VisitInstr:   store i32 %48, ptr %26, align 4
Check LatCell: 0
In Meet:   store i32 %48, ptr %26, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %48, ptr %26, align 4
VisitInstr:   br label %49
BranchInst:   br label %49
In AddEdge: 0x5611285f44e0, 0x5611285f4ad0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 1, ptr %24, align 4
Check LatCell: 0
In Meet:   store i32 1, ptr %24, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 1, ptr %24, align 4
VisitInstr:   %51 = load i32, ptr %7, align 4
Check LatCell: 0
In Meet:   %51 = load i32, ptr %7, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %51 = load i32, ptr %7, align 4
VisitInstr:   store i32 %51, ptr %20, align 4
Check LatCell: 0
In Meet:   store i32 %51, ptr %20, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %51, ptr %20, align 4
VisitInstr:   %52 = load i32, ptr %20, align 4
Check LatCell: 0
In Meet:   %52 = load i32, ptr %20, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %52 = load i32, ptr %20, align 4
VisitInstr:   %53 = icmp sge i32 %52, 1
CmpInst:   %53 = icmp sge i32 %52, 1
Check LatCell: 0
In Meet:   %53 = icmp sge i32 %52, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %53 = icmp sge i32 %52, 1
VisitInstr:   %54 = load ptr, ptr %6, align 8
Check LatCell: 0
In Meet:   %54 = load ptr, ptr %6, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %54 = load ptr, ptr %6, align 8
VisitInstr:   %55 = load i32, ptr %20, align 4
Check LatCell: 0
In Meet:   %55 = load i32, ptr %20, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %55 = load i32, ptr %20, align 4
VisitInstr:   %56 = sext i32 %55 to i64
UnaryOp:   %56 = sext i32 %55 to i64
Check LatCell: 0
In Meet:   %56 = sext i32 %55 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %56 = sext i32 %55 to i64
VisitInstr:   %57 = getelementptr inbounds i32, ptr %54, i64 %56
GetElementPtr:   %57 = getelementptr inbounds i32, ptr %54, i64 %56
Check LatCell: 0
In Meet:   %57 = getelementptr inbounds i32, ptr %54, i64 %56, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %57 = getelementptr inbounds i32, ptr %54, i64 %56
VisitInstr:   %58 = load i32, ptr %26, align 4
Check LatCell: 0
In Meet:   %58 = load i32, ptr %26, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %58 = load i32, ptr %26, align 4
VisitInstr:   %59 = load i32, ptr %23, align 4
Check LatCell: 0
In Meet:   %59 = load i32, ptr %23, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %59 = load i32, ptr %23, align 4
VisitInstr:   %60 = load i32, ptr %24, align 4
Check LatCell: 0
In Meet:   %60 = load i32, ptr %24, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %60 = load i32, ptr %24, align 4
VisitInstr:   %61 = mul nsw i32 %59, %60
BinaryOp:   %61 = mul nsw i32 %59, %60
Check LatCell: 0
In Meet:   %61 = mul nsw i32 %59, %60, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %61 = mul nsw i32 %59, %60
VisitInstr:   %62 = load i32, ptr %24, align 4
Check LatCell: 0
In Meet:   %62 = load i32, ptr %24, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %62 = load i32, ptr %24, align 4
VisitInstr:   %63 = shl i32 %62, 1
BinaryOp:   %63 = shl i32 %62, 1
Check LatCell: 0
In Meet:   %63 = shl i32 %62, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %63 = shl i32 %62, 1
VisitInstr:   %64 = load i32, ptr %14, align 4
Check LatCell: 0
In Meet:   %64 = load i32, ptr %14, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %64 = load i32, ptr %14, align 4
VisitInstr:   %65 = load i32, ptr %23, align 4
Check LatCell: 0
In Meet:   %65 = load i32, ptr %23, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %65 = load i32, ptr %23, align 4
VisitInstr:   %66 = mul nsw i32 %64, %65
BinaryOp:   %66 = mul nsw i32 %64, %65
Check LatCell: 0
In Meet:   %66 = mul nsw i32 %64, %65, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %66 = mul nsw i32 %64, %65
VisitInstr:   %67 = load i32, ptr %15, align 4
Check LatCell: 0
In Meet:   %67 = load i32, ptr %15, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %67 = load i32, ptr %15, align 4
VisitInstr:   %68 = load i32, ptr %25, align 4
Check LatCell: 0
In Meet:   %68 = load i32, ptr %25, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %68 = load i32, ptr %25, align 4
VisitInstr:   %69 = mul nsw i32 %67, %68
BinaryOp:   %69 = mul nsw i32 %67, %68
Check LatCell: 0
In Meet:   %69 = mul nsw i32 %67, %68, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %69 = mul nsw i32 %67, %68
VisitInstr:   %70 = load i32, ptr %10, align 4
Check LatCell: 0
In Meet:   %70 = load i32, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %70 = load i32, ptr %10, align 4
VisitInstr:   %71 = load i32, ptr %15, align 4
Check LatCell: 0
In Meet:   %71 = load i32, ptr %15, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %71 = load i32, ptr %15, align 4
VisitInstr:   %72 = icmp sle i32 %70, %71
CmpInst:   %72 = icmp sle i32 %70, %71
Check LatCell: 0
In Meet:   %72 = icmp sle i32 %70, %71, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %72 = icmp sle i32 %70, %71
VisitInstr:   %73 = load i32, ptr %10, align 4
Check LatCell: 0
In Meet:   %73 = load i32, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %73 = load i32, ptr %10, align 4
VisitInstr:   %74 = load i32, ptr %12, align 4
Check LatCell: 0
In Meet:   %74 = load i32, ptr %12, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %74 = load i32, ptr %12, align 4
VisitInstr:   %75 = icmp slt i32 %73, %74
CmpInst:   %75 = icmp slt i32 %73, %74
Check LatCell: 0
In Meet:   %75 = icmp slt i32 %73, %74, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %75 = icmp slt i32 %73, %74
VisitInstr:   %76 = load i32, ptr %10, align 4
Check LatCell: 0
In Meet:   %76 = load i32, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %76 = load i32, ptr %10, align 4
VisitInstr:   %77 = load i32, ptr %9, align 4
Check LatCell: 0
In Meet:   %77 = load i32, ptr %9, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %77 = load i32, ptr %9, align 4
VisitInstr:   %78 = load i32, ptr %10, align 4
Check LatCell: 0
In Meet:   %78 = load i32, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %78 = load i32, ptr %10, align 4
VisitInstr:   %79 = load i32, ptr %14, align 4
Check LatCell: 0
In Meet:   %79 = load i32, ptr %14, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %79 = load i32, ptr %14, align 4
VisitInstr:   %80 = add nsw i32 %78, %79
BinaryOp:   %80 = add nsw i32 %78, %79
Check LatCell: 0
In Meet:   %80 = add nsw i32 %78, %79, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %80 = add nsw i32 %78, %79
VisitInstr:   %81 = sub nsw i32 %80, 2
BinaryOp:   %81 = sub nsw i32 %80, 2
Check LatCell: 0
In Meet:   %81 = sub nsw i32 %80, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %81 = sub nsw i32 %80, 2
VisitInstr:   %82 = icmp sle i32 %77, %81
CmpInst:   %82 = icmp sle i32 %77, %81
Check LatCell: 0
In Meet:   %82 = icmp sle i32 %77, %81, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %82 = icmp sle i32 %77, %81
VisitInstr:   %83 = load i32, ptr %9, align 4
Check LatCell: 0
In Meet:   %83 = load i32, ptr %9, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %83 = load i32, ptr %9, align 4
VisitInstr:   %84 = load i32, ptr %11, align 4
Check LatCell: 0
In Meet:   %84 = load i32, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %84 = load i32, ptr %11, align 4
VisitInstr:   %85 = load i32, ptr %16, align 4
Check LatCell: 0
In Meet:   %85 = load i32, ptr %16, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %85 = load i32, ptr %16, align 4
VisitInstr:   %86 = icmp sle i32 %84, %85
CmpInst:   %86 = icmp sle i32 %84, %85
Check LatCell: 0
In Meet:   %86 = icmp sle i32 %84, %85, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %86 = icmp sle i32 %84, %85
VisitInstr:   %87 = load i32, ptr %12, align 4
Check LatCell: 0
In Meet:   %87 = load i32, ptr %12, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %87 = load i32, ptr %12, align 4
VisitInstr:   %88 = load i32, ptr %11, align 4
Check LatCell: 0
In Meet:   %88 = load i32, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %88 = load i32, ptr %11, align 4
VisitInstr:   %89 = add nsw i32 %87, %88
BinaryOp:   %89 = add nsw i32 %87, %88
Check LatCell: 0
In Meet:   %89 = add nsw i32 %87, %88, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %89 = add nsw i32 %87, %88
VisitInstr:   %90 = load i32, ptr %10, align 4
Check LatCell: 0
In Meet:   %90 = load i32, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %90 = load i32, ptr %10, align 4
VisitInstr:   %91 = sub nsw i32 %89, %90
BinaryOp:   %91 = sub nsw i32 %89, %90
Check LatCell: 0
In Meet:   %91 = sub nsw i32 %89, %90, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %91 = sub nsw i32 %89, %90
VisitInstr:   %92 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %92 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %92 = load ptr, ptr %5, align 8
VisitInstr:   %93 = load i32, ptr %11, align 4
Check LatCell: 0
In Meet:   %93 = load i32, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %93 = load i32, ptr %11, align 4
VisitInstr:   %94 = sext i32 %93 to i64
UnaryOp:   %94 = sext i32 %93 to i64
Check LatCell: 0
In Meet:   %94 = sext i32 %93 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %94 = sext i32 %93 to i64
VisitInstr:   %95 = getelementptr inbounds double, ptr %92, i64 %94
GetElementPtr:   %95 = getelementptr inbounds double, ptr %92, i64 %94
Check LatCell: 0
In Meet:   %95 = getelementptr inbounds double, ptr %92, i64 %94, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %95 = getelementptr inbounds double, ptr %92, i64 %94
VisitInstr:   %96 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %96 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %96 = load ptr, ptr %5, align 8
VisitInstr:   %97 = load i32, ptr %13, align 4
Check LatCell: 0
In Meet:   %97 = load i32, ptr %13, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %97 = load i32, ptr %13, align 4
VisitInstr:   %98 = sext i32 %97 to i64
UnaryOp:   %98 = sext i32 %97 to i64
Check LatCell: 0
In Meet:   %98 = sext i32 %97 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %98 = sext i32 %97 to i64
VisitInstr:   %99 = getelementptr inbounds double, ptr %96, i64 %98
GetElementPtr:   %99 = getelementptr inbounds double, ptr %96, i64 %98
Check LatCell: 0
In Meet:   %99 = getelementptr inbounds double, ptr %96, i64 %98, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %99 = getelementptr inbounds double, ptr %96, i64 %98
VisitInstr:   %100 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %100 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %100 = load ptr, ptr %5, align 8
VisitInstr:   %101 = load i32, ptr %11, align 4
Check LatCell: 0
In Meet:   %101 = load i32, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %101 = load i32, ptr %11, align 4
VisitInstr:   %102 = sext i32 %101 to i64
UnaryOp:   %102 = sext i32 %101 to i64
Check LatCell: 0
In Meet:   %102 = sext i32 %101 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %102 = sext i32 %101 to i64
VisitInstr:   %103 = getelementptr inbounds double, ptr %100, i64 %102
GetElementPtr:   %103 = getelementptr inbounds double, ptr %100, i64 %102
Check LatCell: 0
In Meet:   %103 = getelementptr inbounds double, ptr %100, i64 %102, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %103 = getelementptr inbounds double, ptr %100, i64 %102
VisitInstr:   %104 = load double, ptr %28, align 8
Check LatCell: 0
In Meet:   %104 = load double, ptr %28, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %104 = load double, ptr %28, align 8
VisitInstr:   %105 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %105 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %105 = load ptr, ptr %5, align 8
VisitInstr:   %106 = load i32, ptr %13, align 4
Check LatCell: 0
In Meet:   %106 = load i32, ptr %13, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %106 = load i32, ptr %13, align 4
VisitInstr:   %107 = sext i32 %106 to i64
UnaryOp:   %107 = sext i32 %106 to i64
Check LatCell: 0
In Meet:   %107 = sext i32 %106 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %107 = sext i32 %106 to i64
VisitInstr:   %108 = getelementptr inbounds double, ptr %105, i64 %107
GetElementPtr:   %108 = getelementptr inbounds double, ptr %105, i64 %107
Check LatCell: 0
In Meet:   %108 = getelementptr inbounds double, ptr %105, i64 %107, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %108 = getelementptr inbounds double, ptr %105, i64 %107
VisitInstr:   %109 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %109 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %109 = load ptr, ptr %5, align 8
VisitInstr:   %110 = load i32, ptr %11, align 4
Check LatCell: 0
In Meet:   %110 = load i32, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %110 = load i32, ptr %11, align 4
VisitInstr:   %111 = add nsw i32 %110, 1
BinaryOp:   %111 = add nsw i32 %110, 1
Check LatCell: 0
In Meet:   %111 = add nsw i32 %110, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %111 = add nsw i32 %110, 1
VisitInstr:   %112 = sext i32 %111 to i64
UnaryOp:   %112 = sext i32 %111 to i64
Check LatCell: 0
In Meet:   %112 = sext i32 %111 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %112 = sext i32 %111 to i64
VisitInstr:   %113 = getelementptr inbounds double, ptr %109, i64 %112
GetElementPtr:   %113 = getelementptr inbounds double, ptr %109, i64 %112
Check LatCell: 0
In Meet:   %113 = getelementptr inbounds double, ptr %109, i64 %112, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %113 = getelementptr inbounds double, ptr %109, i64 %112
VisitInstr:   %114 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %114 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %114 = load ptr, ptr %5, align 8
VisitInstr:   %115 = load i32, ptr %13, align 4
Check LatCell: 0
In Meet:   %115 = load i32, ptr %13, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %115 = load i32, ptr %13, align 4
VisitInstr:   %116 = add nsw i32 %115, 1
BinaryOp:   %116 = add nsw i32 %115, 1
Check LatCell: 0
In Meet:   %116 = add nsw i32 %115, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %116 = add nsw i32 %115, 1
VisitInstr:   %117 = sext i32 %116 to i64
UnaryOp:   %117 = sext i32 %116 to i64
Check LatCell: 0
In Meet:   %117 = sext i32 %116 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %117 = sext i32 %116 to i64
VisitInstr:   %118 = getelementptr inbounds double, ptr %114, i64 %117
GetElementPtr:   %118 = getelementptr inbounds double, ptr %114, i64 %117
Check LatCell: 0
In Meet:   %118 = getelementptr inbounds double, ptr %114, i64 %117, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %118 = getelementptr inbounds double, ptr %114, i64 %117
VisitInstr:   %119 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %119 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %119 = load ptr, ptr %5, align 8
VisitInstr:   %120 = load i32, ptr %11, align 4
Check LatCell: 0
In Meet:   %120 = load i32, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %120 = load i32, ptr %11, align 4
VisitInstr:   %121 = add nsw i32 %120, 1
BinaryOp:   %121 = add nsw i32 %120, 1
Check LatCell: 0
In Meet:   %121 = add nsw i32 %120, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %121 = add nsw i32 %120, 1
VisitInstr:   %122 = sext i32 %121 to i64
UnaryOp:   %122 = sext i32 %121 to i64
Check LatCell: 0
In Meet:   %122 = sext i32 %121 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %122 = sext i32 %121 to i64
VisitInstr:   %123 = getelementptr inbounds double, ptr %119, i64 %122
GetElementPtr:   %123 = getelementptr inbounds double, ptr %119, i64 %122
Check LatCell: 0
In Meet:   %123 = getelementptr inbounds double, ptr %119, i64 %122, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %123 = getelementptr inbounds double, ptr %119, i64 %122
VisitInstr:   %124 = load double, ptr %28, align 8
Check LatCell: 0
In Meet:   %124 = load double, ptr %28, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %124 = load double, ptr %28, align 8
VisitInstr:   %125 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %125 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %125 = load ptr, ptr %5, align 8
VisitInstr:   %126 = load i32, ptr %13, align 4
Check LatCell: 0
In Meet:   %126 = load i32, ptr %13, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %126 = load i32, ptr %13, align 4
VisitInstr:   %127 = add nsw i32 %126, 1
BinaryOp:   %127 = add nsw i32 %126, 1
Check LatCell: 0
In Meet:   %127 = add nsw i32 %126, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %127 = add nsw i32 %126, 1
VisitInstr:   %128 = sext i32 %127 to i64
UnaryOp:   %128 = sext i32 %127 to i64
Check LatCell: 0
In Meet:   %128 = sext i32 %127 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %128 = sext i32 %127 to i64
VisitInstr:   %129 = getelementptr inbounds double, ptr %125, i64 %128
GetElementPtr:   %129 = getelementptr inbounds double, ptr %125, i64 %128
Check LatCell: 0
In Meet:   %129 = getelementptr inbounds double, ptr %125, i64 %128, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %129 = getelementptr inbounds double, ptr %125, i64 %128
VisitInstr:   %130 = load i32, ptr %15, align 4
Check LatCell: 0
In Meet:   %130 = load i32, ptr %15, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %130 = load i32, ptr %15, align 4
VisitInstr:   %131 = load i32, ptr %11, align 4
Check LatCell: 0
In Meet:   %131 = load i32, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %131 = load i32, ptr %11, align 4
VisitInstr:   %132 = add nsw i32 %131, %130
BinaryOp:   %132 = add nsw i32 %131, %130
Check LatCell: 0
In Meet:   %132 = add nsw i32 %131, %130, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %132 = add nsw i32 %131, %130
VisitInstr:   %133 = load i32, ptr %9, align 4
Check LatCell: 0
In Meet:   %133 = load i32, ptr %9, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %133 = load i32, ptr %9, align 4
VisitInstr:   %134 = add nsw i32 %133, 2
BinaryOp:   %134 = add nsw i32 %133, 2
Check LatCell: 0
In Meet:   %134 = add nsw i32 %133, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %134 = add nsw i32 %133, 2
VisitInstr:   %135 = load i32, ptr %15, align 4
Check LatCell: 0
In Meet:   %135 = load i32, ptr %15, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %135 = load i32, ptr %15, align 4
VisitInstr:   %136 = ashr i32 %135, 1
BinaryOp:   %136 = ashr i32 %135, 1
Check LatCell: 0
In Meet:   %136 = ashr i32 %135, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %136 = ashr i32 %135, 1
VisitInstr:   %137 = load i32, ptr %19, align 4
Check LatCell: 0
In Meet:   %137 = load i32, ptr %19, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %137 = load i32, ptr %19, align 4
VisitInstr:   %138 = load i32, ptr %14, align 4
Check LatCell: 0
In Meet:   %138 = load i32, ptr %14, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %138 = load i32, ptr %14, align 4
VisitInstr:   %139 = icmp sge i32 %137, %138
CmpInst:   %139 = icmp sge i32 %137, %138
Check LatCell: 0
In Meet:   %139 = icmp sge i32 %137, %138, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %139 = icmp sge i32 %137, %138
VisitInstr:   %140 = load i32, ptr %12, align 4
Check LatCell: 0
In Meet:   %140 = load i32, ptr %12, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %140 = load i32, ptr %12, align 4
VisitInstr:   %141 = load i32, ptr %19, align 4
Check LatCell: 0
In Meet:   %141 = load i32, ptr %19, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %141 = load i32, ptr %19, align 4
VisitInstr:   %142 = icmp sgt i32 %140, %141
CmpInst:   %142 = icmp sgt i32 %140, %141
Check LatCell: 0
In Meet:   %142 = icmp sgt i32 %140, %141, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %142 = icmp sgt i32 %140, %141
VisitInstr:   %143 = load i32, ptr %19, align 4
Check LatCell: 0
In Meet:   %143 = load i32, ptr %19, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %143 = load i32, ptr %19, align 4
VisitInstr:   %144 = load i32, ptr %12, align 4
Check LatCell: 0
In Meet:   %144 = load i32, ptr %12, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %144 = load i32, ptr %12, align 4
VisitInstr:   %145 = sub nsw i32 %144, %143
BinaryOp:   %145 = sub nsw i32 %144, %143
Check LatCell: 0
In Meet:   %145 = sub nsw i32 %144, %143, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %145 = sub nsw i32 %144, %143
VisitInstr:   %146 = load i32, ptr %19, align 4
Check LatCell: 0
In Meet:   %146 = load i32, ptr %19, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %146 = load i32, ptr %19, align 4
VisitInstr:   %147 = ashr i32 %146, 1
BinaryOp:   %147 = ashr i32 %146, 1
Check LatCell: 0
In Meet:   %147 = ashr i32 %146, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %147 = ashr i32 %146, 1
VisitInstr:   %148 = load i32, ptr %19, align 4
Check LatCell: 0
In Meet:   %148 = load i32, ptr %19, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %148 = load i32, ptr %19, align 4
VisitInstr:   %149 = load i32, ptr %12, align 4
Check LatCell: 0
In Meet:   %149 = load i32, ptr %12, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %149 = load i32, ptr %12, align 4
VisitInstr:   %150 = add nsw i32 %149, %148
BinaryOp:   %150 = add nsw i32 %149, %148
Check LatCell: 0
In Meet:   %150 = add nsw i32 %149, %148, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %150 = add nsw i32 %149, %148
VisitInstr:   %151 = load i32, ptr %14, align 4
Check LatCell: 0
In Meet:   %151 = load i32, ptr %14, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %151 = load i32, ptr %14, align 4
VisitInstr:   %152 = load i32, ptr %10, align 4
Check LatCell: 0
In Meet:   %152 = load i32, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %152 = load i32, ptr %10, align 4
VisitInstr:   %153 = add nsw i32 %152, %151
BinaryOp:   %153 = add nsw i32 %152, %151
Check LatCell: 0
In Meet:   %153 = add nsw i32 %152, %151, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %153 = add nsw i32 %152, %151
VisitInstr:   %154 = load i32, ptr %14, align 4
Check LatCell: 0
In Meet:   %154 = load i32, ptr %14, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %154 = load i32, ptr %14, align 4
VisitInstr:   %155 = load i32, ptr %17, align 4
Check LatCell: 0
In Meet:   %155 = load i32, ptr %17, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %155 = load i32, ptr %17, align 4
VisitInstr:   %156 = load i32, ptr %15, align 4
Check LatCell: 0
In Meet:   %156 = load i32, ptr %15, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %156 = load i32, ptr %15, align 4
VisitInstr:   %157 = icmp slt i32 %155, %156
CmpInst:   %157 = icmp slt i32 %155, %156
Check LatCell: 0
In Meet:   %157 = icmp slt i32 %155, %156, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %157 = icmp slt i32 %155, %156
VisitInstr:   %158 = load i32, ptr %17, align 4
Check LatCell: 0
In Meet:   %158 = load i32, ptr %17, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %158 = load i32, ptr %17, align 4
VisitInstr:   %159 = shl i32 %158, 1
BinaryOp:   %159 = shl i32 %158, 1
Check LatCell: 0
In Meet:   %159 = shl i32 %158, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %159 = shl i32 %158, 1
VisitInstr:   %160 = load i32, ptr %8, align 4
Check LatCell: 0
In Meet:   %160 = load i32, ptr %8, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %160 = load i32, ptr %8, align 4
VisitInstr:   %161 = sitofp i32 %160 to double
UnaryOp:   %161 = sitofp i32 %160 to double
Check LatCell: 0
In Meet:   %161 = sitofp i32 %160 to double, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %161 = sitofp i32 %160 to double
VisitInstr:   %162 = fmul double %161, 0x401921FB54442D1C
BinaryOp:   %162 = fmul double %161, 0x401921FB54442D1C
Check LatCell: 0
In Meet:   %162 = fmul double %161, 0x401921FB54442D1C, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %162 = fmul double %161, 0x401921FB54442D1C
VisitInstr:   %163 = load i32, ptr %18, align 4
Check LatCell: 0
In Meet:   %163 = load i32, ptr %18, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %163 = load i32, ptr %18, align 4
VisitInstr:   %164 = load i32, ptr %14, align 4
Check LatCell: 0
In Meet:   %164 = load i32, ptr %14, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %164 = load i32, ptr %14, align 4
VisitInstr:   %165 = load double, ptr %29, align 8
Check LatCell: 0
In Meet:   %165 = load double, ptr %29, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %165 = load double, ptr %29, align 8
VisitInstr:   %166 = fmul double 5.000000e-01, %165
BinaryOp:   %166 = fmul double 5.000000e-01, %165
Check LatCell: 0
In Meet:   %166 = fmul double 5.000000e-01, %165, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %166 = fmul double 5.000000e-01, %165
VisitInstr:   %167 = load double, ptr %34, align 8
Check LatCell: 0
In Meet:   %167 = load double, ptr %34, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %167 = load double, ptr %34, align 8
VisitInstr:   %168 = fmul double -2.000000e+00, %167
BinaryOp:   %168 = fmul double -2.000000e+00, %167
Check LatCell: 0
In Meet:   %168 = fmul double -2.000000e+00, %167, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %168 = fmul double -2.000000e+00, %167
VisitInstr:   %169 = load double, ptr %34, align 8
Check LatCell: 0
In Meet:   %169 = load double, ptr %34, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %169 = load double, ptr %34, align 8
VisitInstr:   %170 = fmul double %168, %169
BinaryOp:   %170 = fmul double %168, %169
Check LatCell: 0
In Meet:   %170 = fmul double %168, %169, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %170 = fmul double %168, %169
VisitInstr:   %171 = load double, ptr %29, align 8
Check LatCell: 0
In Meet:   %171 = load double, ptr %29, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %171 = load double, ptr %29, align 8
VisitInstr:   %172 = load i32, ptr %11, align 4
Check LatCell: 0
In Meet:   %172 = load i32, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %172 = load i32, ptr %11, align 4
VisitInstr:   %173 = load i32, ptr %17, align 4
Check LatCell: 0
In Meet:   %173 = load i32, ptr %17, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %173 = load i32, ptr %17, align 4
VisitInstr:   %174 = icmp sle i32 %172, %173
CmpInst:   %174 = icmp sle i32 %172, %173
Check LatCell: 0
In Meet:   %174 = icmp sle i32 %172, %173, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %174 = icmp sle i32 %172, %173
VisitInstr:   %175 = load i32, ptr %11, align 4
Check LatCell: 0
In Meet:   %175 = load i32, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %175 = load i32, ptr %11, align 4
VisitInstr:   %176 = load i32, ptr %9, align 4
Check LatCell: 0
In Meet:   %176 = load i32, ptr %9, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %176 = load i32, ptr %9, align 4
VisitInstr:   %177 = load i32, ptr %11, align 4
Check LatCell: 0
In Meet:   %177 = load i32, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %177 = load i32, ptr %11, align 4
VisitInstr:   %178 = load i32, ptr %14, align 4
Check LatCell: 0
In Meet:   %178 = load i32, ptr %14, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %178 = load i32, ptr %14, align 4
VisitInstr:   %179 = add nsw i32 %177, %178
BinaryOp:   %179 = add nsw i32 %177, %178
Check LatCell: 0
In Meet:   %179 = add nsw i32 %177, %178, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %179 = add nsw i32 %177, %178
VisitInstr:   %180 = sub nsw i32 %179, 2
BinaryOp:   %180 = sub nsw i32 %179, 2
Check LatCell: 0
In Meet:   %180 = sub nsw i32 %179, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %180 = sub nsw i32 %179, 2
VisitInstr:   %181 = icmp sle i32 %176, %180
CmpInst:   %181 = icmp sle i32 %176, %180
Check LatCell: 0
In Meet:   %181 = icmp sle i32 %176, %180, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %181 = icmp sle i32 %176, %180
VisitInstr:   %182 = load i32, ptr %9, align 4
Check LatCell: 0
In Meet:   %182 = load i32, ptr %9, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %182 = load i32, ptr %9, align 4
VisitInstr:   %183 = load i32, ptr %10, align 4
Check LatCell: 0
In Meet:   %183 = load i32, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %183 = load i32, ptr %10, align 4
VisitInstr:   %184 = load i32, ptr %16, align 4
Check LatCell: 0
In Meet:   %184 = load i32, ptr %16, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %184 = load i32, ptr %16, align 4
VisitInstr:   %185 = icmp sle i32 %183, %184
CmpInst:   %185 = icmp sle i32 %183, %184
Check LatCell: 0
In Meet:   %185 = icmp sle i32 %183, %184, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %185 = icmp sle i32 %183, %184
VisitInstr:   %186 = load i32, ptr %10, align 4
Check LatCell: 0
In Meet:   %186 = load i32, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %186 = load i32, ptr %10, align 4
VisitInstr:   %187 = load i32, ptr %21, align 4
Check LatCell: 0
In Meet:   %187 = load i32, ptr %21, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %187 = load i32, ptr %21, align 4
VisitInstr:   %188 = load i32, ptr %17, align 4
Check LatCell: 0
In Meet:   %188 = load i32, ptr %17, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %188 = load i32, ptr %17, align 4
VisitInstr:   %189 = add nsw i32 %187, %188
BinaryOp:   %189 = add nsw i32 %187, %188
Check LatCell: 0
In Meet:   %189 = add nsw i32 %187, %188, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %189 = add nsw i32 %187, %188
VisitInstr:   %190 = load double, ptr %33, align 8
Check LatCell: 0
In Meet:   %190 = load double, ptr %33, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %190 = load double, ptr %33, align 8
VisitInstr:   %191 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %191 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %191 = load ptr, ptr %5, align 8
VisitInstr:   %192 = load i32, ptr %22, align 4
Check LatCell: 0
In Meet:   %192 = load i32, ptr %22, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %192 = load i32, ptr %22, align 4
VisitInstr:   %193 = sext i32 %192 to i64
UnaryOp:   %193 = sext i32 %192 to i64
Check LatCell: 0
In Meet:   %193 = sext i32 %192 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %193 = sext i32 %192 to i64
VisitInstr:   %194 = getelementptr inbounds double, ptr %191, i64 %193
GetElementPtr:   %194 = getelementptr inbounds double, ptr %191, i64 %193
Check LatCell: 0
In Meet:   %194 = getelementptr inbounds double, ptr %191, i64 %193, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %194 = getelementptr inbounds double, ptr %191, i64 %193
VisitInstr:   %195 = load double, ptr %30, align 8
Check LatCell: 0
In Meet:   %195 = load double, ptr %30, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %195 = load double, ptr %30, align 8
VisitInstr:   %196 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %196 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %196 = load ptr, ptr %5, align 8
VisitInstr:   %197 = load i32, ptr %22, align 4
Check LatCell: 0
In Meet:   %197 = load i32, ptr %22, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %197 = load i32, ptr %22, align 4
VisitInstr:   %198 = add nsw i32 %197, 1
BinaryOp:   %198 = add nsw i32 %197, 1
Check LatCell: 0
In Meet:   %198 = add nsw i32 %197, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %198 = add nsw i32 %197, 1
VisitInstr:   %199 = sext i32 %198 to i64
UnaryOp:   %199 = sext i32 %198 to i64
Check LatCell: 0
In Meet:   %199 = sext i32 %198 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %199 = sext i32 %198 to i64
VisitInstr:   %200 = getelementptr inbounds double, ptr %196, i64 %199
GetElementPtr:   %200 = getelementptr inbounds double, ptr %196, i64 %199
Check LatCell: 0
In Meet:   %200 = getelementptr inbounds double, ptr %196, i64 %199, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %200 = getelementptr inbounds double, ptr %196, i64 %199
VisitInstr:   %201 = load double, ptr %33, align 8
Check LatCell: 0
In Meet:   %201 = load double, ptr %33, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %201 = load double, ptr %33, align 8
VisitInstr:   %202 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %202 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %202 = load ptr, ptr %5, align 8
VisitInstr:   %203 = load i32, ptr %22, align 4
Check LatCell: 0
In Meet:   %203 = load i32, ptr %22, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %203 = load i32, ptr %22, align 4
VisitInstr:   %204 = add nsw i32 %203, 1
BinaryOp:   %204 = add nsw i32 %203, 1
Check LatCell: 0
In Meet:   %204 = add nsw i32 %203, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %204 = add nsw i32 %203, 1
VisitInstr:   %205 = sext i32 %204 to i64
UnaryOp:   %205 = sext i32 %204 to i64
Check LatCell: 0
In Meet:   %205 = sext i32 %204 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %205 = sext i32 %204 to i64
VisitInstr:   %206 = getelementptr inbounds double, ptr %202, i64 %205
GetElementPtr:   %206 = getelementptr inbounds double, ptr %202, i64 %205
Check LatCell: 0
In Meet:   %206 = getelementptr inbounds double, ptr %202, i64 %205, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %206 = getelementptr inbounds double, ptr %202, i64 %205
VisitInstr:   %207 = load double, ptr %30, align 8
Check LatCell: 0
In Meet:   %207 = load double, ptr %30, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %207 = load double, ptr %30, align 8
VisitInstr:   %208 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %208 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %208 = load ptr, ptr %5, align 8
VisitInstr:   %209 = load i32, ptr %22, align 4
Check LatCell: 0
In Meet:   %209 = load i32, ptr %22, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %209 = load i32, ptr %22, align 4
VisitInstr:   %210 = sext i32 %209 to i64
UnaryOp:   %210 = sext i32 %209 to i64
Check LatCell: 0
In Meet:   %210 = sext i32 %209 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %210 = sext i32 %209 to i64
VisitInstr:   %211 = getelementptr inbounds double, ptr %208, i64 %210
GetElementPtr:   %211 = getelementptr inbounds double, ptr %208, i64 %210
Check LatCell: 0
In Meet:   %211 = getelementptr inbounds double, ptr %208, i64 %210, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %211 = getelementptr inbounds double, ptr %208, i64 %210
VisitInstr:   %212 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %212 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %212 = load ptr, ptr %5, align 8
VisitInstr:   %213 = load i32, ptr %21, align 4
Check LatCell: 0
In Meet:   %213 = load i32, ptr %21, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %213 = load i32, ptr %21, align 4
VisitInstr:   %214 = sext i32 %213 to i64
UnaryOp:   %214 = sext i32 %213 to i64
Check LatCell: 0
In Meet:   %214 = sext i32 %213 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %214 = sext i32 %213 to i64
VisitInstr:   %215 = getelementptr inbounds double, ptr %212, i64 %214
GetElementPtr:   %215 = getelementptr inbounds double, ptr %212, i64 %214
Check LatCell: 0
In Meet:   %215 = getelementptr inbounds double, ptr %212, i64 %214, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %215 = getelementptr inbounds double, ptr %212, i64 %214
VisitInstr:   %216 = load double, ptr %28, align 8
Check LatCell: 0
In Meet:   %216 = load double, ptr %28, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %216 = load double, ptr %28, align 8
VisitInstr:   %217 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %217 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %217 = load ptr, ptr %5, align 8
VisitInstr:   %218 = load i32, ptr %22, align 4
Check LatCell: 0
In Meet:   %218 = load i32, ptr %22, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %218 = load i32, ptr %22, align 4
VisitInstr:   %219 = sext i32 %218 to i64
UnaryOp:   %219 = sext i32 %218 to i64
Check LatCell: 0
In Meet:   %219 = sext i32 %218 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %219 = sext i32 %218 to i64
VisitInstr:   %220 = getelementptr inbounds double, ptr %217, i64 %219
GetElementPtr:   %220 = getelementptr inbounds double, ptr %217, i64 %219
Check LatCell: 0
In Meet:   %220 = getelementptr inbounds double, ptr %217, i64 %219, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %220 = getelementptr inbounds double, ptr %217, i64 %219
VisitInstr:   %221 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %221 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %221 = load ptr, ptr %5, align 8
VisitInstr:   %222 = load i32, ptr %21, align 4
Check LatCell: 0
In Meet:   %222 = load i32, ptr %21, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %222 = load i32, ptr %21, align 4
VisitInstr:   %223 = add nsw i32 %222, 1
BinaryOp:   %223 = add nsw i32 %222, 1
Check LatCell: 0
In Meet:   %223 = add nsw i32 %222, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %223 = add nsw i32 %222, 1
VisitInstr:   %224 = sext i32 %223 to i64
UnaryOp:   %224 = sext i32 %223 to i64
Check LatCell: 0
In Meet:   %224 = sext i32 %223 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %224 = sext i32 %223 to i64
VisitInstr:   %225 = getelementptr inbounds double, ptr %221, i64 %224
GetElementPtr:   %225 = getelementptr inbounds double, ptr %221, i64 %224
Check LatCell: 0
In Meet:   %225 = getelementptr inbounds double, ptr %221, i64 %224, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %225 = getelementptr inbounds double, ptr %221, i64 %224
VisitInstr:   %226 = load double, ptr %27, align 8
Check LatCell: 0
In Meet:   %226 = load double, ptr %27, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %226 = load double, ptr %27, align 8
VisitInstr:   %227 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %227 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %227 = load ptr, ptr %5, align 8
VisitInstr:   %228 = load i32, ptr %22, align 4
Check LatCell: 0
In Meet:   %228 = load i32, ptr %22, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %228 = load i32, ptr %22, align 4
VisitInstr:   %229 = add nsw i32 %228, 1
BinaryOp:   %229 = add nsw i32 %228, 1
Check LatCell: 0
In Meet:   %229 = add nsw i32 %228, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %229 = add nsw i32 %228, 1
VisitInstr:   %230 = sext i32 %229 to i64
UnaryOp:   %230 = sext i32 %229 to i64
Check LatCell: 0
In Meet:   %230 = sext i32 %229 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %230 = sext i32 %229 to i64
VisitInstr:   %231 = getelementptr inbounds double, ptr %227, i64 %230
GetElementPtr:   %231 = getelementptr inbounds double, ptr %227, i64 %230
Check LatCell: 0
In Meet:   %231 = getelementptr inbounds double, ptr %227, i64 %230, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %231 = getelementptr inbounds double, ptr %227, i64 %230
VisitInstr:   %232 = load double, ptr %28, align 8
Check LatCell: 0
In Meet:   %232 = load double, ptr %28, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %232 = load double, ptr %28, align 8
VisitInstr:   %233 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %233 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %233 = load ptr, ptr %5, align 8
VisitInstr:   %234 = load i32, ptr %21, align 4
Check LatCell: 0
In Meet:   %234 = load i32, ptr %21, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %234 = load i32, ptr %21, align 4
VisitInstr:   %235 = sext i32 %234 to i64
UnaryOp:   %235 = sext i32 %234 to i64
Check LatCell: 0
In Meet:   %235 = sext i32 %234 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %235 = sext i32 %234 to i64
VisitInstr:   %236 = getelementptr inbounds double, ptr %233, i64 %235
GetElementPtr:   %236 = getelementptr inbounds double, ptr %233, i64 %235
Check LatCell: 0
In Meet:   %236 = getelementptr inbounds double, ptr %233, i64 %235, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %236 = getelementptr inbounds double, ptr %233, i64 %235
VisitInstr:   %237 = load double, ptr %27, align 8
Check LatCell: 0
In Meet:   %237 = load double, ptr %27, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %237 = load double, ptr %27, align 8
VisitInstr:   %238 = load ptr, ptr %5, align 8
Check LatCell: 0
In Meet:   %238 = load ptr, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %238 = load ptr, ptr %5, align 8
VisitInstr:   %239 = load i32, ptr %21, align 4
Check LatCell: 0
In Meet:   %239 = load i32, ptr %21, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %239 = load i32, ptr %21, align 4
VisitInstr:   %240 = add nsw i32 %239, 1
BinaryOp:   %240 = add nsw i32 %239, 1
Check LatCell: 0
In Meet:   %240 = add nsw i32 %239, 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %240 = add nsw i32 %239, 1
VisitInstr:   %241 = sext i32 %240 to i64
UnaryOp:   %241 = sext i32 %240 to i64
Check LatCell: 0
In Meet:   %241 = sext i32 %240 to i64, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %241 = sext i32 %240 to i64
VisitInstr:   %242 = getelementptr inbounds double, ptr %238, i64 %241
GetElementPtr:   %242 = getelementptr inbounds double, ptr %238, i64 %241
Check LatCell: 0
In Meet:   %242 = getelementptr inbounds double, ptr %238, i64 %241, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %242 = getelementptr inbounds double, ptr %238, i64 %241
VisitInstr:   %243 = load i32, ptr %18, align 4
Check LatCell: 0
In Meet:   %243 = load i32, ptr %18, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %243 = load i32, ptr %18, align 4
VisitInstr:   %244 = load i32, ptr %10, align 4
Check LatCell: 0
In Meet:   %244 = load i32, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %244 = load i32, ptr %10, align 4
VisitInstr:   %245 = add nsw i32 %244, %243
BinaryOp:   %245 = add nsw i32 %244, %243
Check LatCell: 0
In Meet:   %245 = add nsw i32 %244, %243, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %245 = add nsw i32 %244, %243
VisitInstr:   %246 = load i32, ptr %9, align 4
Check LatCell: 0
In Meet:   %246 = load i32, ptr %9, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %246 = load i32, ptr %9, align 4
VisitInstr:   %247 = add nsw i32 %246, 2
BinaryOp:   %247 = add nsw i32 %246, 2
Check LatCell: 0
In Meet:   %247 = add nsw i32 %246, 2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %247 = add nsw i32 %246, 2
VisitInstr:   %248 = load double, ptr %33, align 8
Check LatCell: 0
In Meet:   %248 = load double, ptr %33, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %248 = load double, ptr %33, align 8
VisitInstr:   %249 = load double, ptr %32, align 8
Check LatCell: 0
In Meet:   %249 = load double, ptr %32, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %249 = load double, ptr %32, align 8
VisitInstr:   %250 = load double, ptr %30, align 8
Check LatCell: 0
In Meet:   %250 = load double, ptr %30, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %250 = load double, ptr %30, align 8
VisitInstr:   %251 = load double, ptr %31, align 8
Check LatCell: 0
In Meet:   %251 = load double, ptr %31, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %251 = load double, ptr %31, align 8
VisitInstr:   %252 = fmul double %250, %251
BinaryOp:   %252 = fmul double %250, %251
Check LatCell: 0
In Meet:   %252 = fmul double %250, %251, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %252 = fmul double %250, %251
VisitInstr:   %253 = fneg double %252
UnaryOp:   %253 = fneg double %252
Check LatCell: 0
In Meet:   %253 = fneg double %252, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %253 = fneg double %252
VisitInstr:   %254 = load double, ptr %33, align 8
Check LatCell: 0
In Meet:   %254 = load double, ptr %33, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %254 = load double, ptr %33, align 8
VisitInstr:   %255 = load double, ptr %30, align 8
Check LatCell: 0
In Meet:   %255 = load double, ptr %30, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %255 = load double, ptr %30, align 8
VisitInstr:   %256 = load double, ptr %32, align 8
Check LatCell: 0
In Meet:   %256 = load double, ptr %32, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %256 = load double, ptr %32, align 8
VisitInstr:   %257 = load double, ptr %34, align 8
Check LatCell: 0
In Meet:   %257 = load double, ptr %34, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %257 = load double, ptr %34, align 8
VisitInstr:   %258 = load double, ptr %31, align 8
Check LatCell: 0
In Meet:   %258 = load double, ptr %31, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %258 = load double, ptr %31, align 8
VisitInstr:   %259 = fmul double %257, %258
BinaryOp:   %259 = fmul double %257, %258
Check LatCell: 0
In Meet:   %259 = fmul double %257, %258, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %259 = fmul double %257, %258
VisitInstr:   %260 = load double, ptr %30, align 8
Check LatCell: 0
In Meet:   %260 = load double, ptr %30, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %260 = load double, ptr %30, align 8
VisitInstr:   %261 = load i32, ptr %14, align 4
Check LatCell: 0
In Meet:   %261 = load i32, ptr %14, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %261 = load i32, ptr %14, align 4
VisitInstr:   %262 = load i32, ptr %11, align 4
Check LatCell: 0
In Meet:   %262 = load i32, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %262 = load i32, ptr %11, align 4
VisitInstr:   %263 = add nsw i32 %262, %261
BinaryOp:   %263 = add nsw i32 %262, %261
Check LatCell: 0
In Meet:   %263 = add nsw i32 %262, %261, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %263 = add nsw i32 %262, %261
VisitInstr:   %264 = load i32, ptr %18, align 4
Check LatCell: 0
In Meet:   %264 = load i32, ptr %18, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %264 = load i32, ptr %18, align 4
VisitInstr:   %265 = load i32, ptr %23, align 4
Check LatCell: 0
In Meet:   %265 = load i32, ptr %23, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %265 = load i32, ptr %23, align 4
VisitInstr:   %266 = load i32, ptr %24, align 4
Check LatCell: 0
In Meet:   %266 = load i32, ptr %24, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %266 = load i32, ptr %24, align 4
VisitInstr:   %267 = mul nsw i32 %266, %265
BinaryOp:   %267 = mul nsw i32 %266, %265
Check LatCell: 0
In Meet:   %267 = mul nsw i32 %266, %265, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %267 = mul nsw i32 %266, %265
VisitInstr:   %268 = load i32, ptr %20, align 4
Check LatCell: 0
In Meet:   %268 = load i32, ptr %20, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %268 = load i32, ptr %20, align 4
VisitInstr:   %269 = add nsw i32 %268, -1
BinaryOp:   %269 = add nsw i32 %268, -1
Check LatCell: 0
In Meet:   %269 = add nsw i32 %268, -1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %269 = add nsw i32 %268, -1
VisitInstr:   br label %270
BranchInst:   br label %270
In AddEdge: 0x5611285f4530, 0x5611285f4fa0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %44, ptr %20, align 4
Check LatCell: 0
In Meet:   store i32 %44, ptr %20, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %44, ptr %20, align 4
VisitInstr:   br label %45, !llvm.loop !6
BranchInst:   br label %45, !llvm.loop !6
In AddEdge: 0x5611285f4a60, 0x5611285f4cd0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %53, label %271, label %340
BranchInst:   br i1 %53, label %271, label %340
In BranchInst: -1, 0x0
In AddEdge: 0x5611285f4f30, 0x5611285f5230, 0
Adding edge:  -> 
In AddEdge: 0x5611285f4f30, 0x5611285f5230, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %272 = load i32, ptr %57, align 4
Check LatCell: 0
In Meet:   %272 = load i32, ptr %57, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %272 = load i32, ptr %57, align 4
VisitInstr:   store i32 %272, ptr %23, align 4
Check LatCell: 0
In Meet:   store i32 %272, ptr %23, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %272, ptr %23, align 4
VisitInstr:   %273 = sdiv i32 %58, %61
BinaryOp:   %273 = sdiv i32 %58, %61
Check LatCell: 0
In Meet:   %273 = sdiv i32 %58, %61, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %273 = sdiv i32 %58, %61
VisitInstr:   store i32 %273, ptr %25, align 4
Check LatCell: 0
In Meet:   store i32 %273, ptr %25, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %273, ptr %25, align 4
VisitInstr:   store i32 %63, ptr %14, align 4
Check LatCell: 0
In Meet:   store i32 %63, ptr %14, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %63, ptr %14, align 4
VisitInstr:   store i32 %66, ptr %15, align 4
Check LatCell: 0
In Meet:   store i32 %66, ptr %15, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %66, ptr %15, align 4
VisitInstr:   store i32 %69, ptr %16, align 4
Check LatCell: 0
In Meet:   store i32 %69, ptr %16, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %69, ptr %16, align 4
VisitInstr:   store i32 1, ptr %12, align 4
Check LatCell: 0
In Meet:   store i32 1, ptr %12, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 1, ptr %12, align 4
VisitInstr:   store i32 1, ptr %10, align 4
Check LatCell: 0
In Meet:   store i32 1, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 1, ptr %10, align 4
VisitInstr:   br label %274
BranchInst:   br label %274
In AddEdge: 0x5611285f50f0, 0x5611285f5f90, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   ret void
Check LatCell: 0
In Meet:   ret void, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret void
Visiting BB: 
VisitInstr:   br i1 %72, label %275, label %297
BranchInst:   br i1 %72, label %275, label %297
In BranchInst: -1, 0x0
In AddEdge: 0x5611285f5f20, 0x5611285f6290, 0
Adding edge:  -> 
In AddEdge: 0x5611285f5f20, 0x5611285f6290, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %75, label %276, label %289
BranchInst:   br i1 %75, label %276, label %289
In BranchInst: -1, 0x0
In AddEdge: 0x5611285f6150, 0x5611285f6590, 0
Adding edge:  -> 
In AddEdge: 0x5611285f6150, 0x5611285f6590, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %154, ptr %17, align 4
Check LatCell: 0
In Meet:   store i32 %154, ptr %17, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %154, ptr %17, align 4
VisitInstr:   br label %298
BranchInst:   br label %298
In AddEdge: 0x5611285f61a0, 0x5611285faf50, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %76, ptr %9, align 4
Check LatCell: 0
In Meet:   store i32 %76, ptr %9, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %76, ptr %9, align 4
VisitInstr:   br label %277
BranchInst:   br label %277
In AddEdge: 0x5611285f6450, 0x5611285f6750, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %136, ptr %19, align 4
Check LatCell: 0
In Meet:   store i32 %136, ptr %19, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %136, ptr %19, align 4
VisitInstr:   br label %290
BranchInst:   br label %290
In AddEdge: 0x5611285f64a0, 0x5611285f9d20, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %157, label %299, label %338
BranchInst:   br i1 %157, label %299, label %338
In BranchInst: -1, 0x0
In AddEdge: 0x5611285faee0, 0x5611285fb250, 0
Adding edge:  -> 
In AddEdge: 0x5611285faee0, 0x5611285fb250, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %82, label %278, label %288
BranchInst:   br i1 %82, label %278, label %288
In BranchInst: -1, 0x0
In AddEdge: 0x5611285f66e0, 0x5611285f6be0, 0
Adding edge:  -> 
In AddEdge: 0x5611285f66e0, 0x5611285f6be0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %139, label %291, label %292
BranchInst:   br i1 %139, label %291, label %292
In BranchInst: -1, 0x0
In AddEdge: 0x5611285f9cb0, 0x5611285f9fe0, 0
Adding edge:  -> 
In AddEdge: 0x5611285f9cb0, 0x5611285f9fe0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %159, ptr %18, align 4
Check LatCell: 0
In Meet:   store i32 %159, ptr %18, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %159, ptr %18, align 4
VisitInstr:   %300 = sdiv i32 %163, %164
BinaryOp:   %300 = sdiv i32 %163, %164
Check LatCell: 0
In Meet:   %300 = sdiv i32 %163, %164, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %300 = sdiv i32 %163, %164
VisitInstr:   %301 = sitofp i32 %300 to double
UnaryOp:   %301 = sitofp i32 %300 to double
Check LatCell: 0
In Meet:   %301 = sitofp i32 %300 to double, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %301 = sitofp i32 %300 to double
VisitInstr:   %302 = fdiv double %162, %301
BinaryOp:   %302 = fdiv double %162, %301
Check LatCell: 0
In Meet:   %302 = fdiv double %162, %301, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %302 = fdiv double %162, %301
VisitInstr:   store double %302, ptr %29, align 8
Check LatCell: 0
In Meet:   store double %302, ptr %29, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %302, ptr %29, align 8
VisitInstr:   %303 = call double @sin(double noundef %166) #7
Check LatCell: 0
In Meet:   %303 = call double @sin(double noundef %166) #7, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %303 = call double @sin(double noundef %166) #7
VisitInstr:   store double %303, ptr %34, align 8
Check LatCell: 0
In Meet:   store double %303, ptr %34, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %303, ptr %34, align 8
VisitInstr:   store double %170, ptr %32, align 8
Check LatCell: 0
In Meet:   store double %170, ptr %32, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %170, ptr %32, align 8
VisitInstr:   %304 = call double @sin(double noundef %171) #7
Check LatCell: 0
In Meet:   %304 = call double @sin(double noundef %171) #7, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %304 = call double @sin(double noundef %171) #7
VisitInstr:   store double %304, ptr %31, align 8
Check LatCell: 0
In Meet:   store double %304, ptr %31, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %304, ptr %31, align 8
VisitInstr:   store double 1.000000e+00, ptr %33, align 8
Check LatCell: 0
In Meet:   store double 1.000000e+00, ptr %33, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 1.000000e+00, ptr %33, align 8
VisitInstr:   store double 0.000000e+00, ptr %30, align 8
Check LatCell: 0
In Meet:   store double 0.000000e+00, ptr %30, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 0.000000e+00, ptr %30, align 8
VisitInstr:   store i32 1, ptr %11, align 4
Check LatCell: 0
In Meet:   store i32 1, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 1, ptr %11, align 4
VisitInstr:   br label %305
BranchInst:   br label %305
In AddEdge: 0x5611285fb110, 0x5611285fc360, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %267, ptr %24, align 4
Check LatCell: 0
In Meet:   store i32 %267, ptr %24, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %267, ptr %24, align 4
VisitInstr:   br label %339
BranchInst:   br label %339
In AddEdge: 0x5611285fb160, 0x561128601ea0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %83, ptr %11, align 4
Check LatCell: 0
In Meet:   store i32 %83, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %83, ptr %11, align 4
VisitInstr:   br label %279
BranchInst:   br label %279
In AddEdge: 0x5611285f6aa0, 0x5611285f6da0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %289
BranchInst:   br label %289
In AddEdge: 0x5611285f6af0, 0x5611285f9ad0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %292
BranchInst:   br label %292
In AddEdge: 0x5611285f9ee0, 0x5611285fa1c0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %293 = phi i1 [ false, %290 ], [ %142, %291 ]
PHI:   %293 = phi i1 [ false, %290 ], [ %142, %291 ]
PHI LatOp: 0, 0x5611285dff20
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %293 = phi i1 [ false, %290 ], [ %142, %291 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %293 = phi i1 [ false, %290 ], [ %142, %291 ]
VisitInstr:   br i1 %293, label %294, label %295
BranchInst:   br i1 %293, label %294, label %295
In BranchInst: -1, 0x0
In AddEdge: 0x5611285f9f30, 0x5611285fa360, 0
Adding edge:  -> 
In AddEdge: 0x5611285f9f30, 0x5611285fa360, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %174, label %306, label %337
BranchInst:   br i1 %174, label %306, label %337
In BranchInst: -1, 0x0
In AddEdge: 0x5611285fc2b0, 0x5611285fc660, 0
Adding edge:  -> 
In AddEdge: 0x5611285fc2b0, 0x5611285fc660, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %269, ptr %20, align 4
Check LatCell: 0
In Meet:   store i32 %269, ptr %20, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %269, ptr %20, align 4
VisitInstr:   br label %270, !llvm.loop !16
BranchInst:   br label %270, !llvm.loop !16
In AddEdge: 0x561128601e30, 0x5611286020a0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %86, label %280, label %286
BranchInst:   br i1 %86, label %280, label %286
In BranchInst: -1, 0x0
In AddEdge: 0x5611285f6d30, 0x5611285f70a0, 0
Adding edge:  -> 
In AddEdge: 0x5611285f6d30, 0x5611285f70a0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %293 = phi i1 [ false, %290 ], [ %142, %291 ]
VisitInstr:   br i1 %293, label %294, label %295
BranchInst:   br i1 %293, label %294, label %295
In BranchInst: -1, 0x0
In AddEdge: 0x5611285f9f30, 0x5611285fa360, 0
In AddEdge: 0x5611285f9f30, 0x5611285fa360, 1
Visiting BB: 
VisitInstr:   store i32 %145, ptr %12, align 4
Check LatCell: 0
In Meet:   store i32 %145, ptr %12, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %145, ptr %12, align 4
VisitInstr:   store i32 %147, ptr %19, align 4
Check LatCell: 0
In Meet:   store i32 %147, ptr %19, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %147, ptr %19, align 4
VisitInstr:   br label %290, !llvm.loop !10
BranchInst:   br label %290, !llvm.loop !10
In AddEdge: 0x5611285fa260, 0x5611285fa760, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %150, ptr %12, align 4
Check LatCell: 0
In Meet:   store i32 %150, ptr %12, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %150, ptr %12, align 4
VisitInstr:   br label %296
BranchInst:   br label %296
In AddEdge: 0x5611285fa2b0, 0x5611285faaa0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %175, ptr %9, align 4
Check LatCell: 0
In Meet:   store i32 %175, ptr %9, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %175, ptr %9, align 4
VisitInstr:   br label %307
BranchInst:   br label %307
In AddEdge: 0x5611285fc520, 0x5611285fc820, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %264, ptr %17, align 4
Check LatCell: 0
In Meet:   store i32 %264, ptr %17, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %264, ptr %17, align 4
VisitInstr:   br label %298, !llvm.loop !15
BranchInst:   br label %298, !llvm.loop !15
In AddEdge: 0x5611285fc570, 0x561128601ae0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %91, ptr %13, align 4
Check LatCell: 0
In Meet:   store i32 %91, ptr %13, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %91, ptr %13, align 4
VisitInstr:   %281 = load double, ptr %95, align 8
Check LatCell: 0
In Meet:   %281 = load double, ptr %95, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %281 = load double, ptr %95, align 8
VisitInstr:   store double %281, ptr %28, align 8
Check LatCell: 0
In Meet:   store double %281, ptr %28, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %281, ptr %28, align 8
VisitInstr:   %282 = load double, ptr %99, align 8
Check LatCell: 0
In Meet:   %282 = load double, ptr %99, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %282 = load double, ptr %99, align 8
VisitInstr:   store double %282, ptr %103, align 8
Check LatCell: 0
In Meet:   store double %282, ptr %103, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %282, ptr %103, align 8
VisitInstr:   store double %104, ptr %108, align 8
Check LatCell: 0
In Meet:   store double %104, ptr %108, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %104, ptr %108, align 8
VisitInstr:   %283 = load double, ptr %113, align 8
Check LatCell: 0
In Meet:   %283 = load double, ptr %113, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %283 = load double, ptr %113, align 8
VisitInstr:   store double %283, ptr %28, align 8
Check LatCell: 0
In Meet:   store double %283, ptr %28, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %283, ptr %28, align 8
VisitInstr:   %284 = load double, ptr %118, align 8
Check LatCell: 0
In Meet:   %284 = load double, ptr %118, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %284 = load double, ptr %118, align 8
VisitInstr:   store double %284, ptr %123, align 8
Check LatCell: 0
In Meet:   store double %284, ptr %123, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %284, ptr %123, align 8
VisitInstr:   store double %124, ptr %129, align 8
Check LatCell: 0
In Meet:   store double %124, ptr %129, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %124, ptr %129, align 8
VisitInstr:   br label %285
BranchInst:   br label %285
In AddEdge: 0x5611285f6f60, 0x5611285f9430, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %287
BranchInst:   br label %287
In AddEdge: 0x5611285f6fb0, 0x5611285f97e0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %153, ptr %10, align 4
Check LatCell: 0
In Meet:   store i32 %153, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %153, ptr %10, align 4
VisitInstr:   br label %274, !llvm.loop !11
BranchInst:   br label %274, !llvm.loop !11
In AddEdge: 0x5611285faa30, 0x5611285fad10, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %181, label %308, label %331
BranchInst:   br i1 %181, label %308, label %331
In BranchInst: -1, 0x0
In AddEdge: 0x5611285fc7b0, 0x5611285fccb0, 0
Adding edge:  -> 
In AddEdge: 0x5611285fc7b0, 0x5611285fccb0, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %132, ptr %11, align 4
Check LatCell: 0
In Meet:   store i32 %132, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %132, ptr %11, align 4
VisitInstr:   br label %279, !llvm.loop !8
BranchInst:   br label %279, !llvm.loop !8
In AddEdge: 0x5611285f93c0, 0x5611285f96a0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %134, ptr %9, align 4
Check LatCell: 0
In Meet:   store i32 %134, ptr %9, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %134, ptr %9, align 4
VisitInstr:   br label %277, !llvm.loop !9
BranchInst:   br label %277, !llvm.loop !9
In AddEdge: 0x5611285f9770, 0x5611285f99e0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %182, ptr %10, align 4
Check LatCell: 0
In Meet:   store i32 %182, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %182, ptr %10, align 4
VisitInstr:   br label %309
BranchInst:   br label %309
In AddEdge: 0x5611285fcb70, 0x5611285fce70, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store double %248, ptr %34, align 8
Check LatCell: 0
In Meet:   store double %248, ptr %34, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %248, ptr %34, align 8
VisitInstr:   %332 = call double @llvm.fmuladd.f64(double %248, double %249, double %253)
Check LatCell: 0
In Meet:   %332 = call double @llvm.fmuladd.f64(double %248, double %249, double %253), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %332 = call double @llvm.fmuladd.f64(double %248, double %249, double %253)
VisitInstr:   %333 = fadd double %332, %254
BinaryOp:   %333 = fadd double %332, %254
Check LatCell: 0
In Meet:   %333 = fadd double %332, %254, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %333 = fadd double %332, %254
VisitInstr:   store double %333, ptr %33, align 8
Check LatCell: 0
In Meet:   store double %333, ptr %33, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %333, ptr %33, align 8
VisitInstr:   %334 = call double @llvm.fmuladd.f64(double %255, double %256, double %259)
Check LatCell: 0
In Meet:   %334 = call double @llvm.fmuladd.f64(double %255, double %256, double %259), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %334 = call double @llvm.fmuladd.f64(double %255, double %256, double %259)
VisitInstr:   %335 = fadd double %334, %260
BinaryOp:   %335 = fadd double %334, %260
Check LatCell: 0
In Meet:   %335 = fadd double %334, %260, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %335 = fadd double %334, %260
VisitInstr:   store double %335, ptr %30, align 8
Check LatCell: 0
In Meet:   store double %335, ptr %30, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %335, ptr %30, align 8
VisitInstr:   br label %336
BranchInst:   br label %336
In AddEdge: 0x5611285fcbc0, 0x561128601600, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %185, label %310, label %329
BranchInst:   br i1 %185, label %310, label %329
In BranchInst: -1, 0x0
In AddEdge: 0x5611285fce00, 0x5611285fd170, 0
Adding edge:  -> 
In AddEdge: 0x5611285fce00, 0x5611285fd170, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %263, ptr %11, align 4
Check LatCell: 0
In Meet:   store i32 %263, ptr %11, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %263, ptr %11, align 4
VisitInstr:   br label %305, !llvm.loop !14
BranchInst:   br label %305, !llvm.loop !14
In AddEdge: 0x561128601590, 0x561128601870, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %186, ptr %21, align 4
Check LatCell: 0
In Meet:   store i32 %186, ptr %21, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %186, ptr %21, align 4
VisitInstr:   store i32 %189, ptr %22, align 4
Check LatCell: 0
In Meet:   store i32 %189, ptr %22, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %189, ptr %22, align 4
VisitInstr:   %311 = load double, ptr %194, align 8
Check LatCell: 0
In Meet:   %311 = load double, ptr %194, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %311 = load double, ptr %194, align 8
VisitInstr:   %312 = load double, ptr %200, align 8
Check LatCell: 0
In Meet:   %312 = load double, ptr %200, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %312 = load double, ptr %200, align 8
VisitInstr:   %313 = fmul double %195, %312
BinaryOp:   %313 = fmul double %195, %312
Check LatCell: 0
In Meet:   %313 = fmul double %195, %312, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %313 = fmul double %195, %312
VisitInstr:   %314 = fneg double %313
UnaryOp:   %314 = fneg double %313
Check LatCell: 0
In Meet:   %314 = fneg double %313, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %314 = fneg double %313
VisitInstr:   %315 = call double @llvm.fmuladd.f64(double %190, double %311, double %314)
Check LatCell: 0
In Meet:   %315 = call double @llvm.fmuladd.f64(double %190, double %311, double %314), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %315 = call double @llvm.fmuladd.f64(double %190, double %311, double %314)
VisitInstr:   store double %315, ptr %28, align 8
Check LatCell: 0
In Meet:   store double %315, ptr %28, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %315, ptr %28, align 8
VisitInstr:   %316 = load double, ptr %206, align 8
Check LatCell: 0
In Meet:   %316 = load double, ptr %206, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %316 = load double, ptr %206, align 8
VisitInstr:   %317 = load double, ptr %211, align 8
Check LatCell: 0
In Meet:   %317 = load double, ptr %211, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %317 = load double, ptr %211, align 8
VisitInstr:   %318 = fmul double %207, %317
BinaryOp:   %318 = fmul double %207, %317
Check LatCell: 0
In Meet:   %318 = fmul double %207, %317, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %318 = fmul double %207, %317
VisitInstr:   %319 = call double @llvm.fmuladd.f64(double %201, double %316, double %318)
Check LatCell: 0
In Meet:   %319 = call double @llvm.fmuladd.f64(double %201, double %316, double %318), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %319 = call double @llvm.fmuladd.f64(double %201, double %316, double %318)
VisitInstr:   store double %319, ptr %27, align 8
Check LatCell: 0
In Meet:   store double %319, ptr %27, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %319, ptr %27, align 8
VisitInstr:   %320 = load double, ptr %215, align 8
Check LatCell: 0
In Meet:   %320 = load double, ptr %215, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %320 = load double, ptr %215, align 8
VisitInstr:   %321 = fsub double %320, %216
BinaryOp:   %321 = fsub double %320, %216
Check LatCell: 0
In Meet:   %321 = fsub double %320, %216, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %321 = fsub double %320, %216
VisitInstr:   store double %321, ptr %220, align 8
Check LatCell: 0
In Meet:   store double %321, ptr %220, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %321, ptr %220, align 8
VisitInstr:   %322 = load double, ptr %225, align 8
Check LatCell: 0
In Meet:   %322 = load double, ptr %225, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %322 = load double, ptr %225, align 8
VisitInstr:   %323 = fsub double %322, %226
BinaryOp:   %323 = fsub double %322, %226
Check LatCell: 0
In Meet:   %323 = fsub double %322, %226, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %323 = fsub double %322, %226
VisitInstr:   store double %323, ptr %231, align 8
Check LatCell: 0
In Meet:   store double %323, ptr %231, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %323, ptr %231, align 8
VisitInstr:   %324 = load double, ptr %236, align 8
Check LatCell: 0
In Meet:   %324 = load double, ptr %236, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %324 = load double, ptr %236, align 8
VisitInstr:   %325 = fadd double %324, %232
BinaryOp:   %325 = fadd double %324, %232
Check LatCell: 0
In Meet:   %325 = fadd double %324, %232, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %325 = fadd double %324, %232
VisitInstr:   store double %325, ptr %236, align 8
Check LatCell: 0
In Meet:   store double %325, ptr %236, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %325, ptr %236, align 8
VisitInstr:   %326 = load double, ptr %242, align 8
Check LatCell: 0
In Meet:   %326 = load double, ptr %242, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %326 = load double, ptr %242, align 8
VisitInstr:   %327 = fadd double %326, %237
BinaryOp:   %327 = fadd double %326, %237
Check LatCell: 0
In Meet:   %327 = fadd double %326, %237, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %327 = fadd double %326, %237
VisitInstr:   store double %327, ptr %242, align 8
Check LatCell: 0
In Meet:   store double %327, ptr %242, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %327, ptr %242, align 8
VisitInstr:   br label %328
BranchInst:   br label %328
In AddEdge: 0x5611285fd030, 0x5611286002f0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br label %330
BranchInst:   br label %330
In AddEdge: 0x5611285fd080, 0x561128600720, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %245, ptr %10, align 4
Check LatCell: 0
In Meet:   store i32 %245, ptr %10, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %245, ptr %10, align 4
VisitInstr:   br label %309, !llvm.loop !12
BranchInst:   br label %309, !llvm.loop !12
In AddEdge: 0x5611285f8a60, 0x561128600560, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store i32 %247, ptr %9, align 4
Check LatCell: 0
In Meet:   store i32 %247, ptr %9, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %247, ptr %9, align 4
VisitInstr:   br label %307, !llvm.loop !13
BranchInst:   br label %307, !llvm.loop !13
In AddEdge: 0x5611286006b0, 0x561128600920, 0
Adding edge:  -> 
UnitSCCP: 3 instructions removed, 0 basic blocks unreachable, 3 instructions simplified
