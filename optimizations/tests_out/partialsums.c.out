Running complicated test: partialsums.c
UnitSCCP running on make_vec
Visiting BB: 
VisitInstr:   %.0.vec.insert = insertelement <2 x double> undef, double %0, i32 0
Check LatCell: 0
In Meet:   %.0.vec.insert = insertelement <2 x double> undef, double %0, i32 0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.0.vec.insert = insertelement <2 x double> undef, double %0, i32 0
VisitInstr:   %.8.vec.insert = insertelement <2 x double> %.0.vec.insert, double %1, i32 1
Check LatCell: 0
In Meet:   %.8.vec.insert = insertelement <2 x double> %.0.vec.insert, double %1, i32 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.8.vec.insert = insertelement <2 x double> %.0.vec.insert, double %1, i32 1
VisitInstr:   ret <2 x double> %.8.vec.insert
Check LatCell: 0
In Meet:   ret <2 x double> %.8.vec.insert, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret <2 x double> %.8.vec.insert
UnitSCCP: 0 instructions removed, 0 basic blocks unreachable, 0 instructions simplified
UnitLICM running on make_vec
******************************************************
UnitLoopAnalysis running on make_vec
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 0
[UnitLICM]: NumComputeHoisted: 0
[UnitLICM]: Total: 0
UnitSCCP running on sum_vec
Visiting BB: 
VisitInstr:   %.0.vec.extract = extractelement <2 x double> %0, i32 0
Check LatCell: 0
In Meet:   %.0.vec.extract = extractelement <2 x double> %0, i32 0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.0.vec.extract = extractelement <2 x double> %0, i32 0
VisitInstr:   %.8.vec.extract = extractelement <2 x double> %0, i32 1
Check LatCell: 0
In Meet:   %.8.vec.extract = extractelement <2 x double> %0, i32 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.8.vec.extract = extractelement <2 x double> %0, i32 1
VisitInstr:   %2 = fadd double %.0.vec.extract, %.8.vec.extract
BinaryOp:   %2 = fadd double %.0.vec.extract, %.8.vec.extract
Check LatCell: 0
In Meet:   %2 = fadd double %.0.vec.extract, %.8.vec.extract, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %2 = fadd double %.0.vec.extract, %.8.vec.extract
VisitInstr:   ret double %2
Check LatCell: 0
In Meet:   ret double %2, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret double %2
UnitSCCP: 0 instructions removed, 0 basic blocks unreachable, 0 instructions simplified
UnitLICM running on sum_vec
******************************************************
UnitLoopAnalysis running on sum_vec
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 0
[UnitLICM]: NumComputeHoisted: 0
[UnitLICM]: Total: 0
UnitSCCP running on main
Visiting BB: 
VisitInstr:   %3 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
Check LatCell: 0
In Meet:   %3 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %3 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
VisitInstr:   %4 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 1.000000e+00)
Check LatCell: 0
In Meet:   %4 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 1.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %4 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 1.000000e+00)
VisitInstr:   %5 = call <2 x double> @make_vec(double noundef 2.000000e+00, double noundef 2.000000e+00)
Check LatCell: 0
In Meet:   %5 = call <2 x double> @make_vec(double noundef 2.000000e+00, double noundef 2.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %5 = call <2 x double> @make_vec(double noundef 2.000000e+00, double noundef 2.000000e+00)
VisitInstr:   %6 = call <2 x double> @make_vec(double noundef -1.000000e+00, double noundef -1.000000e+00)
Check LatCell: 0
In Meet:   %6 = call <2 x double> @make_vec(double noundef -1.000000e+00, double noundef -1.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %6 = call <2 x double> @make_vec(double noundef -1.000000e+00, double noundef -1.000000e+00)
VisitInstr:   %7 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 2.000000e+00)
Check LatCell: 0
In Meet:   %7 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 2.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %7 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 2.000000e+00)
VisitInstr:   %8 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef -1.000000e+00)
Check LatCell: 0
In Meet:   %8 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef -1.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %8 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef -1.000000e+00)
VisitInstr:   br label %9
BranchInst:   br label %9
In AddEdge: 0x5632f5e94250, 0x5632f5e99dd0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.06 = phi double [ 0.000000e+00, %2 ], [ %22, %11 ]
PHI:   %.06 = phi double [ 0.000000e+00, %2 ], [ %22, %11 ]
PHI LatOp: 0, 0x5632f5e92cb0
Check LatCell: 0
In Meet:   %.06 = phi double [ 0.000000e+00, %2 ], [ %22, %11 ], Lat1: (1, 0x0), Lat2: (0, 0x5632f5e92cb0)
Lat2.second: double 0.000000e+00
Meet:   %.06 = phi double [ 0.000000e+00, %2 ], [ %22, %11 ]
VisitInstr:   %.05 = phi double [ 0.000000e+00, %2 ], [ %26, %11 ]
PHI:   %.05 = phi double [ 0.000000e+00, %2 ], [ %26, %11 ]
PHI LatOp: 0, 0x5632f5e92cb0
Check LatCell: 0
In Meet:   %.05 = phi double [ 0.000000e+00, %2 ], [ %26, %11 ], Lat1: (1, 0x0), Lat2: (0, 0x5632f5e92cb0)
Lat2.second: double 0.000000e+00
Meet:   %.05 = phi double [ 0.000000e+00, %2 ], [ %26, %11 ]
VisitInstr:   %.04 = phi double [ 0.000000e+00, %2 ], [ %28, %11 ]
PHI:   %.04 = phi double [ 0.000000e+00, %2 ], [ %28, %11 ]
PHI LatOp: 0, 0x5632f5e92cb0
Check LatCell: 0
In Meet:   %.04 = phi double [ 0.000000e+00, %2 ], [ %28, %11 ], Lat1: (1, 0x0), Lat2: (0, 0x5632f5e92cb0)
Lat2.second: double 0.000000e+00
Meet:   %.04 = phi double [ 0.000000e+00, %2 ], [ %28, %11 ]
VisitInstr:   %.03 = phi double [ 0.000000e+00, %2 ], [ %29, %11 ]
PHI:   %.03 = phi double [ 0.000000e+00, %2 ], [ %29, %11 ]
PHI LatOp: 0, 0x5632f5e92cb0
Check LatCell: 0
In Meet:   %.03 = phi double [ 0.000000e+00, %2 ], [ %29, %11 ], Lat1: (1, 0x0), Lat2: (0, 0x5632f5e92cb0)
Lat2.second: double 0.000000e+00
Meet:   %.03 = phi double [ 0.000000e+00, %2 ], [ %29, %11 ]
VisitInstr:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ]
PHI:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ]
PHI LatOp: 0, 0x5632f5e98e60
Check LatCell: 0
In Meet:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ], Lat1: (1, 0x0), Lat2: (0, 0x5632f5e98e60)
Lat2.second: double 1.000000e+00
Meet:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ]
VisitInstr:   %10 = fcmp ugt double %.0, 2.500000e+06
CmpInst:   %10 = fcmp ugt double %.0, 2.500000e+06
Check LatCell: 0
In Meet:   %10 = fcmp ugt double %.0, 2.500000e+06, Lat1: (1, 0x0), Lat2: (0, 0x5632f5e94370)
Lat2.second: i1 false
Meet:   %10 = fcmp ugt double %.0, 2.500000e+06
VisitInstr:   br i1 %10, label %31, label %11
BranchInst:   br i1 %10, label %31, label %11
In BranchInst: 0, 0x5632f5e94370
In AddEdge: 0x5632f5e99d20, 0x5632f5e9a140, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %12 = fadd double %.0, -1.000000e+00
BinaryOp:   %12 = fadd double %.0, -1.000000e+00
Check LatCell: 0
In Meet:   %12 = fadd double %.0, -1.000000e+00, Lat1: (1, 0x0), Lat2: (0, 0x5632f5e92cb0)
Lat2.second: double 0.000000e+00
Meet:   %12 = fadd double %.0, -1.000000e+00
VisitInstr:   %13 = call double @pow(double noundef 0x3FE5555555555555, double noundef %12) #4
Check LatCell: 0
In Meet:   %13 = call double @pow(double noundef 0x3FE5555555555555, double noundef %12) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %13 = call double @pow(double noundef 0x3FE5555555555555, double noundef %12) #4
VisitInstr:   %14 = call double @sqrt(double noundef %.0) #4
Check LatCell: 0
In Meet:   %14 = call double @sqrt(double noundef %.0) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %14 = call double @sqrt(double noundef %.0) #4
VisitInstr:   %15 = call double @sin(double noundef %.0) #4
Check LatCell: 0
In Meet:   %15 = call double @sin(double noundef %.0) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %15 = call double @sin(double noundef %.0) #4
VisitInstr:   %16 = call double @cos(double noundef %.0) #4
Check LatCell: 0
In Meet:   %16 = call double @cos(double noundef %.0) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %16 = call double @cos(double noundef %.0) #4
VisitInstr:   %17 = fmul double %.0, %.0
BinaryOp:   %17 = fmul double %.0, %.0
Check LatCell: 0
In Meet:   %17 = fmul double %.0, %.0, Lat1: (1, 0x0), Lat2: (0, 0x5632f5e98e60)
Lat2.second: double 1.000000e+00
Meet:   %17 = fmul double %.0, %.0
VisitInstr:   %18 = fmul double %17, %.0
BinaryOp:   %18 = fmul double %17, %.0
Check LatCell: 0
In Meet:   %18 = fmul double %17, %.0, Lat1: (1, 0x0), Lat2: (0, 0x5632f5e98e60)
Lat2.second: double 1.000000e+00
Meet:   %18 = fmul double %17, %.0
VisitInstr:   %19 = fmul double %18, %16
BinaryOp:   %19 = fmul double %18, %16
Check LatCell: 0
In Meet:   %19 = fmul double %18, %16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %19 = fmul double %18, %16
VisitInstr:   %20 = fmul double %19, %16
BinaryOp:   %20 = fmul double %19, %16
Check LatCell: 0
In Meet:   %20 = fmul double %19, %16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %20 = fmul double %19, %16
VisitInstr:   %21 = fdiv double 1.000000e+00, %20
BinaryOp:   %21 = fdiv double 1.000000e+00, %20
Check LatCell: 0
In Meet:   %21 = fdiv double 1.000000e+00, %20, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %21 = fdiv double 1.000000e+00, %20
VisitInstr:   %22 = fadd double %.06, %21
BinaryOp:   %22 = fadd double %.06, %21
Check LatCell: 0
In Meet:   %22 = fadd double %.06, %21, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %22 = fadd double %.06, %21
Adding SSA:   %.06 = phi double [ 0.000000e+00, %2 ], [ %22, %11 ]
VisitInstr:   %23 = fmul double %18, %15
BinaryOp:   %23 = fmul double %18, %15
Check LatCell: 0
In Meet:   %23 = fmul double %18, %15, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %23 = fmul double %18, %15
VisitInstr:   %24 = fmul double %23, %15
BinaryOp:   %24 = fmul double %23, %15
Check LatCell: 0
In Meet:   %24 = fmul double %23, %15, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %24 = fmul double %23, %15
VisitInstr:   %25 = fdiv double 1.000000e+00, %24
BinaryOp:   %25 = fdiv double 1.000000e+00, %24
Check LatCell: 0
In Meet:   %25 = fdiv double 1.000000e+00, %24, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %25 = fdiv double 1.000000e+00, %24
VisitInstr:   %26 = fadd double %.05, %25
BinaryOp:   %26 = fadd double %.05, %25
Check LatCell: 0
In Meet:   %26 = fadd double %.05, %25, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %26 = fadd double %.05, %25
Adding SSA:   %.05 = phi double [ 0.000000e+00, %2 ], [ %26, %11 ]
VisitInstr:   %27 = fdiv double 1.000000e+00, %14
BinaryOp:   %27 = fdiv double 1.000000e+00, %14
Check LatCell: 0
In Meet:   %27 = fdiv double 1.000000e+00, %14, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %27 = fdiv double 1.000000e+00, %14
VisitInstr:   %28 = fadd double %.04, %27
BinaryOp:   %28 = fadd double %.04, %27
Check LatCell: 0
In Meet:   %28 = fadd double %.04, %27, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %28 = fadd double %.04, %27
Adding SSA:   %.04 = phi double [ 0.000000e+00, %2 ], [ %28, %11 ]
VisitInstr:   %29 = fadd double %.03, %13
BinaryOp:   %29 = fadd double %.03, %13
Check LatCell: 0
In Meet:   %29 = fadd double %.03, %13, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %29 = fadd double %.03, %13
Adding SSA:   %.03 = phi double [ 0.000000e+00, %2 ], [ %29, %11 ]
VisitInstr:   %30 = fadd double %.0, 1.000000e+00
BinaryOp:   %30 = fadd double %.0, 1.000000e+00
Check LatCell: 0
In Meet:   %30 = fadd double %.0, 1.000000e+00, Lat1: (1, 0x0), Lat2: (0, 0x5632f5e99040)
Lat2.second: double 2.000000e+00
Meet:   %30 = fadd double %.0, 1.000000e+00
Adding SSA:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ]
VisitInstr:   br label %9, !llvm.loop !6
BranchInst:   br label %9, !llvm.loop !6
In AddEdge: 0x5632f5e9a000, 0x5632f5e9c330, 0
Adding edge:  -> 
Visiting SSA:   %.06 = phi double [ 0.000000e+00, %2 ], [ %22, %11 ]
VisitInstr:   %.06 = phi double [ 0.000000e+00, %2 ], [ %22, %11 ]
PHI:   %.06 = phi double [ 0.000000e+00, %2 ], [ %22, %11 ]
PHI LatOp: 0, 0x5632f5e92cb0
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.06 = phi double [ 0.000000e+00, %2 ], [ %22, %11 ], Lat1: (0, 0x5632f5e92cb0), Lat2: (-1, 0x0)
Lat1.second: double 0.000000e+00
Meet:   %.06 = phi double [ 0.000000e+00, %2 ], [ %22, %11 ]
Adding SSA:   %22 = fadd double %.06, %21
Visiting SSA:   %.05 = phi double [ 0.000000e+00, %2 ], [ %26, %11 ]
VisitInstr:   %.05 = phi double [ 0.000000e+00, %2 ], [ %26, %11 ]
PHI:   %.05 = phi double [ 0.000000e+00, %2 ], [ %26, %11 ]
PHI LatOp: 0, 0x5632f5e92cb0
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.05 = phi double [ 0.000000e+00, %2 ], [ %26, %11 ], Lat1: (0, 0x5632f5e92cb0), Lat2: (-1, 0x0)
Lat1.second: double 0.000000e+00
Meet:   %.05 = phi double [ 0.000000e+00, %2 ], [ %26, %11 ]
Adding SSA:   %26 = fadd double %.05, %25
Visiting SSA:   %.04 = phi double [ 0.000000e+00, %2 ], [ %28, %11 ]
VisitInstr:   %.04 = phi double [ 0.000000e+00, %2 ], [ %28, %11 ]
PHI:   %.04 = phi double [ 0.000000e+00, %2 ], [ %28, %11 ]
PHI LatOp: 0, 0x5632f5e92cb0
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.04 = phi double [ 0.000000e+00, %2 ], [ %28, %11 ], Lat1: (0, 0x5632f5e92cb0), Lat2: (-1, 0x0)
Lat1.second: double 0.000000e+00
Meet:   %.04 = phi double [ 0.000000e+00, %2 ], [ %28, %11 ]
Adding SSA:   %28 = fadd double %.04, %27
Visiting SSA:   %.03 = phi double [ 0.000000e+00, %2 ], [ %29, %11 ]
VisitInstr:   %.03 = phi double [ 0.000000e+00, %2 ], [ %29, %11 ]
PHI:   %.03 = phi double [ 0.000000e+00, %2 ], [ %29, %11 ]
PHI LatOp: 0, 0x5632f5e92cb0
PHI LatOp: -1, 0x0
Check LatCell: 1
In Meet:   %.03 = phi double [ 0.000000e+00, %2 ], [ %29, %11 ], Lat1: (0, 0x5632f5e92cb0), Lat2: (-1, 0x0)
Lat1.second: double 0.000000e+00
Meet:   %.03 = phi double [ 0.000000e+00, %2 ], [ %29, %11 ]
Adding SSA:   %29 = fadd double %.03, %13
Visiting SSA:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ]
VisitInstr:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ]
PHI:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ]
PHI LatOp: 0, 0x5632f5e98e60
PHI LatOp: 0, 0x5632f5e99040
Check LatCell: 1
In Meet:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ], Lat1: (0, 0x5632f5e98e60), Lat2: (-1, 0x0)
Lat1.second: double 1.000000e+00
Meet:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ]
Adding SSA:   %12 = fadd double %.0, -1.000000e+00
Adding SSA:   %30 = fadd double %.0, 1.000000e+00
Adding SSA:   %16 = call double @cos(double noundef %.0) #4
Adding SSA:   %15 = call double @sin(double noundef %.0) #4
Adding SSA:   %18 = fmul double %17, %.0
Adding SSA:   %17 = fmul double %.0, %.0
Adding SSA:   %14 = call double @sqrt(double noundef %.0) #4
Adding SSA:   %10 = fcmp ugt double %.0, 2.500000e+06
Visiting SSA:   %22 = fadd double %.06, %21
VisitInstr:   %22 = fadd double %.06, %21
Visiting SSA:   %26 = fadd double %.05, %25
VisitInstr:   %26 = fadd double %.05, %25
Visiting SSA:   %28 = fadd double %.04, %27
VisitInstr:   %28 = fadd double %.04, %27
Visiting SSA:   %29 = fadd double %.03, %13
VisitInstr:   %29 = fadd double %.03, %13
Visiting SSA:   %12 = fadd double %.0, -1.000000e+00
VisitInstr:   %12 = fadd double %.0, -1.000000e+00
BinaryOp:   %12 = fadd double %.0, -1.000000e+00
Check LatCell: 1
In Meet:   %12 = fadd double %.0, -1.000000e+00, Lat1: (0, 0x5632f5e92cb0), Lat2: (-1, 0x0)
Lat1.second: double 0.000000e+00
Meet:   %12 = fadd double %.0, -1.000000e+00
Adding SSA:   %13 = call double @pow(double noundef 0x3FE5555555555555, double noundef %12) #4
Visiting SSA:   %30 = fadd double %.0, 1.000000e+00
VisitInstr:   %30 = fadd double %.0, 1.000000e+00
BinaryOp:   %30 = fadd double %.0, 1.000000e+00
Check LatCell: 1
In Meet:   %30 = fadd double %.0, 1.000000e+00, Lat1: (0, 0x5632f5e99040), Lat2: (-1, 0x0)
Lat1.second: double 2.000000e+00
Meet:   %30 = fadd double %.0, 1.000000e+00
Adding SSA:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ]
Visiting SSA:   %16 = call double @cos(double noundef %.0) #4
VisitInstr:   %16 = call double @cos(double noundef %.0) #4
Visiting SSA:   %15 = call double @sin(double noundef %.0) #4
VisitInstr:   %15 = call double @sin(double noundef %.0) #4
Visiting SSA:   %18 = fmul double %17, %.0
VisitInstr:   %18 = fmul double %17, %.0
BinaryOp:   %18 = fmul double %17, %.0
Check LatCell: 1
In Meet:   %18 = fmul double %17, %.0, Lat1: (0, 0x5632f5e98e60), Lat2: (-1, 0x0)
Lat1.second: double 1.000000e+00
Meet:   %18 = fmul double %17, %.0
Adding SSA:   %23 = fmul double %18, %15
Adding SSA:   %19 = fmul double %18, %16
Visiting SSA:   %17 = fmul double %.0, %.0
VisitInstr:   %17 = fmul double %.0, %.0
BinaryOp:   %17 = fmul double %.0, %.0
Check LatCell: 1
In Meet:   %17 = fmul double %.0, %.0, Lat1: (0, 0x5632f5e98e60), Lat2: (-1, 0x0)
Lat1.second: double 1.000000e+00
Meet:   %17 = fmul double %.0, %.0
Adding SSA:   %18 = fmul double %17, %.0
Visiting SSA:   %14 = call double @sqrt(double noundef %.0) #4
VisitInstr:   %14 = call double @sqrt(double noundef %.0) #4
Visiting SSA:   %10 = fcmp ugt double %.0, 2.500000e+06
VisitInstr:   %10 = fcmp ugt double %.0, 2.500000e+06
CmpInst:   %10 = fcmp ugt double %.0, 2.500000e+06
Check LatCell: 1
In Meet:   %10 = fcmp ugt double %.0, 2.500000e+06, Lat1: (0, 0x5632f5e94370), Lat2: (-1, 0x0)
Lat1.second: i1 false
Meet:   %10 = fcmp ugt double %.0, 2.500000e+06
Adding SSA:   br i1 %10, label %31, label %11
Visiting SSA:   %13 = call double @pow(double noundef 0x3FE5555555555555, double noundef %12) #4
VisitInstr:   %13 = call double @pow(double noundef 0x3FE5555555555555, double noundef %12) #4
Visiting SSA:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ]
VisitInstr:   %.0 = phi double [ 1.000000e+00, %2 ], [ %30, %11 ]
Visiting SSA:   %23 = fmul double %18, %15
VisitInstr:   %23 = fmul double %18, %15
Visiting SSA:   %19 = fmul double %18, %16
VisitInstr:   %19 = fmul double %18, %16
Visiting SSA:   %18 = fmul double %17, %.0
VisitInstr:   %18 = fmul double %17, %.0
Visiting SSA:   br i1 %10, label %31, label %11
VisitInstr:   br i1 %10, label %31, label %11
BranchInst:   br i1 %10, label %31, label %11
In BranchInst: -1, 0x0
In AddEdge: 0x5632f5e99d20, 0x5632f5e9a140, 0
Adding edge:  -> 
In AddEdge: 0x5632f5e99d20, 0x5632f5e9a140, 1
Visiting BB: 
VisitInstr:   %storemerge = phi <2 x double> [ %49, %33 ], [ %7, %9 ]
PHI:   %storemerge = phi <2 x double> [ %49, %33 ], [ %7, %9 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %storemerge = phi <2 x double> [ %49, %33 ], [ %7, %9 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %storemerge = phi <2 x double> [ %49, %33 ], [ %7, %9 ]
VisitInstr:   %.09 = phi <2 x double> [ %48, %33 ], [ %3, %9 ]
PHI:   %.09 = phi <2 x double> [ %48, %33 ], [ %3, %9 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.09 = phi <2 x double> [ %48, %33 ], [ %3, %9 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.09 = phi <2 x double> [ %48, %33 ], [ %3, %9 ]
VisitInstr:   %.08 = phi <2 x double> [ %42, %33 ], [ %3, %9 ]
PHI:   %.08 = phi <2 x double> [ %42, %33 ], [ %3, %9 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.08 = phi <2 x double> [ %42, %33 ], [ %3, %9 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.08 = phi <2 x double> [ %42, %33 ], [ %3, %9 ]
VisitInstr:   %.07 = phi <2 x double> [ %44, %33 ], [ %3, %9 ]
PHI:   %.07 = phi <2 x double> [ %44, %33 ], [ %3, %9 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.07 = phi <2 x double> [ %44, %33 ], [ %3, %9 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.07 = phi <2 x double> [ %44, %33 ], [ %3, %9 ]
VisitInstr:   %.02 = phi <2 x double> [ %39, %33 ], [ %3, %9 ]
PHI:   %.02 = phi <2 x double> [ %39, %33 ], [ %3, %9 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.02 = phi <2 x double> [ %39, %33 ], [ %3, %9 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.02 = phi <2 x double> [ %39, %33 ], [ %3, %9 ]
VisitInstr:   %.01 = phi <2 x double> [ %37, %33 ], [ %3, %9 ]
PHI:   %.01 = phi <2 x double> [ %37, %33 ], [ %3, %9 ]
PHI LatOp: -1, 0x0
Check LatCell: 0
In Meet:   %.01 = phi <2 x double> [ %37, %33 ], [ %3, %9 ], Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.01 = phi <2 x double> [ %37, %33 ], [ %3, %9 ]
VisitInstr:   %.0.vec.extract = extractelement <2 x double> %storemerge, i32 0
Check LatCell: 0
In Meet:   %.0.vec.extract = extractelement <2 x double> %storemerge, i32 0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %.0.vec.extract = extractelement <2 x double> %storemerge, i32 0
VisitInstr:   %32 = fcmp ugt double %.0.vec.extract, 2.500000e+06
CmpInst:   %32 = fcmp ugt double %.0.vec.extract, 2.500000e+06
Check LatCell: 0
In Meet:   %32 = fcmp ugt double %.0.vec.extract, 2.500000e+06, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %32 = fcmp ugt double %.0.vec.extract, 2.500000e+06
VisitInstr:   br i1 %32, label %50, label %33
BranchInst:   br i1 %32, label %50, label %33
In BranchInst: -1, 0x0
In AddEdge: 0x5632f5e9cf90, 0x5632f5e9d370, 0
Adding edge:  -> 
In AddEdge: 0x5632f5e9cf90, 0x5632f5e9d370, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %51 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.03, ptr noundef nonnull @.str.1) #4
Check LatCell: 0
In Meet:   %51 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.03, ptr noundef nonnull @.str.1) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %51 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.03, ptr noundef nonnull @.str.1) #4
VisitInstr:   %52 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.04, ptr noundef nonnull @.str.2) #4
Check LatCell: 0
In Meet:   %52 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.04, ptr noundef nonnull @.str.2) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %52 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.04, ptr noundef nonnull @.str.2) #4
VisitInstr:   %53 = call double @sum_vec(<2 x double> noundef %.09)
Check LatCell: 0
In Meet:   %53 = call double @sum_vec(<2 x double> noundef %.09), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %53 = call double @sum_vec(<2 x double> noundef %.09)
VisitInstr:   %54 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %53, ptr noundef nonnull @.str.3) #4
Check LatCell: 0
In Meet:   %54 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %53, ptr noundef nonnull @.str.3) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %54 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %53, ptr noundef nonnull @.str.3) #4
VisitInstr:   %55 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.05, ptr noundef nonnull @.str.4) #4
Check LatCell: 0
In Meet:   %55 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.05, ptr noundef nonnull @.str.4) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %55 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.05, ptr noundef nonnull @.str.4) #4
VisitInstr:   %56 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.06, ptr noundef nonnull @.str.5) #4
Check LatCell: 0
In Meet:   %56 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.06, ptr noundef nonnull @.str.5) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %56 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %.06, ptr noundef nonnull @.str.5) #4
VisitInstr:   %57 = call double @sum_vec(<2 x double> noundef %.07)
Check LatCell: 0
In Meet:   %57 = call double @sum_vec(<2 x double> noundef %.07), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %57 = call double @sum_vec(<2 x double> noundef %.07)
VisitInstr:   %58 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %57, ptr noundef nonnull @.str.6) #4
Check LatCell: 0
In Meet:   %58 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %57, ptr noundef nonnull @.str.6) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %58 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %57, ptr noundef nonnull @.str.6) #4
VisitInstr:   %59 = call double @sum_vec(<2 x double> noundef %.08)
Check LatCell: 0
In Meet:   %59 = call double @sum_vec(<2 x double> noundef %.08), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %59 = call double @sum_vec(<2 x double> noundef %.08)
VisitInstr:   %60 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %59, ptr noundef nonnull @.str.7) #4
Check LatCell: 0
In Meet:   %60 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %59, ptr noundef nonnull @.str.7) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %60 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %59, ptr noundef nonnull @.str.7) #4
VisitInstr:   %61 = call double @sum_vec(<2 x double> noundef %.02)
Check LatCell: 0
In Meet:   %61 = call double @sum_vec(<2 x double> noundef %.02), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %61 = call double @sum_vec(<2 x double> noundef %.02)
VisitInstr:   %62 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %61, ptr noundef nonnull @.str.8) #4
Check LatCell: 0
In Meet:   %62 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %61, ptr noundef nonnull @.str.8) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %62 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %61, ptr noundef nonnull @.str.8) #4
VisitInstr:   %63 = call double @sum_vec(<2 x double> noundef %.01)
Check LatCell: 0
In Meet:   %63 = call double @sum_vec(<2 x double> noundef %.01), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %63 = call double @sum_vec(<2 x double> noundef %.01)
VisitInstr:   %64 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %63, ptr noundef nonnull @.str.9) #4
Check LatCell: 0
In Meet:   %64 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %63, ptr noundef nonnull @.str.9) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %64 = call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, double noundef %63, ptr noundef nonnull @.str.9) #4
VisitInstr:   ret i32 0
Check LatCell: 0
In Meet:   ret i32 0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret i32 0
Visiting BB: 
VisitInstr:   %34 = fneg <2 x double> %4
UnaryOp:   %34 = fneg <2 x double> %4
Check LatCell: 0
In Meet:   %34 = fneg <2 x double> %4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %34 = fneg <2 x double> %4
VisitInstr:   %35 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %5, <2 x double> %storemerge, <2 x double> %34)
Check LatCell: 0
In Meet:   %35 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %5, <2 x double> %storemerge, <2 x double> %34), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %35 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %5, <2 x double> %storemerge, <2 x double> %34)
VisitInstr:   %36 = fdiv <2 x double> %8, %35
BinaryOp:   %36 = fdiv <2 x double> %8, %35
Check LatCell: 0
In Meet:   %36 = fdiv <2 x double> %8, %35, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %36 = fdiv <2 x double> %8, %35
VisitInstr:   %37 = fadd <2 x double> %.01, %36
BinaryOp:   %37 = fadd <2 x double> %.01, %36
Check LatCell: 0
In Meet:   %37 = fadd <2 x double> %.01, %36, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %37 = fadd <2 x double> %.01, %36
Adding SSA:   %.01 = phi <2 x double> [ %37, %33 ], [ %3, %9 ]
VisitInstr:   %38 = fdiv <2 x double> %8, %storemerge
BinaryOp:   %38 = fdiv <2 x double> %8, %storemerge
Check LatCell: 0
In Meet:   %38 = fdiv <2 x double> %8, %storemerge, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %38 = fdiv <2 x double> %8, %storemerge
VisitInstr:   %39 = fadd <2 x double> %.02, %38
BinaryOp:   %39 = fadd <2 x double> %.02, %38
Check LatCell: 0
In Meet:   %39 = fadd <2 x double> %.02, %38, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %39 = fadd <2 x double> %.02, %38
Adding SSA:   %.02 = phi <2 x double> [ %39, %33 ], [ %3, %9 ]
VisitInstr:   %40 = fmul <2 x double> %storemerge, %storemerge
BinaryOp:   %40 = fmul <2 x double> %storemerge, %storemerge
Check LatCell: 0
In Meet:   %40 = fmul <2 x double> %storemerge, %storemerge, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %40 = fmul <2 x double> %storemerge, %storemerge
VisitInstr:   %41 = fdiv <2 x double> %4, %40
BinaryOp:   %41 = fdiv <2 x double> %4, %40
Check LatCell: 0
In Meet:   %41 = fdiv <2 x double> %4, %40, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %41 = fdiv <2 x double> %4, %40
VisitInstr:   %42 = fadd <2 x double> %.08, %41
BinaryOp:   %42 = fadd <2 x double> %.08, %41
Check LatCell: 0
In Meet:   %42 = fadd <2 x double> %.08, %41, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %42 = fadd <2 x double> %.08, %41
Adding SSA:   %.08 = phi <2 x double> [ %42, %33 ], [ %3, %9 ]
VisitInstr:   %43 = fdiv <2 x double> %4, %storemerge
BinaryOp:   %43 = fdiv <2 x double> %4, %storemerge
Check LatCell: 0
In Meet:   %43 = fdiv <2 x double> %4, %storemerge, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %43 = fdiv <2 x double> %4, %storemerge
VisitInstr:   %44 = fadd <2 x double> %.07, %43
BinaryOp:   %44 = fadd <2 x double> %.07, %43
Check LatCell: 0
In Meet:   %44 = fadd <2 x double> %.07, %43, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %44 = fadd <2 x double> %.07, %43
Adding SSA:   %.07 = phi <2 x double> [ %44, %33 ], [ %3, %9 ]
VisitInstr:   %45 = fadd <2 x double> %storemerge, %4
BinaryOp:   %45 = fadd <2 x double> %storemerge, %4
Check LatCell: 0
In Meet:   %45 = fadd <2 x double> %storemerge, %4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %45 = fadd <2 x double> %storemerge, %4
VisitInstr:   %46 = fmul <2 x double> %storemerge, %45
BinaryOp:   %46 = fmul <2 x double> %storemerge, %45
Check LatCell: 0
In Meet:   %46 = fmul <2 x double> %storemerge, %45, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %46 = fmul <2 x double> %storemerge, %45
VisitInstr:   %47 = fdiv <2 x double> %4, %46
BinaryOp:   %47 = fdiv <2 x double> %4, %46
Check LatCell: 0
In Meet:   %47 = fdiv <2 x double> %4, %46, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %47 = fdiv <2 x double> %4, %46
VisitInstr:   %48 = fadd <2 x double> %.09, %47
BinaryOp:   %48 = fadd <2 x double> %.09, %47
Check LatCell: 0
In Meet:   %48 = fadd <2 x double> %.09, %47, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %48 = fadd <2 x double> %.09, %47
Adding SSA:   %.09 = phi <2 x double> [ %48, %33 ], [ %3, %9 ]
VisitInstr:   %49 = fadd <2 x double> %storemerge, %5
BinaryOp:   %49 = fadd <2 x double> %storemerge, %5
Check LatCell: 0
In Meet:   %49 = fadd <2 x double> %storemerge, %5, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %49 = fadd <2 x double> %storemerge, %5
Adding SSA:   %storemerge = phi <2 x double> [ %49, %33 ], [ %7, %9 ]
VisitInstr:   br label %31, !llvm.loop !8
BranchInst:   br label %31, !llvm.loop !8
In AddEdge: 0x5632f5e9e8c0, 0x5632f5e9eba0, 0
Adding edge:  -> 
Visiting SSA:   %.01 = phi <2 x double> [ %37, %33 ], [ %3, %9 ]
VisitInstr:   %.01 = phi <2 x double> [ %37, %33 ], [ %3, %9 ]
Visiting SSA:   %.02 = phi <2 x double> [ %39, %33 ], [ %3, %9 ]
VisitInstr:   %.02 = phi <2 x double> [ %39, %33 ], [ %3, %9 ]
Visiting SSA:   %.08 = phi <2 x double> [ %42, %33 ], [ %3, %9 ]
VisitInstr:   %.08 = phi <2 x double> [ %42, %33 ], [ %3, %9 ]
Visiting SSA:   %.07 = phi <2 x double> [ %44, %33 ], [ %3, %9 ]
VisitInstr:   %.07 = phi <2 x double> [ %44, %33 ], [ %3, %9 ]
Visiting SSA:   %.09 = phi <2 x double> [ %48, %33 ], [ %3, %9 ]
VisitInstr:   %.09 = phi <2 x double> [ %48, %33 ], [ %3, %9 ]
Visiting SSA:   %storemerge = phi <2 x double> [ %49, %33 ], [ %7, %9 ]
VisitInstr:   %storemerge = phi <2 x double> [ %49, %33 ], [ %7, %9 ]
UnitSCCP: 0 instructions removed, 0 basic blocks unreachable, 0 instructions simplified
UnitLICM running on main
******************************************************
UnitLoopAnalysis running on main
[LoopLoopAnalysis] parent loop header is:   %.06 = phi double [ 0.000000e+00, %2 ], [ %22, %11 ]
[LoopLoopAnalysis] parent loop header is:   %storemerge = phi <2 x double> [ %49, %33 ], [ %7, %9 ]
Instruction to be moved:   %34 = fneg <2 x double> %4
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 0
[UnitLICM]: NumComputeHoisted: 1
[UnitLICM]: Total: 1
----------------------------------------
Running sccp only: partialsums.c
UnitSCCP running on make_vec
Visiting BB: 
VisitInstr:   %3 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %3 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %3 = alloca <2 x double>, align 16
VisitInstr:   store double %0, ptr %3, align 8
Check LatCell: 0
In Meet:   store double %0, ptr %3, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %0, ptr %3, align 8
VisitInstr:   %4 = getelementptr inbounds double, ptr %3, i64 1
GetElementPtr:   %4 = getelementptr inbounds double, ptr %3, i64 1
Check LatCell: 0
In Meet:   %4 = getelementptr inbounds double, ptr %3, i64 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %4 = getelementptr inbounds double, ptr %3, i64 1
VisitInstr:   store double %1, ptr %4, align 8
Check LatCell: 0
In Meet:   store double %1, ptr %4, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %1, ptr %4, align 8
VisitInstr:   %5 = load <2 x double>, ptr %3, align 16
Check LatCell: 0
In Meet:   %5 = load <2 x double>, ptr %3, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %5 = load <2 x double>, ptr %3, align 16
VisitInstr:   ret <2 x double> %5
Check LatCell: 0
In Meet:   ret <2 x double> %5, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret <2 x double> %5
UnitSCCP: 0 instructions removed, 0 basic blocks unreachable, 0 instructions simplified
UnitSCCP running on sum_vec
Visiting BB: 
VisitInstr:   %2 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %2 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %2 = alloca <2 x double>, align 16
VisitInstr:   store <2 x double> %0, ptr %2, align 16
Check LatCell: 0
In Meet:   store <2 x double> %0, ptr %2, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %0, ptr %2, align 16
VisitInstr:   %3 = load double, ptr %2, align 8
Check LatCell: 0
In Meet:   %3 = load double, ptr %2, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %3 = load double, ptr %2, align 8
VisitInstr:   %4 = getelementptr inbounds double, ptr %2, i64 1
GetElementPtr:   %4 = getelementptr inbounds double, ptr %2, i64 1
Check LatCell: 0
In Meet:   %4 = getelementptr inbounds double, ptr %2, i64 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %4 = getelementptr inbounds double, ptr %2, i64 1
VisitInstr:   %5 = load double, ptr %4, align 8
Check LatCell: 0
In Meet:   %5 = load double, ptr %4, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %5 = load double, ptr %4, align 8
VisitInstr:   %6 = fadd double %3, %5
BinaryOp:   %6 = fadd double %3, %5
Check LatCell: 0
In Meet:   %6 = fadd double %3, %5, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %6 = fadd double %3, %5
VisitInstr:   ret double %6
Check LatCell: 0
In Meet:   ret double %6, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret double %6
UnitSCCP: 0 instructions removed, 0 basic blocks unreachable, 0 instructions simplified
UnitSCCP running on main
Visiting BB: 
VisitInstr:   %3 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %3 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %3 = alloca <2 x double>, align 16
VisitInstr:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
Check LatCell: 0
In Meet:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %4 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
VisitInstr:   %5 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 1.000000e+00)
Check LatCell: 0
In Meet:   %5 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 1.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %5 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 1.000000e+00)
VisitInstr:   %6 = call <2 x double> @make_vec(double noundef 2.000000e+00, double noundef 2.000000e+00)
Check LatCell: 0
In Meet:   %6 = call <2 x double> @make_vec(double noundef 2.000000e+00, double noundef 2.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %6 = call <2 x double> @make_vec(double noundef 2.000000e+00, double noundef 2.000000e+00)
VisitInstr:   %7 = call <2 x double> @make_vec(double noundef -1.000000e+00, double noundef -1.000000e+00)
Check LatCell: 0
In Meet:   %7 = call <2 x double> @make_vec(double noundef -1.000000e+00, double noundef -1.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %7 = call <2 x double> @make_vec(double noundef -1.000000e+00, double noundef -1.000000e+00)
VisitInstr:   %8 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 2.000000e+00)
Check LatCell: 0
In Meet:   %8 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 2.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %8 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 2.000000e+00)
VisitInstr:   %9 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef -1.000000e+00)
Check LatCell: 0
In Meet:   %9 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef -1.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %9 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef -1.000000e+00)
VisitInstr:   br label %10
BranchInst:   br label %10
In AddEdge: 0x559b310dc080, 0x559b310e1c00, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %32 ]
PHI:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %32 ]
PHI LatOp: 0, 0x559b310daae0
Check LatCell: 0
In Meet:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %32 ], Lat1: (1, 0x0), Lat2: (0, 0x559b310daae0)
Lat2.second: double 0.000000e+00
Meet:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %32 ]
VisitInstr:   %.05 = phi double [ 0.000000e+00, %2 ], [ %27, %32 ]
PHI:   %.05 = phi double [ 0.000000e+00, %2 ], [ %27, %32 ]
PHI LatOp: 0, 0x559b310daae0
Check LatCell: 0
In Meet:   %.05 = phi double [ 0.000000e+00, %2 ], [ %27, %32 ], Lat1: (1, 0x0), Lat2: (0, 0x559b310daae0)
Lat2.second: double 0.000000e+00
Meet:   %.05 = phi double [ 0.000000e+00, %2 ], [ %27, %32 ]
VisitInstr:   %.04 = phi double [ 0.000000e+00, %2 ], [ %19, %32 ]
PHI:   %.04 = phi double [ 0.000000e+00, %2 ], [ %19, %32 ]
PHI LatOp: 0, 0x559b310daae0
Check LatCell: 0
In Meet:   %.04 = phi double [ 0.000000e+00, %2 ], [ %19, %32 ], Lat1: (1, 0x0), Lat2: (0, 0x559b310daae0)
Lat2.second: double 0.000000e+00
Meet:   %.04 = phi double [ 0.000000e+00, %2 ], [ %19, %32 ]
VisitInstr:   %.03 = phi double [ 0.000000e+00, %2 ], [ %16, %32 ]
PHI:   %.03 = phi double [ 0.000000e+00, %2 ], [ %16, %32 ]
PHI LatOp: 0, 0x559b310daae0
Check LatCell: 0
In Meet:   %.03 = phi double [ 0.000000e+00, %2 ], [ %16, %32 ], Lat1: (1, 0x0), Lat2: (0, 0x559b310daae0)
Lat2.second: double 0.000000e+00
Meet:   %.03 = phi double [ 0.000000e+00, %2 ], [ %16, %32 ]
VisitInstr:   %.0 = phi double [ 1.000000e+00, %2 ], [ %33, %32 ]
PHI:   %.0 = phi double [ 1.000000e+00, %2 ], [ %33, %32 ]
PHI LatOp: 0, 0x559b310e0c90
Check LatCell: 0
In Meet:   %.0 = phi double [ 1.000000e+00, %2 ], [ %33, %32 ], Lat1: (1, 0x0), Lat2: (0, 0x559b310e0c90)
Lat2.second: double 1.000000e+00
Meet:   %.0 = phi double [ 1.000000e+00, %2 ], [ %33, %32 ]
VisitInstr:   %11 = sitofp i32 2500000 to double
UnaryOp:   %11 = sitofp i32 2500000 to double
Check LatCell: 0
In Meet:   %11 = sitofp i32 2500000 to double, Lat1: (1, 0x0), Lat2: (0, 0x559b310db8c0)
Lat2.second: i32 sitofp (i32 2500000 to i32)
Meet:   %11 = sitofp i32 2500000 to double
VisitInstr:   %12 = fcmp ole double %.0, %11
CmpInst:   %12 = fcmp ole double %.0, %11
Check LatCell: 0
In Meet:   %12 = fcmp ole double %.0, %11, Lat1: (1, 0x0), Lat2: (0, 0x559b310db240)
Lat2.second: i1 fcmp ole (double 1.000000e+00, i32 sitofp (i32 2500000 to i32))
Meet:   %12 = fcmp ole double %.0, %11
VisitInstr:   br i1 %12, label %13, label %34
BranchInst:   br i1 %12, label %13, label %34
In BranchInst: 0, 0x559b310db240
Removing:   %.0 = phi double [ 1.000000e+00, %2 ], [ %33, %32 ], replacing with: double 1.000000e+00
Removing:   %12 = fcmp ole double 1.000000e+00, %11, replacing with: i1 fcmp ole (double 1.000000e+00, i32 sitofp (i32 2500000 to i32))
Removing:   %11 = sitofp i32 2500000 to double, replacing with: i32 sitofp (i32 2500000 to i32)
Removing:   %.03 = phi double [ 0.000000e+00, %2 ], [ %14, %30 ], replacing with: double 0.000000e+00
Removing:   %.05 = phi double [ 0.000000e+00, %2 ], [ %25, %30 ], replacing with: double 0.000000e+00
Removing:   %.04 = phi double [ 0.000000e+00, %2 ], [ %17, %30 ], replacing with: double 0.000000e+00
Removing:   %.06 = phi double [ 0.000000e+00, %2 ], [ %29, %30 ], replacing with: double 0.000000e+00
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
Unreachable: 
UnitSCCP: 7 instructions removed, 7 basic blocks unreachable, 18 instructions simplified
----------------------------------------
Running licm only: partialsums.c
UnitLICM running on make_vec
******************************************************
UnitLoopAnalysis running on make_vec
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 0
[UnitLICM]: NumComputeHoisted: 0
[UnitLICM]: Total: 0
UnitLICM running on sum_vec
******************************************************
UnitLoopAnalysis running on sum_vec
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 0
[UnitLICM]: NumComputeHoisted: 0
[UnitLICM]: Total: 0
UnitLICM running on main
******************************************************
UnitLoopAnalysis running on main
[LoopLoopAnalysis] parent loop header is:   %.06 = phi double [ 0.000000e+00, %2 ], [ %31, %32 ]
[LoopLoopAnalysis] parent loop header is:   %.09 = phi <2 x double> [ %4, %34 ], [ %45, %62 ]
Instruction to be moved:   %11 = sitofp i32 2500000 to double
Instruction to be moved:   %36 = load double, ptr %3, align 16
Instruction to be moved:   %37 = sitofp i32 2500000 to double
Instruction to be moved:   %38 = fcmp ole double %35, %36
Instruction to be moved:   %40 = load <2 x double>, ptr %3, align 16
Instruction to be moved:   %41 = load <2 x double>, ptr %3, align 16
Instruction to be moved:   %42 = fadd <2 x double> %39, %5
Instruction to be moved:   %43 = fmul <2 x double> %38, %40
Instruction to be moved:   %44 = fdiv <2 x double> %5, %41
Instruction to be moved:   %46 = load <2 x double>, ptr %3, align 16
Instruction to be moved:   %47 = fdiv <2 x double> %5, %43
Instruction to be moved:   %49 = load <2 x double>, ptr %3, align 16
Instruction to be moved:   %50 = load <2 x double>, ptr %3, align 16
Instruction to be moved:   %51 = fmul <2 x double> %45, %46
Instruction to be moved:   %52 = fdiv <2 x double> %5, %47
Instruction to be moved:   %54 = load <2 x double>, ptr %3, align 16
Instruction to be moved:   %55 = fdiv <2 x double> %9, %49
Instruction to be moved:   %57 = load <2 x double>, ptr %3, align 16
Instruction to be moved:   %58 = fneg <2 x double> %5
Instruction to be moved:   %63 = load <2 x double>, ptr %3, align 16
Instruction to be moved:   %64 = fadd <2 x double> %53, %6
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 9
[UnitLICM]: NumComputeHoisted: 10
[UnitLICM]: Total: 21
----------------------------------------
Running sccp and licm: partialsums.c
UnitLICM running on make_vec
******************************************************
UnitLoopAnalysis running on make_vec
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 0
[UnitLICM]: NumComputeHoisted: 0
[UnitLICM]: Total: 0
UnitSCCP running on make_vec
Visiting BB: 
VisitInstr:   %3 = alloca double, align 8
Check LatCell: 0
In Meet:   %3 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %3 = alloca double, align 8
VisitInstr:   %4 = alloca double, align 8
Check LatCell: 0
In Meet:   %4 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %4 = alloca double, align 8
VisitInstr:   %5 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %5 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %5 = alloca <2 x double>, align 16
VisitInstr:   %6 = alloca ptr, align 8
Check LatCell: 0
In Meet:   %6 = alloca ptr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %6 = alloca ptr, align 8
VisitInstr:   store double %0, ptr %3, align 8
Check LatCell: 0
In Meet:   store double %0, ptr %3, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %0, ptr %3, align 8
VisitInstr:   store double %1, ptr %4, align 8
Check LatCell: 0
In Meet:   store double %1, ptr %4, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %1, ptr %4, align 8
VisitInstr:   store ptr %5, ptr %6, align 8
Check LatCell: 0
In Meet:   store ptr %5, ptr %6, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store ptr %5, ptr %6, align 8
VisitInstr:   %7 = load double, ptr %3, align 8
Check LatCell: 0
In Meet:   %7 = load double, ptr %3, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %7 = load double, ptr %3, align 8
VisitInstr:   %8 = load ptr, ptr %6, align 8
Check LatCell: 0
In Meet:   %8 = load ptr, ptr %6, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %8 = load ptr, ptr %6, align 8
VisitInstr:   store double %7, ptr %8, align 8
Check LatCell: 0
In Meet:   store double %7, ptr %8, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %7, ptr %8, align 8
VisitInstr:   %9 = load double, ptr %4, align 8
Check LatCell: 0
In Meet:   %9 = load double, ptr %4, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %9 = load double, ptr %4, align 8
VisitInstr:   %10 = load ptr, ptr %6, align 8
Check LatCell: 0
In Meet:   %10 = load ptr, ptr %6, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %10 = load ptr, ptr %6, align 8
VisitInstr:   %11 = getelementptr inbounds double, ptr %10, i64 1
GetElementPtr:   %11 = getelementptr inbounds double, ptr %10, i64 1
Check LatCell: 0
In Meet:   %11 = getelementptr inbounds double, ptr %10, i64 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %11 = getelementptr inbounds double, ptr %10, i64 1
VisitInstr:   store double %9, ptr %11, align 8
Check LatCell: 0
In Meet:   store double %9, ptr %11, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %9, ptr %11, align 8
VisitInstr:   %12 = load <2 x double>, ptr %5, align 16
Check LatCell: 0
In Meet:   %12 = load <2 x double>, ptr %5, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %12 = load <2 x double>, ptr %5, align 16
VisitInstr:   ret <2 x double> %12
Check LatCell: 0
In Meet:   ret <2 x double> %12, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret <2 x double> %12
UnitSCCP: 0 instructions removed, 0 basic blocks unreachable, 0 instructions simplified
UnitLICM running on sum_vec
******************************************************
UnitLoopAnalysis running on sum_vec
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 0
[UnitLICM]: NumComputeHoisted: 0
[UnitLICM]: Total: 0
UnitSCCP running on sum_vec
Visiting BB: 
VisitInstr:   %2 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %2 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %2 = alloca <2 x double>, align 16
VisitInstr:   %3 = alloca ptr, align 8
Check LatCell: 0
In Meet:   %3 = alloca ptr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %3 = alloca ptr, align 8
VisitInstr:   store <2 x double> %0, ptr %2, align 16
Check LatCell: 0
In Meet:   store <2 x double> %0, ptr %2, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %0, ptr %2, align 16
VisitInstr:   store ptr %2, ptr %3, align 8
Check LatCell: 0
In Meet:   store ptr %2, ptr %3, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store ptr %2, ptr %3, align 8
VisitInstr:   %4 = load ptr, ptr %3, align 8
Check LatCell: 0
In Meet:   %4 = load ptr, ptr %3, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %4 = load ptr, ptr %3, align 8
VisitInstr:   %5 = load double, ptr %4, align 8
Check LatCell: 0
In Meet:   %5 = load double, ptr %4, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %5 = load double, ptr %4, align 8
VisitInstr:   %6 = load ptr, ptr %3, align 8
Check LatCell: 0
In Meet:   %6 = load ptr, ptr %3, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %6 = load ptr, ptr %3, align 8
VisitInstr:   %7 = getelementptr inbounds double, ptr %6, i64 1
GetElementPtr:   %7 = getelementptr inbounds double, ptr %6, i64 1
Check LatCell: 0
In Meet:   %7 = getelementptr inbounds double, ptr %6, i64 1, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %7 = getelementptr inbounds double, ptr %6, i64 1
VisitInstr:   %8 = load double, ptr %7, align 8
Check LatCell: 0
In Meet:   %8 = load double, ptr %7, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %8 = load double, ptr %7, align 8
VisitInstr:   %9 = fadd double %5, %8
BinaryOp:   %9 = fadd double %5, %8
Check LatCell: 0
In Meet:   %9 = fadd double %5, %8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %9 = fadd double %5, %8
VisitInstr:   ret double %9
Check LatCell: 0
In Meet:   ret double %9, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret double %9
UnitSCCP: 0 instructions removed, 0 basic blocks unreachable, 0 instructions simplified
UnitLICM running on main
******************************************************
UnitLoopAnalysis running on main
[LoopLoopAnalysis] parent loop header is:   %35 = load double, ptr %22, align 8
[LoopLoopAnalysis] parent loop header is:   %81 = load double, ptr %20, align 16
Instruction to be moved:   %35 = load double, ptr %22, align 8
Instruction to be moved:   %36 = load i32, ptr %26, align 4
Instruction to be moved:   %37 = sitofp i32 %35 to double
Instruction to be moved:   %38 = fcmp ole double %34, %36
Instruction to be moved:   %40 = load double, ptr %22, align 8
Instruction to be moved:   %41 = fsub double %38, 1.000000e+00
Instruction to be moved:   %43 = load double, ptr %6, align 8
Instruction to be moved:   %45 = load double, ptr %22, align 8
Instruction to be moved:   %48 = load double, ptr %7, align 8
Instruction to be moved:   %50 = load double, ptr %22, align 8
Instruction to be moved:   %51 = load double, ptr %22, align 8
Instruction to be moved:   %52 = fmul double %43, %44
Instruction to be moved:   %53 = load double, ptr %22, align 8
Instruction to be moved:   %54 = fmul double %45, %46
Instruction to be moved:   %55 = load double, ptr %22, align 8
Instruction to be moved:   %57 = load double, ptr %22, align 8
Instruction to be moved:   %59 = load double, ptr %23, align 8
Instruction to be moved:   %60 = load double, ptr %24, align 8
Instruction to be moved:   %61 = fmul double %50, %51
Instruction to be moved:   %62 = load double, ptr %24, align 8
Instruction to be moved:   %63 = fmul double %52, %53
Instruction to be moved:   %64 = fdiv double 1.000000e+00, %54
Instruction to be moved:   %65 = load double, ptr %8, align 8
Instruction to be moved:   %66 = fadd double %56, %55
Instruction to be moved:   %67 = load double, ptr %23, align 8
Instruction to be moved:   %68 = load double, ptr %25, align 8
Instruction to be moved:   %69 = fmul double %58, %59
Instruction to be moved:   %70 = load double, ptr %25, align 8
Instruction to be moved:   %71 = fmul double %60, %61
Instruction to be moved:   %72 = fdiv double 1.000000e+00, %62
Instruction to be moved:   %73 = load double, ptr %9, align 8
Instruction to be moved:   %74 = fadd double %64, %63
Instruction to be moved:   %76 = load double, ptr %22, align 8
Instruction to be moved:   %77 = fadd double %66, 1.000000e+00
Instruction to be moved:   %81 = load double, ptr %20, align 16
Instruction to be moved:   %82 = load i32, ptr %26, align 4
Instruction to be moved:   %83 = sitofp i32 %81 to double
Instruction to be moved:   %84 = fcmp ole double %80, %82
Instruction to be moved:   %86 = load <2 x double>, ptr %16, align 16
Instruction to be moved:   %87 = load <2 x double>, ptr %20, align 16
Instruction to be moved:   %88 = load <2 x double>, ptr %20, align 16
Instruction to be moved:   %89 = load <2 x double>, ptr %16, align 16
Instruction to be moved:   %90 = fadd <2 x double> %86, %87
Instruction to be moved:   %91 = fmul <2 x double> %85, %88
Instruction to be moved:   %92 = fdiv <2 x double> %84, %89
Instruction to be moved:   %93 = load <2 x double>, ptr %12, align 16
Instruction to be moved:   %94 = fadd <2 x double> %91, %90
Instruction to be moved:   %95 = load <2 x double>, ptr %16, align 16
Instruction to be moved:   %96 = load <2 x double>, ptr %20, align 16
Instruction to be moved:   %97 = fdiv <2 x double> %93, %94
Instruction to be moved:   %98 = load <2 x double>, ptr %10, align 16
Instruction to be moved:   %99 = fadd <2 x double> %96, %95
Instruction to be moved:   %100 = load <2 x double>, ptr %16, align 16
Instruction to be moved:   %101 = load <2 x double>, ptr %20, align 16
Instruction to be moved:   %102 = load <2 x double>, ptr %20, align 16
Instruction to be moved:   %103 = fmul <2 x double> %99, %100
Instruction to be moved:   %104 = fdiv <2 x double> %98, %101
Instruction to be moved:   %105 = load <2 x double>, ptr %11, align 16
Instruction to be moved:   %106 = fadd <2 x double> %103, %102
Instruction to be moved:   %107 = load <2 x double>, ptr %21, align 16
Instruction to be moved:   %108 = load <2 x double>, ptr %20, align 16
Instruction to be moved:   %109 = fdiv <2 x double> %105, %106
Instruction to be moved:   %110 = load <2 x double>, ptr %13, align 16
Instruction to be moved:   %111 = fadd <2 x double> %108, %107
Instruction to be moved:   %112 = load <2 x double>, ptr %21, align 16
Instruction to be moved:   %113 = load <2 x double>, ptr %17, align 16
Instruction to be moved:   %114 = load <2 x double>, ptr %20, align 16
Instruction to be moved:   %115 = load <2 x double>, ptr %16, align 16
Instruction to be moved:   %116 = fneg <2 x double> %113
Instruction to be moved:   %119 = load <2 x double>, ptr %14, align 16
Instruction to be moved:   %122 = load <2 x double>, ptr %17, align 16
Instruction to be moved:   %123 = load <2 x double>, ptr %20, align 16
Instruction to be moved:   %124 = fadd <2 x double> %117, %116
[UnitLICM]: NumStoreHoisted: 0
[UnitLICM]: NumLoadHoisted: 44
[UnitLICM]: NumComputeHoisted: 27
[UnitLICM]: Total: 73
UnitSCCP running on main
Visiting BB: 
VisitInstr:   %3 = alloca i32, align 4
Check LatCell: 0
In Meet:   %3 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %3 = alloca i32, align 4
VisitInstr:   %4 = alloca i32, align 4
Check LatCell: 0
In Meet:   %4 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %4 = alloca i32, align 4
VisitInstr:   %5 = alloca ptr, align 8
Check LatCell: 0
In Meet:   %5 = alloca ptr, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %5 = alloca ptr, align 8
VisitInstr:   %6 = alloca double, align 8
Check LatCell: 0
In Meet:   %6 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %6 = alloca double, align 8
VisitInstr:   %7 = alloca double, align 8
Check LatCell: 0
In Meet:   %7 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %7 = alloca double, align 8
VisitInstr:   %8 = alloca double, align 8
Check LatCell: 0
In Meet:   %8 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %8 = alloca double, align 8
VisitInstr:   %9 = alloca double, align 8
Check LatCell: 0
In Meet:   %9 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %9 = alloca double, align 8
VisitInstr:   %10 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %10 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %10 = alloca <2 x double>, align 16
VisitInstr:   %11 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %11 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %11 = alloca <2 x double>, align 16
VisitInstr:   %12 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %12 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %12 = alloca <2 x double>, align 16
VisitInstr:   %13 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %13 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %13 = alloca <2 x double>, align 16
VisitInstr:   %14 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %14 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %14 = alloca <2 x double>, align 16
VisitInstr:   %15 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %15 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %15 = alloca <2 x double>, align 16
VisitInstr:   %16 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %16 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %16 = alloca <2 x double>, align 16
VisitInstr:   %17 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %17 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %17 = alloca <2 x double>, align 16
VisitInstr:   %18 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %18 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %18 = alloca <2 x double>, align 16
VisitInstr:   %19 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %19 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %19 = alloca <2 x double>, align 16
VisitInstr:   %20 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %20 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %20 = alloca <2 x double>, align 16
VisitInstr:   %21 = alloca <2 x double>, align 16
Check LatCell: 0
In Meet:   %21 = alloca <2 x double>, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %21 = alloca <2 x double>, align 16
VisitInstr:   %22 = alloca double, align 8
Check LatCell: 0
In Meet:   %22 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %22 = alloca double, align 8
VisitInstr:   %23 = alloca double, align 8
Check LatCell: 0
In Meet:   %23 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %23 = alloca double, align 8
VisitInstr:   %24 = alloca double, align 8
Check LatCell: 0
In Meet:   %24 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %24 = alloca double, align 8
VisitInstr:   %25 = alloca double, align 8
Check LatCell: 0
In Meet:   %25 = alloca double, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %25 = alloca double, align 8
VisitInstr:   %26 = alloca i32, align 4
Check LatCell: 0
In Meet:   %26 = alloca i32, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %26 = alloca i32, align 4
VisitInstr:   store i32 0, ptr %3, align 4
Check LatCell: 0
In Meet:   store i32 0, ptr %3, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 0, ptr %3, align 4
VisitInstr:   store i32 %0, ptr %4, align 4
Check LatCell: 0
In Meet:   store i32 %0, ptr %4, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 %0, ptr %4, align 4
VisitInstr:   store ptr %1, ptr %5, align 8
Check LatCell: 0
In Meet:   store ptr %1, ptr %5, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store ptr %1, ptr %5, align 8
VisitInstr:   store double 0.000000e+00, ptr %6, align 8
Check LatCell: 0
In Meet:   store double 0.000000e+00, ptr %6, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 0.000000e+00, ptr %6, align 8
VisitInstr:   store double 0.000000e+00, ptr %7, align 8
Check LatCell: 0
In Meet:   store double 0.000000e+00, ptr %7, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 0.000000e+00, ptr %7, align 8
VisitInstr:   store double 0.000000e+00, ptr %8, align 8
Check LatCell: 0
In Meet:   store double 0.000000e+00, ptr %8, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 0.000000e+00, ptr %8, align 8
VisitInstr:   store double 0.000000e+00, ptr %9, align 8
Check LatCell: 0
In Meet:   store double 0.000000e+00, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 0.000000e+00, ptr %9, align 8
VisitInstr:   store i32 2500000, ptr %26, align 4
Check LatCell: 0
In Meet:   store i32 2500000, ptr %26, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store i32 2500000, ptr %26, align 4
VisitInstr:   %27 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
Check LatCell: 0
In Meet:   %27 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %27 = call <2 x double> @make_vec(double noundef 0.000000e+00, double noundef 0.000000e+00)
VisitInstr:   store <2 x double> %27, ptr %15, align 16
Check LatCell: 0
In Meet:   store <2 x double> %27, ptr %15, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %27, ptr %15, align 16
VisitInstr:   %28 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 1.000000e+00)
Check LatCell: 0
In Meet:   %28 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 1.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %28 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 1.000000e+00)
VisitInstr:   store <2 x double> %28, ptr %16, align 16
Check LatCell: 0
In Meet:   store <2 x double> %28, ptr %16, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %28, ptr %16, align 16
VisitInstr:   %29 = call <2 x double> @make_vec(double noundef 2.000000e+00, double noundef 2.000000e+00)
Check LatCell: 0
In Meet:   %29 = call <2 x double> @make_vec(double noundef 2.000000e+00, double noundef 2.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %29 = call <2 x double> @make_vec(double noundef 2.000000e+00, double noundef 2.000000e+00)
VisitInstr:   store <2 x double> %29, ptr %17, align 16
Check LatCell: 0
In Meet:   store <2 x double> %29, ptr %17, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %29, ptr %17, align 16
VisitInstr:   %30 = call <2 x double> @make_vec(double noundef -1.000000e+00, double noundef -1.000000e+00)
Check LatCell: 0
In Meet:   %30 = call <2 x double> @make_vec(double noundef -1.000000e+00, double noundef -1.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %30 = call <2 x double> @make_vec(double noundef -1.000000e+00, double noundef -1.000000e+00)
VisitInstr:   store <2 x double> %30, ptr %19, align 16
Check LatCell: 0
In Meet:   store <2 x double> %30, ptr %19, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %30, ptr %19, align 16
VisitInstr:   %31 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 2.000000e+00)
Check LatCell: 0
In Meet:   %31 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 2.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %31 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef 2.000000e+00)
VisitInstr:   store <2 x double> %31, ptr %18, align 16
Check LatCell: 0
In Meet:   store <2 x double> %31, ptr %18, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %31, ptr %18, align 16
VisitInstr:   %32 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef -1.000000e+00)
Check LatCell: 0
In Meet:   %32 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef -1.000000e+00), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %32 = call <2 x double> @make_vec(double noundef 1.000000e+00, double noundef -1.000000e+00)
VisitInstr:   store <2 x double> %32, ptr %21, align 16
Check LatCell: 0
In Meet:   store <2 x double> %32, ptr %21, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %32, ptr %21, align 16
VisitInstr:   %33 = load <2 x double>, ptr %15, align 16
Check LatCell: 0
In Meet:   %33 = load <2 x double>, ptr %15, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %33 = load <2 x double>, ptr %15, align 16
VisitInstr:   store <2 x double> %33, ptr %14, align 16
Check LatCell: 0
In Meet:   store <2 x double> %33, ptr %14, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %33, ptr %14, align 16
VisitInstr:   store <2 x double> %33, ptr %13, align 16
Check LatCell: 0
In Meet:   store <2 x double> %33, ptr %13, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %33, ptr %13, align 16
VisitInstr:   store <2 x double> %33, ptr %12, align 16
Check LatCell: 0
In Meet:   store <2 x double> %33, ptr %12, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %33, ptr %12, align 16
VisitInstr:   store <2 x double> %33, ptr %11, align 16
Check LatCell: 0
In Meet:   store <2 x double> %33, ptr %11, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %33, ptr %11, align 16
VisitInstr:   store <2 x double> %33, ptr %10, align 16
Check LatCell: 0
In Meet:   store <2 x double> %33, ptr %10, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %33, ptr %10, align 16
VisitInstr:   store double 1.000000e+00, ptr %22, align 8
Check LatCell: 0
In Meet:   store double 1.000000e+00, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double 1.000000e+00, ptr %22, align 8
VisitInstr:   %34 = load double, ptr %22, align 8
Check LatCell: 0
In Meet:   %34 = load double, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %34 = load double, ptr %22, align 8
VisitInstr:   %35 = load i32, ptr %26, align 4
Check LatCell: 0
In Meet:   %35 = load i32, ptr %26, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %35 = load i32, ptr %26, align 4
VisitInstr:   %36 = sitofp i32 %35 to double
UnaryOp:   %36 = sitofp i32 %35 to double
Check LatCell: 0
In Meet:   %36 = sitofp i32 %35 to double, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %36 = sitofp i32 %35 to double
VisitInstr:   %37 = fcmp ole double %34, %36
CmpInst:   %37 = fcmp ole double %34, %36
Check LatCell: 0
In Meet:   %37 = fcmp ole double %34, %36, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %37 = fcmp ole double %34, %36
VisitInstr:   %38 = load double, ptr %22, align 8
Check LatCell: 0
In Meet:   %38 = load double, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %38 = load double, ptr %22, align 8
VisitInstr:   %39 = fsub double %38, 1.000000e+00
BinaryOp:   %39 = fsub double %38, 1.000000e+00
Check LatCell: 0
In Meet:   %39 = fsub double %38, 1.000000e+00, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %39 = fsub double %38, 1.000000e+00
VisitInstr:   %40 = load double, ptr %6, align 8
Check LatCell: 0
In Meet:   %40 = load double, ptr %6, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %40 = load double, ptr %6, align 8
VisitInstr:   %41 = load double, ptr %22, align 8
Check LatCell: 0
In Meet:   %41 = load double, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %41 = load double, ptr %22, align 8
VisitInstr:   %42 = load double, ptr %7, align 8
Check LatCell: 0
In Meet:   %42 = load double, ptr %7, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %42 = load double, ptr %7, align 8
VisitInstr:   %43 = load double, ptr %22, align 8
Check LatCell: 0
In Meet:   %43 = load double, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %43 = load double, ptr %22, align 8
VisitInstr:   %44 = load double, ptr %22, align 8
Check LatCell: 0
In Meet:   %44 = load double, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %44 = load double, ptr %22, align 8
VisitInstr:   %45 = fmul double %43, %44
BinaryOp:   %45 = fmul double %43, %44
Check LatCell: 0
In Meet:   %45 = fmul double %43, %44, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %45 = fmul double %43, %44
VisitInstr:   %46 = load double, ptr %22, align 8
Check LatCell: 0
In Meet:   %46 = load double, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %46 = load double, ptr %22, align 8
VisitInstr:   %47 = fmul double %45, %46
BinaryOp:   %47 = fmul double %45, %46
Check LatCell: 0
In Meet:   %47 = fmul double %45, %46, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %47 = fmul double %45, %46
VisitInstr:   %48 = load double, ptr %22, align 8
Check LatCell: 0
In Meet:   %48 = load double, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %48 = load double, ptr %22, align 8
VisitInstr:   %49 = load double, ptr %22, align 8
Check LatCell: 0
In Meet:   %49 = load double, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %49 = load double, ptr %22, align 8
VisitInstr:   %50 = load double, ptr %23, align 8
Check LatCell: 0
In Meet:   %50 = load double, ptr %23, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %50 = load double, ptr %23, align 8
VisitInstr:   %51 = load double, ptr %24, align 8
Check LatCell: 0
In Meet:   %51 = load double, ptr %24, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %51 = load double, ptr %24, align 8
VisitInstr:   %52 = fmul double %50, %51
BinaryOp:   %52 = fmul double %50, %51
Check LatCell: 0
In Meet:   %52 = fmul double %50, %51, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %52 = fmul double %50, %51
VisitInstr:   %53 = load double, ptr %24, align 8
Check LatCell: 0
In Meet:   %53 = load double, ptr %24, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %53 = load double, ptr %24, align 8
VisitInstr:   %54 = fmul double %52, %53
BinaryOp:   %54 = fmul double %52, %53
Check LatCell: 0
In Meet:   %54 = fmul double %52, %53, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %54 = fmul double %52, %53
VisitInstr:   %55 = fdiv double 1.000000e+00, %54
BinaryOp:   %55 = fdiv double 1.000000e+00, %54
Check LatCell: 0
In Meet:   %55 = fdiv double 1.000000e+00, %54, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %55 = fdiv double 1.000000e+00, %54
VisitInstr:   %56 = load double, ptr %8, align 8
Check LatCell: 0
In Meet:   %56 = load double, ptr %8, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %56 = load double, ptr %8, align 8
VisitInstr:   %57 = fadd double %56, %55
BinaryOp:   %57 = fadd double %56, %55
Check LatCell: 0
In Meet:   %57 = fadd double %56, %55, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %57 = fadd double %56, %55
VisitInstr:   %58 = load double, ptr %23, align 8
Check LatCell: 0
In Meet:   %58 = load double, ptr %23, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %58 = load double, ptr %23, align 8
VisitInstr:   %59 = load double, ptr %25, align 8
Check LatCell: 0
In Meet:   %59 = load double, ptr %25, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %59 = load double, ptr %25, align 8
VisitInstr:   %60 = fmul double %58, %59
BinaryOp:   %60 = fmul double %58, %59
Check LatCell: 0
In Meet:   %60 = fmul double %58, %59, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %60 = fmul double %58, %59
VisitInstr:   %61 = load double, ptr %25, align 8
Check LatCell: 0
In Meet:   %61 = load double, ptr %25, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %61 = load double, ptr %25, align 8
VisitInstr:   %62 = fmul double %60, %61
BinaryOp:   %62 = fmul double %60, %61
Check LatCell: 0
In Meet:   %62 = fmul double %60, %61, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %62 = fmul double %60, %61
VisitInstr:   %63 = fdiv double 1.000000e+00, %62
BinaryOp:   %63 = fdiv double 1.000000e+00, %62
Check LatCell: 0
In Meet:   %63 = fdiv double 1.000000e+00, %62, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %63 = fdiv double 1.000000e+00, %62
VisitInstr:   %64 = load double, ptr %9, align 8
Check LatCell: 0
In Meet:   %64 = load double, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %64 = load double, ptr %9, align 8
VisitInstr:   %65 = fadd double %64, %63
BinaryOp:   %65 = fadd double %64, %63
Check LatCell: 0
In Meet:   %65 = fadd double %64, %63, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %65 = fadd double %64, %63
VisitInstr:   %66 = load double, ptr %22, align 8
Check LatCell: 0
In Meet:   %66 = load double, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %66 = load double, ptr %22, align 8
VisitInstr:   %67 = fadd double %66, 1.000000e+00
BinaryOp:   %67 = fadd double %66, 1.000000e+00
Check LatCell: 0
In Meet:   %67 = fadd double %66, 1.000000e+00, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %67 = fadd double %66, 1.000000e+00
VisitInstr:   br label %68
BranchInst:   br label %68
In AddEdge: 0x55b39b630070, 0x55b39b635bf0, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %37, label %69, label %78
BranchInst:   br i1 %37, label %69, label %78
In BranchInst: -1, 0x0
In AddEdge: 0x55b39b635b40, 0x55b39b635f60, 0
Adding edge:  -> 
In AddEdge: 0x55b39b635b40, 0x55b39b635f60, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %70 = call double @pow(double noundef 0x3FE5555555555555, double noundef %39) #4
Check LatCell: 0
In Meet:   %70 = call double @pow(double noundef 0x3FE5555555555555, double noundef %39) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %70 = call double @pow(double noundef 0x3FE5555555555555, double noundef %39) #4
VisitInstr:   %71 = fadd double %40, %70
BinaryOp:   %71 = fadd double %40, %70
Check LatCell: 0
In Meet:   %71 = fadd double %40, %70, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %71 = fadd double %40, %70
VisitInstr:   store double %71, ptr %6, align 8
Check LatCell: 0
In Meet:   store double %71, ptr %6, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %71, ptr %6, align 8
VisitInstr:   %72 = call double @sqrt(double noundef %41) #4
Check LatCell: 0
In Meet:   %72 = call double @sqrt(double noundef %41) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %72 = call double @sqrt(double noundef %41) #4
VisitInstr:   %73 = fdiv double 1.000000e+00, %72
BinaryOp:   %73 = fdiv double 1.000000e+00, %72
Check LatCell: 0
In Meet:   %73 = fdiv double 1.000000e+00, %72, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %73 = fdiv double 1.000000e+00, %72
VisitInstr:   %74 = fadd double %42, %73
BinaryOp:   %74 = fadd double %42, %73
Check LatCell: 0
In Meet:   %74 = fadd double %42, %73, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %74 = fadd double %42, %73
VisitInstr:   store double %74, ptr %7, align 8
Check LatCell: 0
In Meet:   store double %74, ptr %7, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %74, ptr %7, align 8
VisitInstr:   store double %47, ptr %23, align 8
Check LatCell: 0
In Meet:   store double %47, ptr %23, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %47, ptr %23, align 8
VisitInstr:   %75 = call double @sin(double noundef %48) #4
Check LatCell: 0
In Meet:   %75 = call double @sin(double noundef %48) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %75 = call double @sin(double noundef %48) #4
VisitInstr:   store double %75, ptr %24, align 8
Check LatCell: 0
In Meet:   store double %75, ptr %24, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %75, ptr %24, align 8
VisitInstr:   %76 = call double @cos(double noundef %49) #4
Check LatCell: 0
In Meet:   %76 = call double @cos(double noundef %49) #4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %76 = call double @cos(double noundef %49) #4
VisitInstr:   store double %76, ptr %25, align 8
Check LatCell: 0
In Meet:   store double %76, ptr %25, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %76, ptr %25, align 8
VisitInstr:   store double %57, ptr %8, align 8
Check LatCell: 0
In Meet:   store double %57, ptr %8, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %57, ptr %8, align 8
VisitInstr:   store double %65, ptr %9, align 8
Check LatCell: 0
In Meet:   store double %65, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %65, ptr %9, align 8
VisitInstr:   br label %77
BranchInst:   br label %77
In AddEdge: 0x55b39b635e20, 0x55b39b637f50, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %79 = load <2 x double>, ptr %18, align 16
Check LatCell: 0
In Meet:   %79 = load <2 x double>, ptr %18, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %79 = load <2 x double>, ptr %18, align 16
VisitInstr:   store <2 x double> %79, ptr %20, align 16
Check LatCell: 0
In Meet:   store <2 x double> %79, ptr %20, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %79, ptr %20, align 16
VisitInstr:   %80 = load double, ptr %20, align 16
Check LatCell: 0
In Meet:   %80 = load double, ptr %20, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %80 = load double, ptr %20, align 16
VisitInstr:   %81 = load i32, ptr %26, align 4
Check LatCell: 0
In Meet:   %81 = load i32, ptr %26, align 4, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %81 = load i32, ptr %26, align 4
VisitInstr:   %82 = sitofp i32 %81 to double
UnaryOp:   %82 = sitofp i32 %81 to double
Check LatCell: 0
In Meet:   %82 = sitofp i32 %81 to double, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %82 = sitofp i32 %81 to double
VisitInstr:   %83 = fcmp ole double %80, %82
CmpInst:   %83 = fcmp ole double %80, %82
Check LatCell: 0
In Meet:   %83 = fcmp ole double %80, %82, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %83 = fcmp ole double %80, %82
VisitInstr:   %84 = load <2 x double>, ptr %16, align 16
Check LatCell: 0
In Meet:   %84 = load <2 x double>, ptr %16, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %84 = load <2 x double>, ptr %16, align 16
VisitInstr:   %85 = load <2 x double>, ptr %20, align 16
Check LatCell: 0
In Meet:   %85 = load <2 x double>, ptr %20, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %85 = load <2 x double>, ptr %20, align 16
VisitInstr:   %86 = load <2 x double>, ptr %20, align 16
Check LatCell: 0
In Meet:   %86 = load <2 x double>, ptr %20, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %86 = load <2 x double>, ptr %20, align 16
VisitInstr:   %87 = load <2 x double>, ptr %16, align 16
Check LatCell: 0
In Meet:   %87 = load <2 x double>, ptr %16, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %87 = load <2 x double>, ptr %16, align 16
VisitInstr:   %88 = fadd <2 x double> %86, %87
BinaryOp:   %88 = fadd <2 x double> %86, %87
Check LatCell: 0
In Meet:   %88 = fadd <2 x double> %86, %87, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %88 = fadd <2 x double> %86, %87
VisitInstr:   %89 = fmul <2 x double> %85, %88
BinaryOp:   %89 = fmul <2 x double> %85, %88
Check LatCell: 0
In Meet:   %89 = fmul <2 x double> %85, %88, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %89 = fmul <2 x double> %85, %88
VisitInstr:   %90 = fdiv <2 x double> %84, %89
BinaryOp:   %90 = fdiv <2 x double> %84, %89
Check LatCell: 0
In Meet:   %90 = fdiv <2 x double> %84, %89, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %90 = fdiv <2 x double> %84, %89
VisitInstr:   %91 = load <2 x double>, ptr %12, align 16
Check LatCell: 0
In Meet:   %91 = load <2 x double>, ptr %12, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %91 = load <2 x double>, ptr %12, align 16
VisitInstr:   %92 = fadd <2 x double> %91, %90
BinaryOp:   %92 = fadd <2 x double> %91, %90
Check LatCell: 0
In Meet:   %92 = fadd <2 x double> %91, %90, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %92 = fadd <2 x double> %91, %90
VisitInstr:   %93 = load <2 x double>, ptr %16, align 16
Check LatCell: 0
In Meet:   %93 = load <2 x double>, ptr %16, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %93 = load <2 x double>, ptr %16, align 16
VisitInstr:   %94 = load <2 x double>, ptr %20, align 16
Check LatCell: 0
In Meet:   %94 = load <2 x double>, ptr %20, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %94 = load <2 x double>, ptr %20, align 16
VisitInstr:   %95 = fdiv <2 x double> %93, %94
BinaryOp:   %95 = fdiv <2 x double> %93, %94
Check LatCell: 0
In Meet:   %95 = fdiv <2 x double> %93, %94, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %95 = fdiv <2 x double> %93, %94
VisitInstr:   %96 = load <2 x double>, ptr %10, align 16
Check LatCell: 0
In Meet:   %96 = load <2 x double>, ptr %10, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %96 = load <2 x double>, ptr %10, align 16
VisitInstr:   %97 = fadd <2 x double> %96, %95
BinaryOp:   %97 = fadd <2 x double> %96, %95
Check LatCell: 0
In Meet:   %97 = fadd <2 x double> %96, %95, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %97 = fadd <2 x double> %96, %95
VisitInstr:   %98 = load <2 x double>, ptr %16, align 16
Check LatCell: 0
In Meet:   %98 = load <2 x double>, ptr %16, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %98 = load <2 x double>, ptr %16, align 16
VisitInstr:   %99 = load <2 x double>, ptr %20, align 16
Check LatCell: 0
In Meet:   %99 = load <2 x double>, ptr %20, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %99 = load <2 x double>, ptr %20, align 16
VisitInstr:   %100 = load <2 x double>, ptr %20, align 16
Check LatCell: 0
In Meet:   %100 = load <2 x double>, ptr %20, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %100 = load <2 x double>, ptr %20, align 16
VisitInstr:   %101 = fmul <2 x double> %99, %100
BinaryOp:   %101 = fmul <2 x double> %99, %100
Check LatCell: 0
In Meet:   %101 = fmul <2 x double> %99, %100, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %101 = fmul <2 x double> %99, %100
VisitInstr:   %102 = fdiv <2 x double> %98, %101
BinaryOp:   %102 = fdiv <2 x double> %98, %101
Check LatCell: 0
In Meet:   %102 = fdiv <2 x double> %98, %101, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %102 = fdiv <2 x double> %98, %101
VisitInstr:   %103 = load <2 x double>, ptr %11, align 16
Check LatCell: 0
In Meet:   %103 = load <2 x double>, ptr %11, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %103 = load <2 x double>, ptr %11, align 16
VisitInstr:   %104 = fadd <2 x double> %103, %102
BinaryOp:   %104 = fadd <2 x double> %103, %102
Check LatCell: 0
In Meet:   %104 = fadd <2 x double> %103, %102, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %104 = fadd <2 x double> %103, %102
VisitInstr:   %105 = load <2 x double>, ptr %21, align 16
Check LatCell: 0
In Meet:   %105 = load <2 x double>, ptr %21, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %105 = load <2 x double>, ptr %21, align 16
VisitInstr:   %106 = load <2 x double>, ptr %20, align 16
Check LatCell: 0
In Meet:   %106 = load <2 x double>, ptr %20, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %106 = load <2 x double>, ptr %20, align 16
VisitInstr:   %107 = fdiv <2 x double> %105, %106
BinaryOp:   %107 = fdiv <2 x double> %105, %106
Check LatCell: 0
In Meet:   %107 = fdiv <2 x double> %105, %106, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %107 = fdiv <2 x double> %105, %106
VisitInstr:   %108 = load <2 x double>, ptr %13, align 16
Check LatCell: 0
In Meet:   %108 = load <2 x double>, ptr %13, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %108 = load <2 x double>, ptr %13, align 16
VisitInstr:   %109 = fadd <2 x double> %108, %107
BinaryOp:   %109 = fadd <2 x double> %108, %107
Check LatCell: 0
In Meet:   %109 = fadd <2 x double> %108, %107, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %109 = fadd <2 x double> %108, %107
VisitInstr:   %110 = load <2 x double>, ptr %21, align 16
Check LatCell: 0
In Meet:   %110 = load <2 x double>, ptr %21, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %110 = load <2 x double>, ptr %21, align 16
VisitInstr:   %111 = load <2 x double>, ptr %17, align 16
Check LatCell: 0
In Meet:   %111 = load <2 x double>, ptr %17, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %111 = load <2 x double>, ptr %17, align 16
VisitInstr:   %112 = load <2 x double>, ptr %20, align 16
Check LatCell: 0
In Meet:   %112 = load <2 x double>, ptr %20, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %112 = load <2 x double>, ptr %20, align 16
VisitInstr:   %113 = load <2 x double>, ptr %16, align 16
Check LatCell: 0
In Meet:   %113 = load <2 x double>, ptr %16, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %113 = load <2 x double>, ptr %16, align 16
VisitInstr:   %114 = fneg <2 x double> %113
UnaryOp:   %114 = fneg <2 x double> %113
Check LatCell: 0
In Meet:   %114 = fneg <2 x double> %113, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %114 = fneg <2 x double> %113
VisitInstr:   %115 = load <2 x double>, ptr %14, align 16
Check LatCell: 0
In Meet:   %115 = load <2 x double>, ptr %14, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %115 = load <2 x double>, ptr %14, align 16
VisitInstr:   %116 = load <2 x double>, ptr %17, align 16
Check LatCell: 0
In Meet:   %116 = load <2 x double>, ptr %17, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %116 = load <2 x double>, ptr %17, align 16
VisitInstr:   %117 = load <2 x double>, ptr %20, align 16
Check LatCell: 0
In Meet:   %117 = load <2 x double>, ptr %20, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %117 = load <2 x double>, ptr %20, align 16
VisitInstr:   %118 = fadd <2 x double> %117, %116
BinaryOp:   %118 = fadd <2 x double> %117, %116
Check LatCell: 0
In Meet:   %118 = fadd <2 x double> %117, %116, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %118 = fadd <2 x double> %117, %116
VisitInstr:   br label %119
BranchInst:   br label %119
In AddEdge: 0x55b39b635e70, 0x55b39b638e20, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store double %67, ptr %22, align 8
Check LatCell: 0
In Meet:   store double %67, ptr %22, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store double %67, ptr %22, align 8
VisitInstr:   br label %68, !llvm.loop !6
BranchInst:   br label %68, !llvm.loop !6
In AddEdge: 0x55b39b637ea0, 0x55b39b638150, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   br i1 %83, label %120, label %125
BranchInst:   br i1 %83, label %120, label %125
In BranchInst: -1, 0x0
In AddEdge: 0x55b39b638db0, 0x55b39b639190, 0
Adding edge:  -> 
In AddEdge: 0x55b39b638db0, 0x55b39b639190, 1
Adding edge:  -> 
Visiting BB: 
VisitInstr:   store <2 x double> %92, ptr %12, align 16
Check LatCell: 0
In Meet:   store <2 x double> %92, ptr %12, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %92, ptr %12, align 16
VisitInstr:   store <2 x double> %97, ptr %10, align 16
Check LatCell: 0
In Meet:   store <2 x double> %97, ptr %10, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %97, ptr %10, align 16
VisitInstr:   store <2 x double> %104, ptr %11, align 16
Check LatCell: 0
In Meet:   store <2 x double> %104, ptr %11, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %104, ptr %11, align 16
VisitInstr:   store <2 x double> %109, ptr %13, align 16
Check LatCell: 0
In Meet:   store <2 x double> %109, ptr %13, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %109, ptr %13, align 16
VisitInstr:   %121 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %111, <2 x double> %112, <2 x double> %114)
Check LatCell: 0
In Meet:   %121 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %111, <2 x double> %112, <2 x double> %114), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %121 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %111, <2 x double> %112, <2 x double> %114)
VisitInstr:   %122 = fdiv <2 x double> %110, %121
BinaryOp:   %122 = fdiv <2 x double> %110, %121
Check LatCell: 0
In Meet:   %122 = fdiv <2 x double> %110, %121, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %122 = fdiv <2 x double> %110, %121
VisitInstr:   %123 = fadd <2 x double> %115, %122
BinaryOp:   %123 = fadd <2 x double> %115, %122
Check LatCell: 0
In Meet:   %123 = fadd <2 x double> %115, %122, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %123 = fadd <2 x double> %115, %122
VisitInstr:   store <2 x double> %123, ptr %14, align 16
Check LatCell: 0
In Meet:   store <2 x double> %123, ptr %14, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %123, ptr %14, align 16
VisitInstr:   br label %124
BranchInst:   br label %124
In AddEdge: 0x55b39b639050, 0x55b39b63a750, 0
Adding edge:  -> 
Visiting BB: 
VisitInstr:   %126 = load double, ptr %6, align 8
Check LatCell: 0
In Meet:   %126 = load double, ptr %6, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %126 = load double, ptr %6, align 8
VisitInstr:   %127 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %126, ptr noundef @.str.1)
Check LatCell: 0
In Meet:   %127 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %126, ptr noundef @.str.1), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %127 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %126, ptr noundef @.str.1)
VisitInstr:   %128 = load double, ptr %7, align 8
Check LatCell: 0
In Meet:   %128 = load double, ptr %7, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %128 = load double, ptr %7, align 8
VisitInstr:   %129 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %128, ptr noundef @.str.2)
Check LatCell: 0
In Meet:   %129 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %128, ptr noundef @.str.2), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %129 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %128, ptr noundef @.str.2)
VisitInstr:   %130 = load <2 x double>, ptr %12, align 16
Check LatCell: 0
In Meet:   %130 = load <2 x double>, ptr %12, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %130 = load <2 x double>, ptr %12, align 16
VisitInstr:   %131 = call double @sum_vec(<2 x double> noundef %130)
Check LatCell: 0
In Meet:   %131 = call double @sum_vec(<2 x double> noundef %130), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %131 = call double @sum_vec(<2 x double> noundef %130)
VisitInstr:   %132 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %131, ptr noundef @.str.3)
Check LatCell: 0
In Meet:   %132 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %131, ptr noundef @.str.3), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %132 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %131, ptr noundef @.str.3)
VisitInstr:   %133 = load double, ptr %8, align 8
Check LatCell: 0
In Meet:   %133 = load double, ptr %8, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %133 = load double, ptr %8, align 8
VisitInstr:   %134 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %133, ptr noundef @.str.4)
Check LatCell: 0
In Meet:   %134 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %133, ptr noundef @.str.4), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %134 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %133, ptr noundef @.str.4)
VisitInstr:   %135 = load double, ptr %9, align 8
Check LatCell: 0
In Meet:   %135 = load double, ptr %9, align 8, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %135 = load double, ptr %9, align 8
VisitInstr:   %136 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %135, ptr noundef @.str.5)
Check LatCell: 0
In Meet:   %136 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %135, ptr noundef @.str.5), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %136 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %135, ptr noundef @.str.5)
VisitInstr:   %137 = load <2 x double>, ptr %10, align 16
Check LatCell: 0
In Meet:   %137 = load <2 x double>, ptr %10, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %137 = load <2 x double>, ptr %10, align 16
VisitInstr:   %138 = call double @sum_vec(<2 x double> noundef %137)
Check LatCell: 0
In Meet:   %138 = call double @sum_vec(<2 x double> noundef %137), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %138 = call double @sum_vec(<2 x double> noundef %137)
VisitInstr:   %139 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %138, ptr noundef @.str.6)
Check LatCell: 0
In Meet:   %139 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %138, ptr noundef @.str.6), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %139 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %138, ptr noundef @.str.6)
VisitInstr:   %140 = load <2 x double>, ptr %11, align 16
Check LatCell: 0
In Meet:   %140 = load <2 x double>, ptr %11, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %140 = load <2 x double>, ptr %11, align 16
VisitInstr:   %141 = call double @sum_vec(<2 x double> noundef %140)
Check LatCell: 0
In Meet:   %141 = call double @sum_vec(<2 x double> noundef %140), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %141 = call double @sum_vec(<2 x double> noundef %140)
VisitInstr:   %142 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %141, ptr noundef @.str.7)
Check LatCell: 0
In Meet:   %142 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %141, ptr noundef @.str.7), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %142 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %141, ptr noundef @.str.7)
VisitInstr:   %143 = load <2 x double>, ptr %13, align 16
Check LatCell: 0
In Meet:   %143 = load <2 x double>, ptr %13, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %143 = load <2 x double>, ptr %13, align 16
VisitInstr:   %144 = call double @sum_vec(<2 x double> noundef %143)
Check LatCell: 0
In Meet:   %144 = call double @sum_vec(<2 x double> noundef %143), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %144 = call double @sum_vec(<2 x double> noundef %143)
VisitInstr:   %145 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %144, ptr noundef @.str.8)
Check LatCell: 0
In Meet:   %145 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %144, ptr noundef @.str.8), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %145 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %144, ptr noundef @.str.8)
VisitInstr:   %146 = load <2 x double>, ptr %14, align 16
Check LatCell: 0
In Meet:   %146 = load <2 x double>, ptr %14, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %146 = load <2 x double>, ptr %14, align 16
VisitInstr:   %147 = call double @sum_vec(<2 x double> noundef %146)
Check LatCell: 0
In Meet:   %147 = call double @sum_vec(<2 x double> noundef %146), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %147 = call double @sum_vec(<2 x double> noundef %146)
VisitInstr:   %148 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %147, ptr noundef @.str.9)
Check LatCell: 0
In Meet:   %148 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %147, ptr noundef @.str.9), Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   %148 = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef %147, ptr noundef @.str.9)
VisitInstr:   ret i32 0
Check LatCell: 0
In Meet:   ret i32 0, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   ret i32 0
Visiting BB: 
VisitInstr:   store <2 x double> %118, ptr %20, align 16
Check LatCell: 0
In Meet:   store <2 x double> %118, ptr %20, align 16, Lat1: (1, 0x0), Lat2: (-1, 0x0)
Meet:   store <2 x double> %118, ptr %20, align 16
VisitInstr:   br label %119, !llvm.loop !8
BranchInst:   br label %119, !llvm.loop !8
In AddEdge: 0x55b39b63a6e0, 0x55b39b63a9c0, 0
Adding edge:  -> 
UnitSCCP: 0 instructions removed, 0 basic blocks unreachable, 0 instructions simplified
